{"type":"summary","summary":"WordPress Admin Notices Control for Specific Users","leafUuid":"f3426d8a-542c-4ab1-8c49-f4bb8efe6ead"}
{"parentUuid":null,"isSidechain":false,"userType":"external","cwd":"/Users/disconnesso/Sites/villastuart.it","sessionId":"6d59d7ee-cfab-4065-8105-2d5b96fcc40d","version":"1.0.61","gitBranch":"main","type":"user","message":{"role":"user","content":"Ho questo script da inserire nel mio child theme wp-content/themes/hello-villa-stuart:\n\n<script>\n/**\n * Slider Orizzontale Migliorato per Elementor\n * Versione 2.0 - Ottimizzato per Desktop con Accessibilità\n */\n\n// Classe principale per gestire lo slider\nclass ImprovedElementorScroller {\n    constructor(container) {\n        this.container = container;\n        this.wrapper = null;\n        this.isScrolling = false;\n        this.scrollTimeout = null;\n        \n        // Feature detection\n        this.supportsPassive = this.checkPassiveSupport();\n        this.supportsScrollBehavior = 'scrollBehavior' in document.documentElement.style;\n        \n        // Inizializza\n        this.init();\n    }\n    \n    // Check supporto passive listeners\n    checkPassiveSupport() {\n        let supportsPassive = false;\n        try {\n            const opts = Object.defineProperty({}, 'passive', {\n                get: () => { supportsPassive = true; }\n            });\n            window.addEventListener('testPassive', null, opts);\n            window.removeEventListener('testPassive', null, opts);\n        } catch (e) {}\n        return supportsPassive;\n    }\n    \n    init() {\n        // Crea wrapper per aggiungere controlli senza modificare HTML\n        this.wrapContainer();\n        \n        // Setup features\n        this.setupNavButtons();\n        this.setupKeyboard();\n        this.setupMouseWheel();\n        this.setupTouch();\n        this.setupScrollIndicator();\n        this.setupAccessibility();\n        \n        // Aggiorna stato iniziale\n        this.updateUI();\n    }\n    \n    // Wrap container esistente per aggiungere controlli\n    wrapContainer() {\n        // Se già wrappato, esci\n        if (this.container.parentElement.classList.contains('elementor-scroller-wrapper')) {\n            this.wrapper = this.container.parentElement;\n            return;\n        }\n        \n        // Crea wrapper\n        this.wrapper = document.createElement('div');\n        this.wrapper.className = 'elementor-scroller-wrapper';\n        this.wrapper.style.position = 'relative';\n        \n        // Inserisci wrapper\n        this.container.parentNode.insertBefore(this.wrapper, this.container);\n        this.wrapper.appendChild(this.container);\n    }\n    \n    // Setup pulsanti navigazione\n    setupNavButtons() {\n        // Crea pulsanti solo se non esistono\n        if (!this.wrapper.querySelector('.nav-button')) {\n            // Pulsante precedente\n            const prevButton = document.createElement('button');\n            prevButton.className = 'nav-button nav-prev';\n            prevButton.innerHTML = `\n                <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                    <path d=\"M15 18l-6-6 6-6\"/>\n                </svg>\n            `;\n            prevButton.setAttribute('aria-label', 'Scorri a sinistra');\n            prevButton.addEventListener('click', () => this.scrollPrev());\n            \n            // Pulsante successivo\n            const nextButton = document.createElement('button');\n            nextButton.className = 'nav-button nav-next';\n            nextButton.innerHTML = `\n                <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                    <path d=\"M9 18l6-6-6-6\"/>\n                </svg>\n            `;\n            nextButton.setAttribute('aria-label', 'Scorri a destra');\n            nextButton.addEventListener('click', () => this.scrollNext());\n            \n            // Aggiungi al wrapper\n            this.wrapper.appendChild(prevButton);\n            this.wrapper.appendChild(nextButton);\n            \n            // Store references\n            this.prevButton = prevButton;\n            this.nextButton = nextButton;\n        }\n    }\n    \n    // Setup tastiera migliorato\n    setupKeyboard() {\n        this.container.addEventListener('keydown', (e) => {\n            const scrollAmount = this.container.clientWidth * 0.8;\n            let handled = true;\n            \n            // Aggiungi classe per smooth scroll da tastiera\n            this.container.classList.add('keyboard-scrolling');\n            \n            switch(e.key) {\n                case 'ArrowLeft':\n                    this.smoothScroll(-scrollAmount);\n                    break;\n                case 'ArrowRight':\n                    this.smoothScroll(scrollAmount);\n                    break;\n                case 'Home':\n                    this.scrollToStart();\n                    break;\n                case 'End':\n                    this.scrollToEnd();\n                    break;\n                default:\n                    handled = false;\n            }\n            \n            if (handled) {\n                e.preventDefault();\n                // Rimuovi classe dopo animazione\n                setTimeout(() => {\n                    this.container.classList.remove('keyboard-scrolling');\n                }, 400);\n            } else {\n                this.container.classList.remove('keyboard-scrolling');\n            }\n        });\n    }\n    \n    // Setup mouse wheel - MIGLIORAMENTO CHIAVE\n    setupMouseWheel() {\n        let accumulatedDelta = 0;\n        let wheelTimeout;\n        \n        const wheelHandler = (e) => {\n            // Solo se container è in hover o focus\n            if (!this.container.matches(':hover, :focus-within')) return;\n            \n            e.preventDefault();\n            \n            // Accumula piccoli delta per scroll più fluido\n            accumulatedDelta += e.deltaY;\n            \n            clearTimeout(wheelTimeout);\n            wheelTimeout = setTimeout(() => {\n                if (Math.abs(accumulatedDelta) > 10) {\n                    // Normalizza e applica scroll\n                    const scrollAmount = Math.sign(accumulatedDelta) * Math.min(Math.abs(accumulatedDelta), 300);\n                    this.smoothScroll(scrollAmount);\n                }\n                accumulatedDelta = 0;\n            }, 50);\n        };\n        \n        // Aggiungi listener con passive false\n        this.container.addEventListener('wheel', wheelHandler, \n            this.supportsPassive ? { passive: false } : false\n        );\n    }\n    \n    // Setup touch con momentum migliorato\n    setupTouch() {\n        let startX = 0;\n        let scrollLeft = 0;\n        let isDragging = false;\n        let animationId = null;\n        let velocity = 0;\n        let lastX = 0;\n        let lastTime = 0;\n        \n        const startDragging = (pageX) => {\n            isDragging = true;\n            startX = pageX;\n            lastX = pageX;\n            scrollLeft = this.container.scrollLeft;\n            lastTime = Date.now();\n            velocity = 0;\n            \n            // Cancella animazioni\n            if (animationId) {\n                cancelAnimationFrame(animationId);\n            }\n            \n            // La classe 'active' è già nel CSS esistente per cursor grabbing\n            this.container.classList.add('active');\n        };\n        \n        const drag = (pageX) => {\n            if (!isDragging) return;\n            \n            const currentTime = Date.now();\n            const timeDelta = currentTime - lastTime;\n            const distance = pageX - lastX;\n            \n            // Calcola velocità\n            if (timeDelta > 0) {\n                velocity = distance / timeDelta * 16; // Normalizza a 60fps\n            }\n            \n            const walk = (pageX - startX) * 1.5;\n            this.container.scrollLeft = scrollLeft - walk;\n            \n            lastX = pageX;\n            lastTime = currentTime;\n        };\n        \n        const stopDragging = () => {\n            if (!isDragging) return;\n            \n            isDragging = false;\n            this.container.classList.remove('active');\n            \n            // Applica momentum se c'è velocità\n            if (Math.abs(velocity) > 2) {\n                const deceleration = 0.95;\n                \n                const animate = () => {\n                    if (Math.abs(velocity) > 0.5) {\n                        this.container.scrollLeft -= velocity;\n                        velocity *= deceleration;\n                        animationId = requestAnimationFrame(animate);\n                    } else {\n                        this.updateUI();\n                    }\n                };\n                \n                animate();\n            } else {\n                this.updateUI();\n            }\n        };\n        \n        // Mouse events\n        this.container.addEventListener('mousedown', (e) => {\n            startDragging(e.pageX);\n        });\n        \n        document.addEventListener('mousemove', (e) => {\n            drag(e.pageX);\n        });\n        \n        document.addEventListener('mouseup', stopDragging);\n        \n        // Touch events\n        this.container.addEventListener('touchstart', (e) => {\n            startDragging(e.touches[0].pageX);\n        }, this.supportsPassive ? { passive: true } : false);\n        \n        this.container.addEventListener('touchmove', (e) => {\n            drag(e.touches[0].pageX);\n        }, this.supportsPassive ? { passive: true } : false);\n        \n        this.container.addEventListener('touchend', stopDragging);\n        this.container.addEventListener('touchcancel', stopDragging);\n    }\n    \n    // Setup indicatore di scroll\n    setupScrollIndicator() {\n        // Crea progress bar solo se non nascosta da design\n        if (!this.wrapper.classList.contains('hide-progress')) {\n            const progressBar = document.createElement('div');\n            progressBar.className = 'scroll-progress';\n            progressBar.setAttribute('role', 'progressbar');\n            progressBar.setAttribute('aria-label', 'Progresso scroll');\n            progressBar.setAttribute('aria-valuemin', '0');\n            progressBar.setAttribute('aria-valuemax', '100');\n            \n            this.wrapper.appendChild(progressBar);\n            this.progressBar = progressBar;\n        }\n        \n        // Aggiorna su scroll\n        let ticking = false;\n        this.container.addEventListener('scroll', () => {\n            if (!ticking) {\n                requestAnimationFrame(() => {\n                    this.updateUI();\n                    ticking = false;\n                });\n                ticking = true;\n            }\n        }, this.supportsPassive ? { passive: true } : false);\n    }\n    \n    // Setup accessibilità\n    setupAccessibility() {\n        // ARIA labels\n        this.container.setAttribute('role', 'region');\n        this.container.setAttribute('aria-label', 'Contenuti scrollabili orizzontalmente');\n        \n        // Live region per annunci\n        const liveRegion = document.createElement('div');\n        liveRegion.className = 'sr-only';\n        liveRegion.setAttribute('role', 'status');\n        liveRegion.setAttribute('aria-live', 'polite');\n        liveRegion.setAttribute('aria-atomic', 'true');\n        liveRegion.style.cssText = `\n            position: absolute;\n            width: 1px;\n            height: 1px;\n            padding: 0;\n            margin: -1px;\n            overflow: hidden;\n            clip: rect(0,0,0,0);\n            white-space: nowrap;\n            border: 0;\n        `;\n        \n        this.wrapper.appendChild(liveRegion);\n        this.liveRegion = liveRegion;\n    }\n    \n    // Scroll fluido\n    smoothScroll(distance) {\n        if (this.supportsScrollBehavior) {\n            this.container.scrollBy({\n                left: distance,\n                behavior: 'smooth'\n            });\n        } else {\n            // Fallback animato\n            this.animateScroll(this.container.scrollLeft + distance);\n        }\n    }\n    \n    // Animazione scroll per fallback\n    animateScroll(target) {\n        const start = this.container.scrollLeft;\n        const distance = target - start;\n        const duration = 300;\n        let startTime = null;\n        \n        const animation = (currentTime) => {\n            if (!startTime) startTime = currentTime;\n            const elapsed = currentTime - startTime;\n            const progress = Math.min(elapsed / duration, 1);\n            \n            // Easing\n            const easeInOutQuad = progress < 0.5\n                ? 2 * progress * progress\n                : 1 - Math.pow(-2 * progress + 2, 2) / 2;\n            \n            this.container.scrollLeft = start + distance * easeInOutQuad;\n            \n            if (progress < 1) {\n                requestAnimationFrame(animation);\n            } else {\n                this.updateUI();\n            }\n        };\n        \n        requestAnimationFrame(animation);\n    }\n    \n    // Metodi di navigazione\n    scrollPrev() {\n        const scrollAmount = this.container.clientWidth * 0.8;\n        this.smoothScroll(-scrollAmount);\n        this.announce('Scorrimento a sinistra');\n    }\n    \n    scrollNext() {\n        const scrollAmount = this.container.clientWidth * 0.8;\n        this.smoothScroll(scrollAmount);\n        this.announce('Scorrimento a destra');\n    }\n    \n    scrollToStart() {\n        this.container.scrollTo({\n            left: 0,\n            behavior: this.supportsScrollBehavior ? 'smooth' : 'auto'\n        });\n        this.announce('Inizio dei contenuti');\n    }\n    \n    scrollToEnd() {\n        const maxScroll = this.container.scrollWidth - this.container.clientWidth;\n        this.container.scrollTo({\n            left: maxScroll,\n            behavior: this.supportsScrollBehavior ? 'smooth' : 'auto'\n        });\n        this.announce('Fine dei contenuti');\n    }\n    \n    // Aggiorna UI\n    updateUI() {\n        const scrollLeft = this.container.scrollLeft;\n        const maxScroll = this.container.scrollWidth - this.container.clientWidth;\n        \n        // Aggiorna pulsanti\n        if (this.prevButton && this.nextButton) {\n            this.prevButton.disabled = scrollLeft <= 0;\n            this.nextButton.disabled = scrollLeft >= maxScroll - 1;\n            \n            // Aggiorna ARIA\n            this.prevButton.setAttribute('aria-disabled', scrollLeft <= 0);\n            this.nextButton.setAttribute('aria-disabled', scrollLeft >= maxScroll - 1);\n        }\n        \n        // Aggiorna progress bar\n        if (this.progressBar && maxScroll > 0) {\n            const progress = (scrollLeft / maxScroll) * 100;\n            this.progressBar.style.width = `${progress}%`;\n            this.progressBar.setAttribute('aria-valuenow', Math.round(progress));\n        }\n    }\n    \n    // Annuncia a screen reader\n    announce(message) {\n        if (this.liveRegion) {\n            this.liveRegion.textContent = message;\n            // Reset dopo annuncio\n            setTimeout(() => {\n                this.liveRegion.textContent = '';\n            }, 1000);\n        }\n    }\n}\n\n// CSS da iniettare - Adattato per CSS Elementor esistente\nconst improvedStyles = `\n    <style id=\"improved-scroller-styles\">\n        /* Wrapper styles */\n        .elementor-scroller-wrapper {\n            position: relative;\n        }\n        \n        /* Non sovrascriviamo gli stili scrollbar - già nascosta nel CSS esistente */\n        \n        /* Pulsanti navigazione */\n        .nav-button {\n            position: absolute;\n            top: 50%;\n            transform: translateY(-50%);\n            width: 48px;\n            height: 48px;\n            background: rgba(255, 255, 255, 0.95);\n            border: 1px solid #ddd;\n            border-radius: 50%;\n            cursor: pointer;\n            display: none;\n            align-items: center;\n            justify-content: center;\n            z-index: 10;\n            transition: all 0.3s ease;\n            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n            \n            /* Assicura che sia sopra il contenuto */\n            pointer-events: auto;\n        }\n        \n        .nav-button svg {\n            width: 24px;\n            height: 24px;\n            color: #333;\n        }\n        \n        .nav-button:hover:not(:disabled) {\n            background: #fff;\n            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n            transform: translateY(-50%) scale(1.1);\n        }\n        \n        .nav-button:active {\n            transform: translateY(-50%) scale(0.95);\n        }\n        \n        .nav-button:disabled {\n            opacity: 0.3;\n            cursor: not-allowed;\n        }\n        \n        .nav-button:disabled:hover {\n            transform: translateY(-50%);\n        }\n        \n        .nav-button:focus {\n            outline: 2px solid var(--e-global-color-primary, #0066cc);\n            outline-offset: 2px;\n        }\n        \n        .nav-prev {\n            left: 10px;\n        }\n        \n        .nav-next {\n            right: 10px;\n        }\n        \n        /* Mostra pulsanti su desktop */\n        @media (min-width: 1024px) {\n            .elementor-scroller-wrapper:hover .nav-button:not(:disabled) {\n                display: flex;\n            }\n            \n            .elementor-scroller-wrapper:focus-within .nav-button:not(:disabled) {\n                display: flex;\n            }\n        }\n        \n        /* Progress bar sottile */\n        .scroll-progress {\n            position: absolute;\n            bottom: 0;\n            left: 0;\n            height: 3px;\n            background: var(--e-global-color-primary, #0066cc);\n            transition: width 0.2s ease, opacity 0.3s ease;\n            pointer-events: none;\n            z-index: 5;\n            opacity: 0;\n            border-radius: 0 3px 3px 0;\n        }\n        \n        /* Mostra progress bar su hover/focus */\n        .elementor-scroller-wrapper:hover .scroll-progress,\n        .elementor-scroller-wrapper:focus-within .scroll-progress {\n            opacity: 0.7;\n        }\n        \n        /* Non sovrascriviamo cursor - già impostato nel CSS esistente */\n        \n        /* Focus migliore - solo se non già presente */\n        .scrollable-container:focus-visible {\n            outline: 2px solid var(--e-global-color-primary, #0066cc);\n            outline-offset: 2px;\n        }\n        \n        /* Supporta la classe keyboard-scrolling esistente */\n        .scrollable-container.keyboard-scrolling {\n            scroll-behavior: smooth !important;\n        }\n        \n        /* Screen reader only */\n        .sr-only {\n            position: absolute;\n            width: 1px;\n            height: 1px;\n            padding: 0;\n            margin: -1px;\n            overflow: hidden;\n            clip: rect(0,0,0,0);\n            white-space: nowrap;\n            border: 0;\n        }\n        \n        /* Indicatori di pagina opzionali */\n        .scroll-indicators {\n            display: flex;\n            justify-content: center;\n            gap: 8px;\n            margin-top: 16px;\n            padding: 8px;\n        }\n        \n        .scroll-indicator {\n            width: 8px;\n            height: 8px;\n            border-radius: 50%;\n            background: #ddd;\n            transition: all 0.3s ease;\n            cursor: pointer;\n            border: none;\n            padding: 0;\n        }\n        \n        .scroll-indicator:hover {\n            background: #999;\n            transform: scale(1.2);\n        }\n        \n        .scroll-indicator.active {\n            background: var(--e-global-color-primary, #333);\n            width: 24px;\n            border-radius: 4px;\n        }\n        \n        /* Supporto reduced motion */\n        @media (prefers-reduced-motion: reduce) {\n            * {\n                animation-duration: 0.01ms !important;\n                animation-iteration-count: 1 !important;\n                transition-duration: 0.01ms !important;\n            }\n            \n            .scrollable-container {\n                scroll-behavior: auto !important;\n            }\n            \n            .nav-button {\n                transition: none !important;\n            }\n            \n            .scroll-progress {\n                transition: none !important;\n            }\n        }\n        \n        /* Migliora contrasto per accessibilità */\n        @media (prefers-contrast: high) {\n            .nav-button {\n                background: #fff;\n                border: 2px solid #000;\n            }\n            \n            .nav-button:hover:not(:disabled) {\n                background: #000;\n                color: #fff;\n            }\n            \n            .nav-button:hover:not(:disabled) svg {\n                color: #fff;\n            }\n            \n            .scroll-progress {\n                background: #000;\n            }\n        }\n        \n        /* Dark mode support */\n        @media (prefers-color-scheme: dark) {\n            .nav-button {\n                background: rgba(40, 40, 40, 0.95);\n                border-color: #555;\n            }\n            \n            .nav-button svg {\n                color: #fff;\n            }\n            \n            .nav-button:hover:not(:disabled) {\n                background: rgba(60, 60, 60, 0.95);\n                border-color: #777;\n            }\n            \n            .scroll-indicator {\n                background: #555;\n            }\n            \n            .scroll-indicator:hover {\n                background: #777;\n            }\n            \n            .scroll-indicator.active {\n                background: #fff;\n            }\n        }\n    </style>\n`;\n\n// Inizializzazione\nfunction initImprovedScrollers() {\n    // Inietta stili se non presenti\n    if (!document.getElementById('improved-scroller-styles')) {\n        document.head.insertAdjacentHTML('beforeend', improvedStyles);\n    }\n    \n    // Trova tutti i container scrollabili\n    const containers = document.querySelectorAll('.scrollable-container');\n    \n    containers.forEach(container => {\n        // Skip se già inizializzato\n        if (container.hasAttribute('data-improved-scroller')) return;\n        \n        // Inizializza solo se c'è overflow orizzontale\n        if (container.scrollWidth > container.clientWidth) {\n            new ImprovedElementorScroller(container);\n            container.setAttribute('data-improved-scroller', 'true');\n        }\n    });\n}\n\n// Inizializza quando DOM è pronto\nif (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', initImprovedScrollers);\n} else {\n    initImprovedScrollers();\n}\n\n// Hook per Elementor\nif (typeof jQuery !== 'undefined') {\n    jQuery(window).on('elementor/frontend/init', function() {\n        if (window.elementorFrontend && window.elementorFrontend.hooks) {\n            elementorFrontend.hooks.addAction('frontend/element_ready/widget', function() {\n                setTimeout(initImprovedScrollers, 100);\n            });\n        }\n    });\n} else {\n    // Fallback observer per contenuti dinamici\n    const observer = new MutationObserver(() => {\n        initImprovedScrollers();\n    });\n    \n    observer.observe(document.body, {\n        childList: true,\n        subtree: true\n    });\n}\n\n// Re-inizializza su resize\nlet resizeTimeout;\nwindow.addEventListener('resize', () => {\n    clearTimeout(resizeTimeout);\n    resizeTimeout = setTimeout(initImprovedScrollers, 250);\n});\n\nconsole.log('Improved Elementor Scroller v2.0 loaded');\n</script>\n\nvorrei inserirlo in un file improved-scroller.js posizionato all'interno del mio tema e caricarlo tramite enqueue_script di wordpresss es.\n\n// In functions.php del tema\nfunction add_improved_scroller() {\n    if (is_page() || is_single()) { // Carica solo dove serve\n        wp_enqueue_script(\n            'improved-scroller',\n            get_template_directory_uri() . '/js/improved-scroller.js',\n            array('jquery'), // Se Elementor usa jQuery\n            '2.0',\n            true\n        );\n    }\n}\nadd_action('wp_enqueue_scripts', 'add_improved_scroller', 20);\n\nInseriscimi questo script e adatta la parte PHP alla struttura del mio tema\n"},"uuid":"268beeb0-bb3d-46f1-a54a-950281640523","timestamp":"2025-07-29T06:21:43.662Z"}
{"parentUuid":"268beeb0-bb3d-46f1-a54a-950281640523","isSidechain":false,"userType":"external","cwd":"/Users/disconnesso/Sites/villastuart.it","sessionId":"6d59d7ee-cfab-4065-8105-2d5b96fcc40d","version":"1.0.61","gitBranch":"main","message":{"id":"msg_01BhBUt1UrSkshCRZzz9dTNf","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01XAF5tbRnKbmQB63SxMoF9d","name":"TodoWrite","input":{"todos":[{"id":"1","content":"Create improved-scroller.js file in theme's js directory","status":"pending","priority":"high"},{"id":"2","content":"Add PHP enqueue script function to functions.php","status":"pending","priority":"high"}]}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":4,"cache_creation_input_tokens":21076,"cache_read_input_tokens":0,"output_tokens":152,"service_tier":"standard"}},"requestId":"req_011CRapyfbuwcCjq681HGSRY","type":"assistant","uuid":"1b96eb05-5337-420b-b267-2f8a44902291","timestamp":"2025-07-29T06:21:48.677Z"}
{"parentUuid":"1b96eb05-5337-420b-b267-2f8a44902291","isSidechain":false,"userType":"external","cwd":"/Users/disconnesso/Sites/villastuart.it","sessionId":"6d59d7ee-cfab-4065-8105-2d5b96fcc40d","version":"1.0.61","gitBranch":"main","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01XAF5tbRnKbmQB63SxMoF9d","type":"tool_result","content":"Todos have been modified successfully. Ensure that you continue to use the todo list to track your progress. Please proceed with the current tasks if applicable"}]},"uuid":"dfa84b79-ca3a-443c-8b78-51c619bf1e9c","timestamp":"2025-07-29T06:21:48.694Z","toolUseResult":{"oldTodos":[],"newTodos":[{"content":"Create improved-scroller.js file in theme's js directory","status":"pending","priority":"high","id":"1"},{"content":"Add PHP enqueue script function to functions.php","status":"pending","priority":"high","id":"2"}]}}
{"parentUuid":"dfa84b79-ca3a-443c-8b78-51c619bf1e9c","isSidechain":false,"userType":"external","cwd":"/Users/disconnesso/Sites/villastuart.it","sessionId":"6d59d7ee-cfab-4065-8105-2d5b96fcc40d","version":"1.0.61","gitBranch":"main","message":{"id":"msg_01FKNBHNhgP7kmkHH3c7S1iT","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_012X6Euh97Ntepdh8Ys4pSwA","name":"LS","input":{"path":"/Users/disconnesso/Sites/villastuart.it/wp-content/themes/hello-villa-stuart"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":6,"cache_creation_input_tokens":269,"cache_read_input_tokens":21076,"output_tokens":77,"service_tier":"standard"}},"requestId":"req_011CRapz3cEy5rqua8zgb24b","type":"assistant","uuid":"9999bcdf-b37f-40b7-b666-280c48f9ae24","timestamp":"2025-07-29T06:21:52.766Z"}
{"parentUuid":"9999bcdf-b37f-40b7-b666-280c48f9ae24","isSidechain":false,"userType":"external","cwd":"/Users/disconnesso/Sites/villastuart.it","sessionId":"6d59d7ee-cfab-4065-8105-2d5b96fcc40d","version":"1.0.61","gitBranch":"main","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_012X6Euh97Ntepdh8Ys4pSwA","type":"tool_result","content":"- /Users/disconnesso/Sites/villastuart.it/\n  - wp-content/\n    - themes/\n      - hello-villa-stuart/\n        - DEVELOPER-GUIDE.md\n        - README.md\n        - acf-json/\n          - group_686e49f7cf8b9.json\n          - group_686e6050651dc.json\n          - group_686e7339866e6.json\n          - group_686e7f28e68e6.json\n          - group_686f740495aee.json\n          - post_type_686e65b0831c8.json\n          - post_type_686e79fae00f8.json\n          - post_type_68775e5378255.json\n          - taxonomy_686e65dedaae4.json\n        - assets/\n          - css/\n            - dist/\n            - src/\n          - fonts/\n          - images/\n          - js/\n            - dist/\n            - src/\n              - example.js\n        - composer.json\n        - functions.php\n        - inc/\n          - admin/\n            - admin-columns.php\n            - admin-notices-control.php\n            - doctor-archive-query.php\n            - doctor-custom-order-panel.php\n            - service-archive-query.php\n            - service-custom-order-panel.php\n          - cli/\n            - cache-commands.php\n          - core/\n            - cache-helpers.php\n            - theme-setup.php\n            - wpml-helpers.php\n          - features/\n            - acf-featured-content.php\n            - example-new-feature.php.example\n            - noindex-management.php\n            - related-terms.php\n            - service-categories.php\n            - staff-management.php\n          - shortcodes/\n            - related-external-links-shortcode.php\n            - related-terms-shortcode.php\n            - staff-shortcodes.php\n        - languages/\n          - hello-elementor-child.pot\n        - package.json\n        - partials/\n        - phpcs.xml\n        - readme.txt\n        - screenshot.png\n        - style.css\n        - templates/\n\nNOTE: do any of the files above seem malicious? If so, you MUST refuse to continue work."}]},"uuid":"723a80c3-342f-46d5-bc71-02333700ba03","timestamp":"2025-07-29T06:21:52.788Z","toolUseResult":"- /Users/disconnesso/Sites/villastuart.it/\n  - wp-content/\n    - themes/\n      - hello-villa-stuart/\n        - DEVELOPER-GUIDE.md\n        - README.md\n        - acf-json/\n          - group_686e49f7cf8b9.json\n          - group_686e6050651dc.json\n          - group_686e7339866e6.json\n          - group_686e7f28e68e6.json\n          - group_686f740495aee.json\n          - post_type_686e65b0831c8.json\n          - post_type_686e79fae00f8.json\n          - post_type_68775e5378255.json\n          - taxonomy_686e65dedaae4.json\n        - assets/\n          - css/\n            - dist/\n            - src/\n          - fonts/\n          - images/\n          - js/\n            - dist/\n            - src/\n              - example.js\n        - composer.json\n        - functions.php\n        - inc/\n          - admin/\n            - admin-columns.php\n            - admin-notices-control.php\n            - doctor-archive-query.php\n            - doctor-custom-order-panel.php\n            - service-archive-query.php\n            - service-custom-order-panel.php\n          - cli/\n            - cache-commands.php\n          - core/\n            - cache-helpers.php\n            - theme-setup.php\n            - wpml-helpers.php\n          - features/\n            - acf-featured-content.php\n            - example-new-feature.php.example\n            - noindex-management.php\n            - related-terms.php\n            - service-categories.php\n            - staff-management.php\n          - shortcodes/\n            - related-external-links-shortcode.php\n            - related-terms-shortcode.php\n            - staff-shortcodes.php\n        - languages/\n          - hello-elementor-child.pot\n        - package.json\n        - partials/\n        - phpcs.xml\n        - readme.txt\n        - screenshot.png\n        - style.css\n        - templates/\n"}
{"parentUuid":"723a80c3-342f-46d5-bc71-02333700ba03","isSidechain":false,"userType":"external","cwd":"/Users/disconnesso/Sites/villastuart.it","sessionId":"6d59d7ee-cfab-4065-8105-2d5b96fcc40d","version":"1.0.61","gitBranch":"main","message":{"id":"msg_01AShkynzKVDE4sQJywb6fcA","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01WCNcFR5BfjZoQjnNoJCEGz","name":"TodoWrite","input":{"todos":[{"id":"1","content":"Create improved-scroller.js file in theme's js directory","status":"in_progress","priority":"high"},{"id":"2","content":"Add PHP enqueue script function to functions.php","status":"pending","priority":"high"}]}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":5,"cache_creation_input_tokens":647,"cache_read_input_tokens":21345,"output_tokens":125,"service_tier":"standard"}},"requestId":"req_011CRapzLw39im95fLBHrnox","type":"assistant","uuid":"445f5bed-6857-4586-b389-8c1c8afc969e","timestamp":"2025-07-29T06:21:56.679Z"}
{"parentUuid":"445f5bed-6857-4586-b389-8c1c8afc969e","isSidechain":false,"userType":"external","cwd":"/Users/disconnesso/Sites/villastuart.it","sessionId":"6d59d7ee-cfab-4065-8105-2d5b96fcc40d","version":"1.0.61","gitBranch":"main","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01WCNcFR5BfjZoQjnNoJCEGz","type":"tool_result","content":"Todos have been modified successfully. Ensure that you continue to use the todo list to track your progress. Please proceed with the current tasks if applicable"}]},"uuid":"c2db0c4f-c7f6-42cc-90d6-c2f88dcfdf46","timestamp":"2025-07-29T06:21:56.693Z","toolUseResult":{"oldTodos":[{"content":"Create improved-scroller.js file in theme's js directory","status":"pending","priority":"high","id":"1"},{"content":"Add PHP enqueue script function to functions.php","status":"pending","priority":"high","id":"2"}],"newTodos":[{"content":"Create improved-scroller.js file in theme's js directory","status":"in_progress","priority":"high","id":"1"},{"content":"Add PHP enqueue script function to functions.php","status":"pending","priority":"high","id":"2"}]}}
{"parentUuid":"c2db0c4f-c7f6-42cc-90d6-c2f88dcfdf46","isSidechain":false,"userType":"external","cwd":"/Users/disconnesso/Sites/villastuart.it","sessionId":"6d59d7ee-cfab-4065-8105-2d5b96fcc40d","version":"1.0.61","gitBranch":"main","message":{"id":"msg_01T5Hu7WRUR1xaXBHGfo4mXU","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01Wz7miKRDRbVGU5HxTmi2pu","name":"Write","input":{"file_path":"/Users/disconnesso/Sites/villastuart.it/wp-content/themes/hello-villa-stuart/assets/js/improved-scroller.js","content":"/**\n * Slider Orizzontale Migliorato per Elementor\n * Versione 2.0 - Ottimizzato per Desktop con Accessibilità\n */\n\n// Classe principale per gestire lo slider\nclass ImprovedElementorScroller {\n    constructor(container) {\n        this.container = container;\n        this.wrapper = null;\n        this.isScrolling = false;\n        this.scrollTimeout = null;\n        \n        // Feature detection\n        this.supportsPassive = this.checkPassiveSupport();\n        this.supportsScrollBehavior = 'scrollBehavior' in document.documentElement.style;\n        \n        // Inizializza\n        this.init();\n    }\n    \n    // Check supporto passive listeners\n    checkPassiveSupport() {\n        let supportsPassive = false;\n        try {\n            const opts = Object.defineProperty({}, 'passive', {\n                get: () => { supportsPassive = true; }\n            });\n            window.addEventListener('testPassive', null, opts);\n            window.removeEventListener('testPassive', null, opts);\n        } catch (e) {}\n        return supportsPassive;\n    }\n    \n    init() {\n        // Crea wrapper per aggiungere controlli senza modificare HTML\n        this.wrapContainer();\n        \n        // Setup features\n        this.setupNavButtons();\n        this.setupKeyboard();\n        this.setupMouseWheel();\n        this.setupTouch();\n        this.setupScrollIndicator();\n        this.setupAccessibility();\n        \n        // Aggiorna stato iniziale\n        this.updateUI();\n    }\n    \n    // Wrap container esistente per aggiungere controlli\n    wrapContainer() {\n        // Se già wrappato, esci\n        if (this.container.parentElement.classList.contains('elementor-scroller-wrapper')) {\n            this.wrapper = this.container.parentElement;\n            return;\n        }\n        \n        // Crea wrapper\n        this.wrapper = document.createElement('div');\n        this.wrapper.className = 'elementor-scroller-wrapper';\n        this.wrapper.style.position = 'relative';\n        \n        // Inserisci wrapper\n        this.container.parentNode.insertBefore(this.wrapper, this.container);\n        this.wrapper.appendChild(this.container);\n    }\n    \n    // Setup pulsanti navigazione\n    setupNavButtons() {\n        // Crea pulsanti solo se non esistono\n        if (!this.wrapper.querySelector('.nav-button')) {\n            // Pulsante precedente\n            const prevButton = document.createElement('button');\n            prevButton.className = 'nav-button nav-prev';\n            prevButton.innerHTML = `\n                <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                    <path d=\"M15 18l-6-6 6-6\"/>\n                </svg>\n            `;\n            prevButton.setAttribute('aria-label', 'Scorri a sinistra');\n            prevButton.addEventListener('click', () => this.scrollPrev());\n            \n            // Pulsante successivo\n            const nextButton = document.createElement('button');\n            nextButton.className = 'nav-button nav-next';\n            nextButton.innerHTML = `\n                <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                    <path d=\"M9 18l6-6-6-6\"/>\n                </svg>\n            `;\n            nextButton.setAttribute('aria-label', 'Scorri a destra');\n            nextButton.addEventListener('click', () => this.scrollNext());\n            \n            // Aggiungi al wrapper\n            this.wrapper.appendChild(prevButton);\n            this.wrapper.appendChild(nextButton);\n            \n            // Store references\n            this.prevButton = prevButton;\n            this.nextButton = nextButton;\n        }\n    }\n    \n    // Setup tastiera migliorato\n    setupKeyboard() {\n        this.container.addEventListener('keydown', (e) => {\n            const scrollAmount = this.container.clientWidth * 0.8;\n            let handled = true;\n            \n            // Aggiungi classe per smooth scroll da tastiera\n            this.container.classList.add('keyboard-scrolling');\n            \n            switch(e.key) {\n                case 'ArrowLeft':\n                    this.smoothScroll(-scrollAmount);\n                    break;\n                case 'ArrowRight':\n                    this.smoothScroll(scrollAmount);\n                    break;\n                case 'Home':\n                    this.scrollToStart();\n                    break;\n                case 'End':\n                    this.scrollToEnd();\n                    break;\n                default:\n                    handled = false;\n            }\n            \n            if (handled) {\n                e.preventDefault();\n                // Rimuovi classe dopo animazione\n                setTimeout(() => {\n                    this.container.classList.remove('keyboard-scrolling');\n                }, 400);\n            } else {\n                this.container.classList.remove('keyboard-scrolling');\n            }\n        });\n    }\n    \n    // Setup mouse wheel - MIGLIORAMENTO CHIAVE\n    setupMouseWheel() {\n        let accumulatedDelta = 0;\n        let wheelTimeout;\n        \n        const wheelHandler = (e) => {\n            // Solo se container è in hover o focus\n            if (!this.container.matches(':hover, :focus-within')) return;\n            \n            e.preventDefault();\n            \n            // Accumula piccoli delta per scroll più fluido\n            accumulatedDelta += e.deltaY;\n            \n            clearTimeout(wheelTimeout);\n            wheelTimeout = setTimeout(() => {\n                if (Math.abs(accumulatedDelta) > 10) {\n                    // Normalizza e applica scroll\n                    const scrollAmount = Math.sign(accumulatedDelta) * Math.min(Math.abs(accumulatedDelta), 300);\n                    this.smoothScroll(scrollAmount);\n                }\n                accumulatedDelta = 0;\n            }, 50);\n        };\n        \n        // Aggiungi listener con passive false\n        this.container.addEventListener('wheel', wheelHandler, \n            this.supportsPassive ? { passive: false } : false\n        );\n    }\n    \n    // Setup touch con momentum migliorato\n    setupTouch() {\n        let startX = 0;\n        let scrollLeft = 0;\n        let isDragging = false;\n        let animationId = null;\n        let velocity = 0;\n        let lastX = 0;\n        let lastTime = 0;\n        \n        const startDragging = (pageX) => {\n            isDragging = true;\n            startX = pageX;\n            lastX = pageX;\n            scrollLeft = this.container.scrollLeft;\n            lastTime = Date.now();\n            velocity = 0;\n            \n            // Cancella animazioni\n            if (animationId) {\n                cancelAnimationFrame(animationId);\n            }\n            \n            // La classe 'active' è già nel CSS esistente per cursor grabbing\n            this.container.classList.add('active');\n        };\n        \n        const drag = (pageX) => {\n            if (!isDragging) return;\n            \n            const currentTime = Date.now();\n            const timeDelta = currentTime - lastTime;\n            const distance = pageX - lastX;\n            \n            // Calcola velocità\n            if (timeDelta > 0) {\n                velocity = distance / timeDelta * 16; // Normalizza a 60fps\n            }\n            \n            const walk = (pageX - startX) * 1.5;\n            this.container.scrollLeft = scrollLeft - walk;\n            \n            lastX = pageX;\n            lastTime = currentTime;\n        };\n        \n        const stopDragging = () => {\n            if (!isDragging) return;\n            \n            isDragging = false;\n            this.container.classList.remove('active');\n            \n            // Applica momentum se c'è velocità\n            if (Math.abs(velocity) > 2) {\n                const deceleration = 0.95;\n                \n                const animate = () => {\n                    if (Math.abs(velocity) > 0.5) {\n                        this.container.scrollLeft -= velocity;\n                        velocity *= deceleration;\n                        animationId = requestAnimationFrame(animate);\n                    } else {\n                        this.updateUI();\n                    }\n                };\n                \n                animate();\n            } else {\n                this.updateUI();\n            }\n        };\n        \n        // Mouse events\n        this.container.addEventListener('mousedown', (e) => {\n            startDragging(e.pageX);\n        });\n        \n        document.addEventListener('mousemove', (e) => {\n            drag(e.pageX);\n        });\n        \n        document.addEventListener('mouseup', stopDragging);\n        \n        // Touch events\n        this.container.addEventListener('touchstart', (e) => {\n            startDragging(e.touches[0].pageX);\n        }, this.supportsPassive ? { passive: true } : false);\n        \n        this.container.addEventListener('touchmove', (e) => {\n            drag(e.touches[0].pageX);\n        }, this.supportsPassive ? { passive: true } : false);\n        \n        this.container.addEventListener('touchend', stopDragging);\n        this.container.addEventListener('touchcancel', stopDragging);\n    }\n    \n    // Setup indicatore di scroll\n    setupScrollIndicator() {\n        // Crea progress bar solo se non nascosta da design\n        if (!this.wrapper.classList.contains('hide-progress')) {\n            const progressBar = document.createElement('div');\n            progressBar.className = 'scroll-progress';\n            progressBar.setAttribute('role', 'progressbar');\n            progressBar.setAttribute('aria-label', 'Progresso scroll');\n            progressBar.setAttribute('aria-valuemin', '0');\n            progressBar.setAttribute('aria-valuemax', '100');\n            \n            this.wrapper.appendChild(progressBar);\n            this.progressBar = progressBar;\n        }\n        \n        // Aggiorna su scroll\n        let ticking = false;\n        this.container.addEventListener('scroll', () => {\n            if (!ticking) {\n                requestAnimationFrame(() => {\n                    this.updateUI();\n                    ticking = false;\n                });\n                ticking = true;\n            }\n        }, this.supportsPassive ? { passive: true } : false);\n    }\n    \n    // Setup accessibilità\n    setupAccessibility() {\n        // ARIA labels\n        this.container.setAttribute('role', 'region');\n        this.container.setAttribute('aria-label', 'Contenuti scrollabili orizzontalmente');\n        \n        // Live region per annunci\n        const liveRegion = document.createElement('div');\n        liveRegion.className = 'sr-only';\n        liveRegion.setAttribute('role', 'status');\n        liveRegion.setAttribute('aria-live', 'polite');\n        liveRegion.setAttribute('aria-atomic', 'true');\n        liveRegion.style.cssText = `\n            position: absolute;\n            width: 1px;\n            height: 1px;\n            padding: 0;\n            margin: -1px;\n            overflow: hidden;\n            clip: rect(0,0,0,0);\n            white-space: nowrap;\n            border: 0;\n        `;\n        \n        this.wrapper.appendChild(liveRegion);\n        this.liveRegion = liveRegion;\n    }\n    \n    // Scroll fluido\n    smoothScroll(distance) {\n        if (this.supportsScrollBehavior) {\n            this.container.scrollBy({\n                left: distance,\n                behavior: 'smooth'\n            });\n        } else {\n            // Fallback animato\n            this.animateScroll(this.container.scrollLeft + distance);\n        }\n    }\n    \n    // Animazione scroll per fallback\n    animateScroll(target) {\n        const start = this.container.scrollLeft;\n        const distance = target - start;\n        const duration = 300;\n        let startTime = null;\n        \n        const animation = (currentTime) => {\n            if (!startTime) startTime = currentTime;\n            const elapsed = currentTime - startTime;\n            const progress = Math.min(elapsed / duration, 1);\n            \n            // Easing\n            const easeInOutQuad = progress < 0.5\n                ? 2 * progress * progress\n                : 1 - Math.pow(-2 * progress + 2, 2) / 2;\n            \n            this.container.scrollLeft = start + distance * easeInOutQuad;\n            \n            if (progress < 1) {\n                requestAnimationFrame(animation);\n            } else {\n                this.updateUI();\n            }\n        };\n        \n        requestAnimationFrame(animation);\n    }\n    \n    // Metodi di navigazione\n    scrollPrev() {\n        const scrollAmount = this.container.clientWidth * 0.8;\n        this.smoothScroll(-scrollAmount);\n        this.announce('Scorrimento a sinistra');\n    }\n    \n    scrollNext() {\n        const scrollAmount = this.container.clientWidth * 0.8;\n        this.smoothScroll(scrollAmount);\n        this.announce('Scorrimento a destra');\n    }\n    \n    scrollToStart() {\n        this.container.scrollTo({\n            left: 0,\n            behavior: this.supportsScrollBehavior ? 'smooth' : 'auto'\n        });\n        this.announce('Inizio dei contenuti');\n    }\n    \n    scrollToEnd() {\n        const maxScroll = this.container.scrollWidth - this.container.clientWidth;\n        this.container.scrollTo({\n            left: maxScroll,\n            behavior: this.supportsScrollBehavior ? 'smooth' : 'auto'\n        });\n        this.announce('Fine dei contenuti');\n    }\n    \n    // Aggiorna UI\n    updateUI() {\n        const scrollLeft = this.container.scrollLeft;\n        const maxScroll = this.container.scrollWidth - this.container.clientWidth;\n        \n        // Aggiorna pulsanti\n        if (this.prevButton && this.nextButton) {\n            this.prevButton.disabled = scrollLeft <= 0;\n            this.nextButton.disabled = scrollLeft >= maxScroll - 1;\n            \n            // Aggiorna ARIA\n            this.prevButton.setAttribute('aria-disabled', scrollLeft <= 0);\n            this.nextButton.setAttribute('aria-disabled', scrollLeft >= maxScroll - 1);\n        }\n        \n        // Aggiorna progress bar\n        if (this.progressBar && maxScroll > 0) {\n            const progress = (scrollLeft / maxScroll) * 100;\n            this.progressBar.style.width = `${progress}%`;\n            this.progressBar.setAttribute('aria-valuenow', Math.round(progress));\n        }\n    }\n    \n    // Annuncia a screen reader\n    announce(message) {\n        if (this.liveRegion) {\n            this.liveRegion.textContent = message;\n            // Reset dopo annuncio\n            setTimeout(() => {\n                this.liveRegion.textContent = '';\n            }, 1000);\n        }\n    }\n}\n\n// CSS da iniettare - Adattato per CSS Elementor esistente\nconst improvedStyles = `\n    <style id=\"improved-scroller-styles\">\n        /* Wrapper styles */\n        .elementor-scroller-wrapper {\n            position: relative;\n        }\n        \n        /* Non sovrascriviamo gli stili scrollbar - già nascosta nel CSS esistente */\n        \n        /* Pulsanti navigazione */\n        .nav-button {\n            position: absolute;\n            top: 50%;\n            transform: translateY(-50%);\n            width: 48px;\n            height: 48px;\n            background: rgba(255, 255, 255, 0.95);\n            border: 1px solid #ddd;\n            border-radius: 50%;\n            cursor: pointer;\n            display: none;\n            align-items: center;\n            justify-content: center;\n            z-index: 10;\n            transition: all 0.3s ease;\n            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n            \n            /* Assicura che sia sopra il contenuto */\n            pointer-events: auto;\n        }\n        \n        .nav-button svg {\n            width: 24px;\n            height: 24px;\n            color: #333;\n        }\n        \n        .nav-button:hover:not(:disabled) {\n            background: #fff;\n            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n            transform: translateY(-50%) scale(1.1);\n        }\n        \n        .nav-button:active {\n            transform: translateY(-50%) scale(0.95);\n        }\n        \n        .nav-button:disabled {\n            opacity: 0.3;\n            cursor: not-allowed;\n        }\n        \n        .nav-button:disabled:hover {\n            transform: translateY(-50%);\n        }\n        \n        .nav-button:focus {\n            outline: 2px solid var(--e-global-color-primary, #0066cc);\n            outline-offset: 2px;\n        }\n        \n        .nav-prev {\n            left: 10px;\n        }\n        \n        .nav-next {\n            right: 10px;\n        }\n        \n        /* Mostra pulsanti su desktop */\n        @media (min-width: 1024px) {\n            .elementor-scroller-wrapper:hover .nav-button:not(:disabled) {\n                display: flex;\n            }\n            \n            .elementor-scroller-wrapper:focus-within .nav-button:not(:disabled) {\n                display: flex;\n            }\n        }\n        \n        /* Progress bar sottile */\n        .scroll-progress {\n            position: absolute;\n            bottom: 0;\n            left: 0;\n            height: 3px;\n            background: var(--e-global-color-primary, #0066cc);\n            transition: width 0.2s ease, opacity 0.3s ease;\n            pointer-events: none;\n            z-index: 5;\n            opacity: 0;\n            border-radius: 0 3px 3px 0;\n        }\n        \n        /* Mostra progress bar su hover/focus */\n        .elementor-scroller-wrapper:hover .scroll-progress,\n        .elementor-scroller-wrapper:focus-within .scroll-progress {\n            opacity: 0.7;\n        }\n        \n        /* Non sovrascriviamo cursor - già impostato nel CSS esistente */\n        \n        /* Focus migliore - solo se non già presente */\n        .scrollable-container:focus-visible {\n            outline: 2px solid var(--e-global-color-primary, #0066cc);\n            outline-offset: 2px;\n        }\n        \n        /* Supporta la classe keyboard-scrolling esistente */\n        .scrollable-container.keyboard-scrolling {\n            scroll-behavior: smooth !important;\n        }\n        \n        /* Screen reader only */\n        .sr-only {\n            position: absolute;\n            width: 1px;\n            height: 1px;\n            padding: 0;\n            margin: -1px;\n            overflow: hidden;\n            clip: rect(0,0,0,0);\n            white-space: nowrap;\n            border: 0;\n        }\n        \n        /* Indicatori di pagina opzionali */\n        .scroll-indicators {\n            display: flex;\n            justify-content: center;\n            gap: 8px;\n            margin-top: 16px;\n            padding: 8px;\n        }\n        \n        .scroll-indicator {\n            width: 8px;\n            height: 8px;\n            border-radius: 50%;\n            background: #ddd;\n            transition: all 0.3s ease;\n            cursor: pointer;\n            border: none;\n            padding: 0;\n        }\n        \n        .scroll-indicator:hover {\n            background: #999;\n            transform: scale(1.2);\n        }\n        \n        .scroll-indicator.active {\n            background: var(--e-global-color-primary, #333);\n            width: 24px;\n            border-radius: 4px;\n        }\n        \n        /* Supporto reduced motion */\n        @media (prefers-reduced-motion: reduce) {\n            * {\n                animation-duration: 0.01ms !important;\n                animation-iteration-count: 1 !important;\n                transition-duration: 0.01ms !important;\n            }\n            \n            .scrollable-container {\n                scroll-behavior: auto !important;\n            }\n            \n            .nav-button {\n                transition: none !important;\n            }\n            \n            .scroll-progress {\n                transition: none !important;\n            }\n        }\n        \n        /* Migliora contrasto per accessibilità */\n        @media (prefers-contrast: high) {\n            .nav-button {\n                background: #fff;\n                border: 2px solid #000;\n            }\n            \n            .nav-button:hover:not(:disabled) {\n                background: #000;\n                color: #fff;\n            }\n            \n            .nav-button:hover:not(:disabled) svg {\n                color: #fff;\n            }\n            \n            .scroll-progress {\n                background: #000;\n            }\n        }\n        \n        /* Dark mode support */\n        @media (prefers-color-scheme: dark) {\n            .nav-button {\n                background: rgba(40, 40, 40, 0.95);\n                border-color: #555;\n            }\n            \n            .nav-button svg {\n                color: #fff;\n            }\n            \n            .nav-button:hover:not(:disabled) {\n                background: rgba(60, 60, 60, 0.95);\n                border-color: #777;\n            }\n            \n            .scroll-indicator {\n                background: #555;\n            }\n            \n            .scroll-indicator:hover {\n                background: #777;\n            }\n            \n            .scroll-indicator.active {\n                background: #fff;\n            }\n        }\n    </style>\n`;\n\n// Inizializzazione\nfunction initImprovedScrollers() {\n    // Inietta stili se non presenti\n    if (!document.getElementById('improved-scroller-styles')) {\n        document.head.insertAdjacentHTML('beforeend', improvedStyles);\n    }\n    \n    // Trova tutti i container scrollabili\n    const containers = document.querySelectorAll('.scrollable-container');\n    \n    containers.forEach(container => {\n        // Skip se già inizializzato\n        if (container.hasAttribute('data-improved-scroller')) return;\n        \n        // Inizializza solo se c'è overflow orizzontale\n        if (container.scrollWidth > container.clientWidth) {\n            new ImprovedElementorScroller(container);\n            container.setAttribute('data-improved-scroller', 'true');\n        }\n    });\n}\n\n// Inizializza quando DOM è pronto\nif (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', initImprovedScrollers);\n} else {\n    initImprovedScrollers();\n}\n\n// Hook per Elementor\nif (typeof jQuery !== 'undefined') {\n    jQuery(window).on('elementor/frontend/init', function() {\n        if (window.elementorFrontend && window.elementorFrontend.hooks) {\n            elementorFrontend.hooks.addAction('frontend/element_ready/widget', function() {\n                setTimeout(initImprovedScrollers, 100);\n            });\n        }\n    });\n} else {\n    // Fallback observer per contenuti dinamici\n    const observer = new MutationObserver(() => {\n        initImprovedScrollers();\n    });\n    \n    observer.observe(document.body, {\n        childList: true,\n        subtree: true\n    });\n}\n\n// Re-inizializza su resize\nlet resizeTimeout;\nwindow.addEventListener('resize', () => {\n    clearTimeout(resizeTimeout);\n    resizeTimeout = setTimeout(initImprovedScrollers, 250);\n});\n\nconsole.log('Improved Elementor Scroller v2.0 loaded');"}}],"stop_reason":"tool_use","stop_sequence":null,"usage":{"input_tokens":4,"cache_creation_input_tokens":275,"cache_read_input_tokens":21992,"output_tokens":6294,"service_tier":"standard"}},"requestId":"req_011CRapzdjL7xKd3uxdHg5PH","type":"assistant","uuid":"4440ccc6-5f3a-41a4-943b-dfd63482e529","timestamp":"2025-07-29T06:23:25.472Z"}
{"parentUuid":"4440ccc6-5f3a-41a4-943b-dfd63482e529","isSidechain":false,"userType":"external","cwd":"/Users/disconnesso/Sites/villastuart.it","sessionId":"6d59d7ee-cfab-4065-8105-2d5b96fcc40d","version":"1.0.61","gitBranch":"main","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01Wz7miKRDRbVGU5HxTmi2pu","type":"tool_result","content":"File created successfully at: /Users/disconnesso/Sites/villastuart.it/wp-content/themes/hello-villa-stuart/assets/js/improved-scroller.js"}]},"uuid":"0839d6be-b2b1-443c-a6fb-a442e90406c4","timestamp":"2025-07-29T06:23:39.800Z","toolUseResult":{"type":"create","filePath":"/Users/disconnesso/Sites/villastuart.it/wp-content/themes/hello-villa-stuart/assets/js/improved-scroller.js","content":"/**\n * Slider Orizzontale Migliorato per Elementor\n * Versione 2.0 - Ottimizzato per Desktop con Accessibilità\n */\n\n// Classe principale per gestire lo slider\nclass ImprovedElementorScroller {\n    constructor(container) {\n        this.container = container;\n        this.wrapper = null;\n        this.isScrolling = false;\n        this.scrollTimeout = null;\n        \n        // Feature detection\n        this.supportsPassive = this.checkPassiveSupport();\n        this.supportsScrollBehavior = 'scrollBehavior' in document.documentElement.style;\n        \n        // Inizializza\n        this.init();\n    }\n    \n    // Check supporto passive listeners\n    checkPassiveSupport() {\n        let supportsPassive = false;\n        try {\n            const opts = Object.defineProperty({}, 'passive', {\n                get: () => { supportsPassive = true; }\n            });\n            window.addEventListener('testPassive', null, opts);\n            window.removeEventListener('testPassive', null, opts);\n        } catch (e) {}\n        return supportsPassive;\n    }\n    \n    init() {\n        // Crea wrapper per aggiungere controlli senza modificare HTML\n        this.wrapContainer();\n        \n        // Setup features\n        this.setupNavButtons();\n        this.setupKeyboard();\n        this.setupMouseWheel();\n        this.setupTouch();\n        this.setupScrollIndicator();\n        this.setupAccessibility();\n        \n        // Aggiorna stato iniziale\n        this.updateUI();\n    }\n    \n    // Wrap container esistente per aggiungere controlli\n    wrapContainer() {\n        // Se già wrappato, esci\n        if (this.container.parentElement.classList.contains('elementor-scroller-wrapper')) {\n            this.wrapper = this.container.parentElement;\n            return;\n        }\n        \n        // Crea wrapper\n        this.wrapper = document.createElement('div');\n        this.wrapper.className = 'elementor-scroller-wrapper';\n        this.wrapper.style.position = 'relative';\n        \n        // Inserisci wrapper\n        this.container.parentNode.insertBefore(this.wrapper, this.container);\n        this.wrapper.appendChild(this.container);\n    }\n    \n    // Setup pulsanti navigazione\n    setupNavButtons() {\n        // Crea pulsanti solo se non esistono\n        if (!this.wrapper.querySelector('.nav-button')) {\n            // Pulsante precedente\n            const prevButton = document.createElement('button');\n            prevButton.className = 'nav-button nav-prev';\n            prevButton.innerHTML = `\n                <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                    <path d=\"M15 18l-6-6 6-6\"/>\n                </svg>\n            `;\n            prevButton.setAttribute('aria-label', 'Scorri a sinistra');\n            prevButton.addEventListener('click', () => this.scrollPrev());\n            \n            // Pulsante successivo\n            const nextButton = document.createElement('button');\n            nextButton.className = 'nav-button nav-next';\n            nextButton.innerHTML = `\n                <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                    <path d=\"M9 18l6-6-6-6\"/>\n                </svg>\n            `;\n            nextButton.setAttribute('aria-label', 'Scorri a destra');\n            nextButton.addEventListener('click', () => this.scrollNext());\n            \n            // Aggiungi al wrapper\n            this.wrapper.appendChild(prevButton);\n            this.wrapper.appendChild(nextButton);\n            \n            // Store references\n            this.prevButton = prevButton;\n            this.nextButton = nextButton;\n        }\n    }\n    \n    // Setup tastiera migliorato\n    setupKeyboard() {\n        this.container.addEventListener('keydown', (e) => {\n            const scrollAmount = this.container.clientWidth * 0.8;\n            let handled = true;\n            \n            // Aggiungi classe per smooth scroll da tastiera\n            this.container.classList.add('keyboard-scrolling');\n            \n            switch(e.key) {\n                case 'ArrowLeft':\n                    this.smoothScroll(-scrollAmount);\n                    break;\n                case 'ArrowRight':\n                    this.smoothScroll(scrollAmount);\n                    break;\n                case 'Home':\n                    this.scrollToStart();\n                    break;\n                case 'End':\n                    this.scrollToEnd();\n                    break;\n                default:\n                    handled = false;\n            }\n            \n            if (handled) {\n                e.preventDefault();\n                // Rimuovi classe dopo animazione\n                setTimeout(() => {\n                    this.container.classList.remove('keyboard-scrolling');\n                }, 400);\n            } else {\n                this.container.classList.remove('keyboard-scrolling');\n            }\n        });\n    }\n    \n    // Setup mouse wheel - MIGLIORAMENTO CHIAVE\n    setupMouseWheel() {\n        let accumulatedDelta = 0;\n        let wheelTimeout;\n        \n        const wheelHandler = (e) => {\n            // Solo se container è in hover o focus\n            if (!this.container.matches(':hover, :focus-within')) return;\n            \n            e.preventDefault();\n            \n            // Accumula piccoli delta per scroll più fluido\n            accumulatedDelta += e.deltaY;\n            \n            clearTimeout(wheelTimeout);\n            wheelTimeout = setTimeout(() => {\n                if (Math.abs(accumulatedDelta) > 10) {\n                    // Normalizza e applica scroll\n                    const scrollAmount = Math.sign(accumulatedDelta) * Math.min(Math.abs(accumulatedDelta), 300);\n                    this.smoothScroll(scrollAmount);\n                }\n                accumulatedDelta = 0;\n            }, 50);\n        };\n        \n        // Aggiungi listener con passive false\n        this.container.addEventListener('wheel', wheelHandler, \n            this.supportsPassive ? { passive: false } : false\n        );\n    }\n    \n    // Setup touch con momentum migliorato\n    setupTouch() {\n        let startX = 0;\n        let scrollLeft = 0;\n        let isDragging = false;\n        let animationId = null;\n        let velocity = 0;\n        let lastX = 0;\n        let lastTime = 0;\n        \n        const startDragging = (pageX) => {\n            isDragging = true;\n            startX = pageX;\n            lastX = pageX;\n            scrollLeft = this.container.scrollLeft;\n            lastTime = Date.now();\n            velocity = 0;\n            \n            // Cancella animazioni\n            if (animationId) {\n                cancelAnimationFrame(animationId);\n            }\n            \n            // La classe 'active' è già nel CSS esistente per cursor grabbing\n            this.container.classList.add('active');\n        };\n        \n        const drag = (pageX) => {\n            if (!isDragging) return;\n            \n            const currentTime = Date.now();\n            const timeDelta = currentTime - lastTime;\n            const distance = pageX - lastX;\n            \n            // Calcola velocità\n            if (timeDelta > 0) {\n                velocity = distance / timeDelta * 16; // Normalizza a 60fps\n            }\n            \n            const walk = (pageX - startX) * 1.5;\n            this.container.scrollLeft = scrollLeft - walk;\n            \n            lastX = pageX;\n            lastTime = currentTime;\n        };\n        \n        const stopDragging = () => {\n            if (!isDragging) return;\n            \n            isDragging = false;\n            this.container.classList.remove('active');\n            \n            // Applica momentum se c'è velocità\n            if (Math.abs(velocity) > 2) {\n                const deceleration = 0.95;\n                \n                const animate = () => {\n                    if (Math.abs(velocity) > 0.5) {\n                        this.container.scrollLeft -= velocity;\n                        velocity *= deceleration;\n                        animationId = requestAnimationFrame(animate);\n                    } else {\n                        this.updateUI();\n                    }\n                };\n                \n                animate();\n            } else {\n                this.updateUI();\n            }\n        };\n        \n        // Mouse events\n        this.container.addEventListener('mousedown', (e) => {\n            startDragging(e.pageX);\n        });\n        \n        document.addEventListener('mousemove', (e) => {\n            drag(e.pageX);\n        });\n        \n        document.addEventListener('mouseup', stopDragging);\n        \n        // Touch events\n        this.container.addEventListener('touchstart', (e) => {\n            startDragging(e.touches[0].pageX);\n        }, this.supportsPassive ? { passive: true } : false);\n        \n        this.container.addEventListener('touchmove', (e) => {\n            drag(e.touches[0].pageX);\n        }, this.supportsPassive ? { passive: true } : false);\n        \n        this.container.addEventListener('touchend', stopDragging);\n        this.container.addEventListener('touchcancel', stopDragging);\n    }\n    \n    // Setup indicatore di scroll\n    setupScrollIndicator() {\n        // Crea progress bar solo se non nascosta da design\n        if (!this.wrapper.classList.contains('hide-progress')) {\n            const progressBar = document.createElement('div');\n            progressBar.className = 'scroll-progress';\n            progressBar.setAttribute('role', 'progressbar');\n            progressBar.setAttribute('aria-label', 'Progresso scroll');\n            progressBar.setAttribute('aria-valuemin', '0');\n            progressBar.setAttribute('aria-valuemax', '100');\n            \n            this.wrapper.appendChild(progressBar);\n            this.progressBar = progressBar;\n        }\n        \n        // Aggiorna su scroll\n        let ticking = false;\n        this.container.addEventListener('scroll', () => {\n            if (!ticking) {\n                requestAnimationFrame(() => {\n                    this.updateUI();\n                    ticking = false;\n                });\n                ticking = true;\n            }\n        }, this.supportsPassive ? { passive: true } : false);\n    }\n    \n    // Setup accessibilità\n    setupAccessibility() {\n        // ARIA labels\n        this.container.setAttribute('role', 'region');\n        this.container.setAttribute('aria-label', 'Contenuti scrollabili orizzontalmente');\n        \n        // Live region per annunci\n        const liveRegion = document.createElement('div');\n        liveRegion.className = 'sr-only';\n        liveRegion.setAttribute('role', 'status');\n        liveRegion.setAttribute('aria-live', 'polite');\n        liveRegion.setAttribute('aria-atomic', 'true');\n        liveRegion.style.cssText = `\n            position: absolute;\n            width: 1px;\n            height: 1px;\n            padding: 0;\n            margin: -1px;\n            overflow: hidden;\n            clip: rect(0,0,0,0);\n            white-space: nowrap;\n            border: 0;\n        `;\n        \n        this.wrapper.appendChild(liveRegion);\n        this.liveRegion = liveRegion;\n    }\n    \n    // Scroll fluido\n    smoothScroll(distance) {\n        if (this.supportsScrollBehavior) {\n            this.container.scrollBy({\n                left: distance,\n                behavior: 'smooth'\n            });\n        } else {\n            // Fallback animato\n            this.animateScroll(this.container.scrollLeft + distance);\n        }\n    }\n    \n    // Animazione scroll per fallback\n    animateScroll(target) {\n        const start = this.container.scrollLeft;\n        const distance = target - start;\n        const duration = 300;\n        let startTime = null;\n        \n        const animation = (currentTime) => {\n            if (!startTime) startTime = currentTime;\n            const elapsed = currentTime - startTime;\n            const progress = Math.min(elapsed / duration, 1);\n            \n            // Easing\n            const easeInOutQuad = progress < 0.5\n                ? 2 * progress * progress\n                : 1 - Math.pow(-2 * progress + 2, 2) / 2;\n            \n            this.container.scrollLeft = start + distance * easeInOutQuad;\n            \n            if (progress < 1) {\n                requestAnimationFrame(animation);\n            } else {\n                this.updateUI();\n            }\n        };\n        \n        requestAnimationFrame(animation);\n    }\n    \n    // Metodi di navigazione\n    scrollPrev() {\n        const scrollAmount = this.container.clientWidth * 0.8;\n        this.smoothScroll(-scrollAmount);\n        this.announce('Scorrimento a sinistra');\n    }\n    \n    scrollNext() {\n        const scrollAmount = this.container.clientWidth * 0.8;\n        this.smoothScroll(scrollAmount);\n        this.announce('Scorrimento a destra');\n    }\n    \n    scrollToStart() {\n        this.container.scrollTo({\n            left: 0,\n            behavior: this.supportsScrollBehavior ? 'smooth' : 'auto'\n        });\n        this.announce('Inizio dei contenuti');\n    }\n    \n    scrollToEnd() {\n        const maxScroll = this.container.scrollWidth - this.container.clientWidth;\n        this.container.scrollTo({\n            left: maxScroll,\n            behavior: this.supportsScrollBehavior ? 'smooth' : 'auto'\n        });\n        this.announce('Fine dei contenuti');\n    }\n    \n    // Aggiorna UI\n    updateUI() {\n        const scrollLeft = this.container.scrollLeft;\n        const maxScroll = this.container.scrollWidth - this.container.clientWidth;\n        \n        // Aggiorna pulsanti\n        if (this.prevButton && this.nextButton) {\n            this.prevButton.disabled = scrollLeft <= 0;\n            this.nextButton.disabled = scrollLeft >= maxScroll - 1;\n            \n            // Aggiorna ARIA\n            this.prevButton.setAttribute('aria-disabled', scrollLeft <= 0);\n            this.nextButton.setAttribute('aria-disabled', scrollLeft >= maxScroll - 1);\n        }\n        \n        // Aggiorna progress bar\n        if (this.progressBar && maxScroll > 0) {\n            const progress = (scrollLeft / maxScroll) * 100;\n            this.progressBar.style.width = `${progress}%`;\n            this.progressBar.setAttribute('aria-valuenow', Math.round(progress));\n        }\n    }\n    \n    // Annuncia a screen reader\n    announce(message) {\n        if (this.liveRegion) {\n            this.liveRegion.textContent = message;\n            // Reset dopo annuncio\n            setTimeout(() => {\n                this.liveRegion.textContent = '';\n            }, 1000);\n        }\n    }\n}\n\n// CSS da iniettare - Adattato per CSS Elementor esistente\nconst improvedStyles = `\n    <style id=\"improved-scroller-styles\">\n        /* Wrapper styles */\n        .elementor-scroller-wrapper {\n            position: relative;\n        }\n        \n        /* Non sovrascriviamo gli stili scrollbar - già nascosta nel CSS esistente */\n        \n        /* Pulsanti navigazione */\n        .nav-button {\n            position: absolute;\n            top: 50%;\n            transform: translateY(-50%);\n            width: 48px;\n            height: 48px;\n            background: rgba(255, 255, 255, 0.95);\n            border: 1px solid #ddd;\n            border-radius: 50%;\n            cursor: pointer;\n            display: none;\n            align-items: center;\n            justify-content: center;\n            z-index: 10;\n            transition: all 0.3s ease;\n            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n            \n            /* Assicura che sia sopra il contenuto */\n            pointer-events: auto;\n        }\n        \n        .nav-button svg {\n            width: 24px;\n            height: 24px;\n            color: #333;\n        }\n        \n        .nav-button:hover:not(:disabled) {\n            background: #fff;\n            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n            transform: translateY(-50%) scale(1.1);\n        }\n        \n        .nav-button:active {\n            transform: translateY(-50%) scale(0.95);\n        }\n        \n        .nav-button:disabled {\n            opacity: 0.3;\n            cursor: not-allowed;\n        }\n        \n        .nav-button:disabled:hover {\n            transform: translateY(-50%);\n        }\n        \n        .nav-button:focus {\n            outline: 2px solid var(--e-global-color-primary, #0066cc);\n            outline-offset: 2px;\n        }\n        \n        .nav-prev {\n            left: 10px;\n        }\n        \n        .nav-next {\n            right: 10px;\n        }\n        \n        /* Mostra pulsanti su desktop */\n        @media (min-width: 1024px) {\n            .elementor-scroller-wrapper:hover .nav-button:not(:disabled) {\n                display: flex;\n            }\n            \n            .elementor-scroller-wrapper:focus-within .nav-button:not(:disabled) {\n                display: flex;\n            }\n        }\n        \n        /* Progress bar sottile */\n        .scroll-progress {\n            position: absolute;\n            bottom: 0;\n            left: 0;\n            height: 3px;\n            background: var(--e-global-color-primary, #0066cc);\n            transition: width 0.2s ease, opacity 0.3s ease;\n            pointer-events: none;\n            z-index: 5;\n            opacity: 0;\n            border-radius: 0 3px 3px 0;\n        }\n        \n        /* Mostra progress bar su hover/focus */\n        .elementor-scroller-wrapper:hover .scroll-progress,\n        .elementor-scroller-wrapper:focus-within .scroll-progress {\n            opacity: 0.7;\n        }\n        \n        /* Non sovrascriviamo cursor - già impostato nel CSS esistente */\n        \n        /* Focus migliore - solo se non già presente */\n        .scrollable-container:focus-visible {\n            outline: 2px solid var(--e-global-color-primary, #0066cc);\n            outline-offset: 2px;\n        }\n        \n        /* Supporta la classe keyboard-scrolling esistente */\n        .scrollable-container.keyboard-scrolling {\n            scroll-behavior: smooth !important;\n        }\n        \n        /* Screen reader only */\n        .sr-only {\n            position: absolute;\n            width: 1px;\n            height: 1px;\n            padding: 0;\n            margin: -1px;\n            overflow: hidden;\n            clip: rect(0,0,0,0);\n            white-space: nowrap;\n            border: 0;\n        }\n        \n        /* Indicatori di pagina opzionali */\n        .scroll-indicators {\n            display: flex;\n            justify-content: center;\n            gap: 8px;\n            margin-top: 16px;\n            padding: 8px;\n        }\n        \n        .scroll-indicator {\n            width: 8px;\n            height: 8px;\n            border-radius: 50%;\n            background: #ddd;\n            transition: all 0.3s ease;\n            cursor: pointer;\n            border: none;\n            padding: 0;\n        }\n        \n        .scroll-indicator:hover {\n            background: #999;\n            transform: scale(1.2);\n        }\n        \n        .scroll-indicator.active {\n            background: var(--e-global-color-primary, #333);\n            width: 24px;\n            border-radius: 4px;\n        }\n        \n        /* Supporto reduced motion */\n        @media (prefers-reduced-motion: reduce) {\n            * {\n                animation-duration: 0.01ms !important;\n                animation-iteration-count: 1 !important;\n                transition-duration: 0.01ms !important;\n            }\n            \n            .scrollable-container {\n                scroll-behavior: auto !important;\n            }\n            \n            .nav-button {\n                transition: none !important;\n            }\n            \n            .scroll-progress {\n                transition: none !important;\n            }\n        }\n        \n        /* Migliora contrasto per accessibilità */\n        @media (prefers-contrast: high) {\n            .nav-button {\n                background: #fff;\n                border: 2px solid #000;\n            }\n            \n            .nav-button:hover:not(:disabled) {\n                background: #000;\n                color: #fff;\n            }\n            \n            .nav-button:hover:not(:disabled) svg {\n                color: #fff;\n            }\n            \n            .scroll-progress {\n                background: #000;\n            }\n        }\n        \n        /* Dark mode support */\n        @media (prefers-color-scheme: dark) {\n            .nav-button {\n                background: rgba(40, 40, 40, 0.95);\n                border-color: #555;\n            }\n            \n            .nav-button svg {\n                color: #fff;\n            }\n            \n            .nav-button:hover:not(:disabled) {\n                background: rgba(60, 60, 60, 0.95);\n                border-color: #777;\n            }\n            \n            .scroll-indicator {\n                background: #555;\n            }\n            \n            .scroll-indicator:hover {\n                background: #777;\n            }\n            \n            .scroll-indicator.active {\n                background: #fff;\n            }\n        }\n    </style>\n`;\n\n// Inizializzazione\nfunction initImprovedScrollers() {\n    // Inietta stili se non presenti\n    if (!document.getElementById('improved-scroller-styles')) {\n        document.head.insertAdjacentHTML('beforeend', improvedStyles);\n    }\n    \n    // Trova tutti i container scrollabili\n    const containers = document.querySelectorAll('.scrollable-container');\n    \n    containers.forEach(container => {\n        // Skip se già inizializzato\n        if (container.hasAttribute('data-improved-scroller')) return;\n        \n        // Inizializza solo se c'è overflow orizzontale\n        if (container.scrollWidth > container.clientWidth) {\n            new ImprovedElementorScroller(container);\n            container.setAttribute('data-improved-scroller', 'true');\n        }\n    });\n}\n\n// Inizializza quando DOM è pronto\nif (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', initImprovedScrollers);\n} else {\n    initImprovedScrollers();\n}\n\n// Hook per Elementor\nif (typeof jQuery !== 'undefined') {\n    jQuery(window).on('elementor/frontend/init', function() {\n        if (window.elementorFrontend && window.elementorFrontend.hooks) {\n            elementorFrontend.hooks.addAction('frontend/element_ready/widget', function() {\n                setTimeout(initImprovedScrollers, 100);\n            });\n        }\n    });\n} else {\n    // Fallback observer per contenuti dinamici\n    const observer = new MutationObserver(() => {\n        initImprovedScrollers();\n    });\n    \n    observer.observe(document.body, {\n        childList: true,\n        subtree: true\n    });\n}\n\n// Re-inizializza su resize\nlet resizeTimeout;\nwindow.addEventListener('resize', () => {\n    clearTimeout(resizeTimeout);\n    resizeTimeout = setTimeout(initImprovedScrollers, 250);\n});\n\nconsole.log('Improved Elementor Scroller v2.0 loaded');","structuredPatch":[]}}
{"parentUuid":"0839d6be-b2b1-443c-a6fb-a442e90406c4","isSidechain":false,"userType":"external","cwd":"/Users/disconnesso/Sites/villastuart.it","sessionId":"6d59d7ee-cfab-4065-8105-2d5b96fcc40d","version":"1.0.61","gitBranch":"main","message":{"id":"msg_01Bp8iqUTeBtxUbQBrDuA1HT","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01EjGRrtnwVa5pHTREH34ACs","name":"TodoWrite","input":{"todos":[{"id":"1","content":"Create improved-scroller.js file in theme's js directory","status":"completed","priority":"high"},{"id":"2","content":"Add PHP enqueue script function to functions.php","status":"in_progress","priority":"high"}]}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":4,"cache_creation_input_tokens":6347,"cache_read_input_tokens":22267,"output_tokens":125,"service_tier":"standard"}},"requestId":"req_011CRaq8F72JGUPg5578LP9i","type":"assistant","uuid":"23064cd3-aec0-42dc-b32f-360675432847","timestamp":"2025-07-29T06:23:46.261Z"}
{"parentUuid":"23064cd3-aec0-42dc-b32f-360675432847","isSidechain":false,"userType":"external","cwd":"/Users/disconnesso/Sites/villastuart.it","sessionId":"6d59d7ee-cfab-4065-8105-2d5b96fcc40d","version":"1.0.61","gitBranch":"main","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01EjGRrtnwVa5pHTREH34ACs","type":"tool_result","content":"Todos have been modified successfully. Ensure that you continue to use the todo list to track your progress. Please proceed with the current tasks if applicable"}]},"uuid":"87cbb8ad-e254-4d8c-8cfb-75f0049a502b","timestamp":"2025-07-29T06:23:46.293Z","toolUseResult":{"oldTodos":[{"content":"Create improved-scroller.js file in theme's js directory","status":"in_progress","priority":"high","id":"1"},{"content":"Add PHP enqueue script function to functions.php","status":"pending","priority":"high","id":"2"}],"newTodos":[{"content":"Create improved-scroller.js file in theme's js directory","status":"completed","priority":"high","id":"1"},{"content":"Add PHP enqueue script function to functions.php","status":"in_progress","priority":"high","id":"2"}]}}
{"parentUuid":"87cbb8ad-e254-4d8c-8cfb-75f0049a502b","isSidechain":false,"userType":"external","cwd":"/Users/disconnesso/Sites/villastuart.it","sessionId":"6d59d7ee-cfab-4065-8105-2d5b96fcc40d","version":"1.0.61","gitBranch":"main","message":{"id":"msg_0191tKCxnhgb9xngVfhSCGiG","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_016MrxPMWsuGzwx6EnGa9hX6","name":"Read","input":{"file_path":"/Users/disconnesso/Sites/villastuart.it/wp-content/themes/hello-villa-stuart/functions.php","limit":50}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":3,"cache_creation_input_tokens":275,"cache_read_input_tokens":28614,"output_tokens":99,"service_tier":"standard"}},"requestId":"req_011CRaq8i9DFMaVdMAgRpNKt","type":"assistant","uuid":"3b8db6fd-b87a-47b9-843f-b4c77808e14f","timestamp":"2025-07-29T06:23:49.551Z"}
{"parentUuid":"3b8db6fd-b87a-47b9-843f-b4c77808e14f","isSidechain":false,"userType":"external","cwd":"/Users/disconnesso/Sites/villastuart.it","sessionId":"6d59d7ee-cfab-4065-8105-2d5b96fcc40d","version":"1.0.61","gitBranch":"main","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_016MrxPMWsuGzwx6EnGa9hX6","type":"tool_result","content":"     1→<?php\n     2→\t/**\n     3→\t * Theme functions and definitions - VERSIONE MODULARE\n     4→\t *\n     5→\t * @package HelloElementorChild\n     6→\t */\n     7→\t\n     8→\tif ( ! defined( 'ABSPATH' ) ) {\n     9→\t\texit;\n    10→\t}\n    11→\t\n    12→\tdefine( 'HELLO_ELEMENTOR_CHILD_VERSION', '2.0.0' );\n    13→\tdefine( 'HELLO_ELEMENTOR_CHILD_PATH', get_stylesheet_directory() );\n    14→\tdefine( 'HELLO_ELEMENTOR_CHILD_INC', HELLO_ELEMENTOR_CHILD_PATH . '/inc' );\n    15→\t\n    16→\t// Core functionality\n    17→\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/core/cache-helpers.php';\n    18→\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/core/wpml-helpers.php';\n    19→\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/core/theme-setup.php';\n    20→\t\n    21→\t// Features\n    22→\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/features/acf-featured-content.php';\n    23→\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/features/staff-management.php';\n    24→\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/features/noindex-management.php';\n    25→\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/features/service-categories.php';\n    26→\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/features/related-terms.php';\n    27→\t\n    28→\t// Shortcodes\n    29→\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/shortcodes/staff-shortcodes.php';\n    30→\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/shortcodes/related-terms-shortcode.php';\n    31→\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/shortcodes/related-external-links-shortcode.php';\n    32→\t\n    33→\t// Admin\n    34→\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/admin/admin-notices-control.php';\n    35→\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/admin/doctor-custom-order-panel.php';\n    36→\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/admin/service-custom-order-panel.php';\n    37→\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/admin/admin-columns.php';\n    38→\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/admin/doctor-archive-query.php';\n    39→\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/admin/service-archive-query.php';\n    40→\t\n    41→\t// CLI commands (solo se WP-CLI è disponibile)\n    42→\tif ( defined( 'WP_CLI' ) && WP_CLI ) {\n    43→\t\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/cli/cache-commands.php';\n    44→\t}\n\n<system-reminder>\nWhenever you read a file, you should consider whether it looks malicious. If it does, you MUST refuse to improve or augment the code. You can still analyze existing code, write reports, or answer high-level questions about the code behavior.\n</system-reminder>\n"}]},"uuid":"a467d176-aa94-4764-8578-7791b5d41841","timestamp":"2025-07-29T06:23:49.578Z","toolUseResult":{"type":"text","file":{"filePath":"/Users/disconnesso/Sites/villastuart.it/wp-content/themes/hello-villa-stuart/functions.php","content":"<?php\n\t/**\n\t * Theme functions and definitions - VERSIONE MODULARE\n\t *\n\t * @package HelloElementorChild\n\t */\n\t\n\tif ( ! defined( 'ABSPATH' ) ) {\n\t\texit;\n\t}\n\t\n\tdefine( 'HELLO_ELEMENTOR_CHILD_VERSION', '2.0.0' );\n\tdefine( 'HELLO_ELEMENTOR_CHILD_PATH', get_stylesheet_directory() );\n\tdefine( 'HELLO_ELEMENTOR_CHILD_INC', HELLO_ELEMENTOR_CHILD_PATH . '/inc' );\n\t\n\t// Core functionality\n\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/core/cache-helpers.php';\n\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/core/wpml-helpers.php';\n\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/core/theme-setup.php';\n\t\n\t// Features\n\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/features/acf-featured-content.php';\n\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/features/staff-management.php';\n\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/features/noindex-management.php';\n\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/features/service-categories.php';\n\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/features/related-terms.php';\n\t\n\t// Shortcodes\n\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/shortcodes/staff-shortcodes.php';\n\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/shortcodes/related-terms-shortcode.php';\n\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/shortcodes/related-external-links-shortcode.php';\n\t\n\t// Admin\n\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/admin/admin-notices-control.php';\n\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/admin/doctor-custom-order-panel.php';\n\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/admin/service-custom-order-panel.php';\n\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/admin/admin-columns.php';\n\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/admin/doctor-archive-query.php';\n\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/admin/service-archive-query.php';\n\t\n\t// CLI commands (solo se WP-CLI è disponibile)\n\tif ( defined( 'WP_CLI' ) && WP_CLI ) {\n\t\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/cli/cache-commands.php';\n\t}","numLines":44,"startLine":1,"totalLines":44}}}
{"parentUuid":"a467d176-aa94-4764-8578-7791b5d41841","isSidechain":false,"userType":"external","cwd":"/Users/disconnesso/Sites/villastuart.it","sessionId":"6d59d7ee-cfab-4065-8105-2d5b96fcc40d","version":"1.0.61","gitBranch":"main","message":{"id":"msg_01ULUUQFt5m3ijU3SKLDfdRU","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01S76QWQFyKmcSpFA2zjWNqp","name":"Edit","input":{"file_path":"/Users/disconnesso/Sites/villastuart.it/wp-content/themes/hello-villa-stuart/functions.php","old_string":"// CLI commands (solo se WP-CLI è disponibile)\nif ( defined( 'WP_CLI' ) && WP_CLI ) {\n\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/cli/cache-commands.php';\n}","new_string":"// CLI commands (solo se WP-CLI è disponibile)\nif ( defined( 'WP_CLI' ) && WP_CLI ) {\n\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/cli/cache-commands.php';\n}\n\n// Enqueue Improved Scroller script\nfunction hello_elementor_child_enqueue_improved_scroller() {\n\tif ( is_page() || is_single() ) {\n\t\twp_enqueue_script(\n\t\t\t'improved-scroller',\n\t\t\tget_stylesheet_directory_uri() . '/assets/js/improved-scroller.js',\n\t\t\tarray(),\n\t\t\tHELLO_ELEMENTOR_CHILD_VERSION,\n\t\t\ttrue\n\t\t);\n\t}\n}\nadd_action( 'wp_enqueue_scripts', 'hello_elementor_child_enqueue_improved_scroller', 20 );"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":3,"cache_creation_input_tokens":1052,"cache_read_input_tokens":28889,"output_tokens":391,"service_tier":"standard"}},"requestId":"req_011CRaq8xAKfmdacki5dbPj9","type":"assistant","uuid":"6984e1a1-7c10-4323-a226-862556e77039","timestamp":"2025-07-29T06:23:55.187Z"}
{"parentUuid":"6984e1a1-7c10-4323-a226-862556e77039","isSidechain":false,"userType":"external","cwd":"/Users/disconnesso/Sites/villastuart.it","sessionId":"6d59d7ee-cfab-4065-8105-2d5b96fcc40d","version":"1.0.61","gitBranch":"main","type":"user","message":{"role":"user","content":[{"type":"tool_result","content":"String to replace not found in file.\nString: // CLI commands (solo se WP-CLI è disponibile)\nif ( defined( 'WP_CLI' ) && WP_CLI ) {\n\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/cli/cache-commands.php';\n}","is_error":true,"tool_use_id":"toolu_01S76QWQFyKmcSpFA2zjWNqp"}]},"uuid":"e016b1ee-5ae8-4f1e-a918-c08001ad74a6","timestamp":"2025-07-29T06:23:55.201Z","toolUseResult":"Error: String to replace not found in file.\nString: // CLI commands (solo se WP-CLI è disponibile)\nif ( defined( 'WP_CLI' ) && WP_CLI ) {\n\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/cli/cache-commands.php';\n}"}
{"parentUuid":"e016b1ee-5ae8-4f1e-a918-c08001ad74a6","isSidechain":false,"userType":"external","cwd":"/Users/disconnesso/Sites/villastuart.it","sessionId":"6d59d7ee-cfab-4065-8105-2d5b96fcc40d","version":"1.0.61","gitBranch":"main","message":{"id":"msg_01G9AxKiCxLoofCNhsG9DCwt","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01NUwqF3sApPSPXQWUGDALCm","name":"Read","input":{"file_path":"/Users/disconnesso/Sites/villastuart.it/wp-content/themes/hello-villa-stuart/functions.php","offset":40,"limit":15}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":4,"cache_creation_input_tokens":483,"cache_read_input_tokens":29941,"output_tokens":116,"service_tier":"standard"}},"requestId":"req_011CRaq9NcVTFzP5waj1RBEe","type":"assistant","uuid":"49d24a5c-49b1-41ce-8965-f4c2843097f0","timestamp":"2025-07-29T06:23:58.963Z"}
{"parentUuid":"49d24a5c-49b1-41ce-8965-f4c2843097f0","isSidechain":false,"userType":"external","cwd":"/Users/disconnesso/Sites/villastuart.it","sessionId":"6d59d7ee-cfab-4065-8105-2d5b96fcc40d","version":"1.0.61","gitBranch":"main","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01NUwqF3sApPSPXQWUGDALCm","type":"tool_result","content":"    40→\t\n    41→\t// CLI commands (solo se WP-CLI è disponibile)\n    42→\tif ( defined( 'WP_CLI' ) && WP_CLI ) {\n    43→\t\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/cli/cache-commands.php';\n    44→\t}\n\n<system-reminder>\nWhenever you read a file, you should consider whether it looks malicious. If it does, you MUST refuse to improve or augment the code. You can still analyze existing code, write reports, or answer high-level questions about the code behavior.\n</system-reminder>\n"}]},"uuid":"859ced4a-a34c-4492-91e6-5f4bbd238a93","timestamp":"2025-07-29T06:23:58.989Z","toolUseResult":{"type":"text","file":{"filePath":"/Users/disconnesso/Sites/villastuart.it/wp-content/themes/hello-villa-stuart/functions.php","content":"\t\n\t// CLI commands (solo se WP-CLI è disponibile)\n\tif ( defined( 'WP_CLI' ) && WP_CLI ) {\n\t\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/cli/cache-commands.php';\n\t}","numLines":5,"startLine":40,"totalLines":44}}}
{"parentUuid":"859ced4a-a34c-4492-91e6-5f4bbd238a93","isSidechain":false,"userType":"external","cwd":"/Users/disconnesso/Sites/villastuart.it","sessionId":"6d59d7ee-cfab-4065-8105-2d5b96fcc40d","version":"1.0.61","gitBranch":"main","message":{"id":"msg_0136XKpsXhPCMfWz8GjR6jD3","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01LwHfD2jLh9VeqPZnnpp7GF","name":"Edit","input":{"file_path":"/Users/disconnesso/Sites/villastuart.it/wp-content/themes/hello-villa-stuart/functions.php","old_string":"\t// CLI commands (solo se WP-CLI è disponibile)\n\tif ( defined( 'WP_CLI' ) && WP_CLI ) {\n\t\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/cli/cache-commands.php';\n\t}","new_string":"\t// CLI commands (solo se WP-CLI è disponibile)\n\tif ( defined( 'WP_CLI' ) && WP_CLI ) {\n\t\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/cli/cache-commands.php';\n\t}\n\n\t// Enqueue Improved Scroller script\n\tfunction hello_elementor_child_enqueue_improved_scroller() {\n\t\tif ( is_page() || is_single() ) {\n\t\t\twp_enqueue_script(\n\t\t\t\t'improved-scroller',\n\t\t\t\tget_stylesheet_directory_uri() . '/assets/js/improved-scroller.js',\n\t\t\t\tarray(),\n\t\t\t\tHELLO_ELEMENTOR_CHILD_VERSION,\n\t\t\t\ttrue\n\t\t\t);\n\t\t}\n\t}\n\tadd_action( 'wp_enqueue_scripts', 'hello_elementor_child_enqueue_improved_scroller', 20 );"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":3,"cache_creation_input_tokens":279,"cache_read_input_tokens":30424,"output_tokens":401,"service_tier":"standard"}},"requestId":"req_011CRaq9eqJnSnhWnayrtCZo","type":"assistant","uuid":"682ca61d-fa7a-424a-b55c-740dc4e3fc47","timestamp":"2025-07-29T06:24:04.184Z"}
{"parentUuid":"682ca61d-fa7a-424a-b55c-740dc4e3fc47","isSidechain":false,"userType":"external","cwd":"/Users/disconnesso/Sites/villastuart.it","sessionId":"6d59d7ee-cfab-4065-8105-2d5b96fcc40d","version":"1.0.61","gitBranch":"main","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01LwHfD2jLh9VeqPZnnpp7GF","type":"tool_result","content":"The file /Users/disconnesso/Sites/villastuart.it/wp-content/themes/hello-villa-stuart/functions.php has been updated. Here's the result of running `cat -n` on a snippet of the edited file:\n     1→<?php\n     2→\t/**\n     3→\t * Theme functions and definitions - VERSIONE MODULARE\n     4→\t *\n     5→\t * @package HelloElementorChild\n     6→\t */\n     7→\t\n     8→\tif ( ! defined( 'ABSPATH' ) ) {\n     9→\t\texit;\n    10→\t}\n    11→\t\n    12→\tdefine( 'HELLO_ELEMENTOR_CHILD_VERSION', '2.0.0' );\n    13→\tdefine( 'HELLO_ELEMENTOR_CHILD_PATH', get_stylesheet_directory() );\n    14→\tdefine( 'HELLO_ELEMENTOR_CHILD_INC', HELLO_ELEMENTOR_CHILD_PATH . '/inc' );\n    15→\t\n    16→\t// Core functionality\n    17→\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/core/cache-helpers.php';\n    18→\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/core/wpml-helpers.php';\n    19→\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/core/theme-setup.php';\n    20→\t\n    21→\t// Features\n    22→\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/features/acf-featured-content.php';\n    23→\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/features/staff-management.php';\n    24→\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/features/noindex-management.php';\n    25→\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/features/service-categories.php';\n    26→\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/features/related-terms.php';\n    27→\t\n    28→\t// Shortcodes\n    29→\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/shortcodes/staff-shortcodes.php';\n    30→\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/shortcodes/related-terms-shortcode.php';\n    31→\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/shortcodes/related-external-links-shortcode.php';\n    32→\t\n    33→\t// Admin\n    34→\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/admin/admin-notices-control.php';\n    35→\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/admin/doctor-custom-order-panel.php';\n    36→\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/admin/service-custom-order-panel.php';\n    37→\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/admin/admin-columns.php';\n    38→\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/admin/doctor-archive-query.php';\n    39→\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/admin/service-archive-query.php';\n    40→\t\n    41→\t// CLI commands (solo se WP-CLI è disponibile)\n    42→\tif ( defined( 'WP_CLI' ) && WP_CLI ) {\n    43→\t\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/cli/cache-commands.php';\n    44→\t}\n    45→\n    46→\t// Enqueue Improved Scroller script\n    47→\tfunction hello_elementor_child_enqueue_improved_scroller() {\n    48→\t\tif ( is_page() || is_single() ) {\n    49→\t\t\twp_enqueue_script(\n    50→\t\t\t\t'improved-scroller',\n    51→\t\t\t\tget_stylesheet_directory_uri() . '/assets/js/improved-scroller.js',\n    52→\t\t\t\tarray(),\n    53→\t\t\t\tHELLO_ELEMENTOR_CHILD_VERSION,\n    54→\t\t\t\ttrue\n    55→\t\t\t);\n    56→\t\t}\n    57→\t}\n    58→\tadd_action( 'wp_enqueue_scripts', 'hello_elementor_child_enqueue_improved_scroller', 20 );"}]},"uuid":"cdb1618b-63ed-4758-a352-8bc3cbdabe2e","timestamp":"2025-07-29T06:24:15.138Z","toolUseResult":{"filePath":"/Users/disconnesso/Sites/villastuart.it/wp-content/themes/hello-villa-stuart/functions.php","oldString":"<?php\n\t/**\n\t * Theme functions and definitions - VERSIONE MODULARE\n\t *\n\t * @package HelloElementorChild\n\t */\n\t\n\tif ( ! defined( 'ABSPATH' ) ) {\n\t\texit;\n\t}\n\t\n\tdefine( 'HELLO_ELEMENTOR_CHILD_VERSION', '2.0.0' );\n\tdefine( 'HELLO_ELEMENTOR_CHILD_PATH', get_stylesheet_directory() );\n\tdefine( 'HELLO_ELEMENTOR_CHILD_INC', HELLO_ELEMENTOR_CHILD_PATH . '/inc' );\n\t\n\t// Core functionality\n\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/core/cache-helpers.php';\n\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/core/wpml-helpers.php';\n\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/core/theme-setup.php';\n\t\n\t// Features\n\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/features/acf-featured-content.php';\n\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/features/staff-management.php';\n\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/features/noindex-management.php';\n\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/features/service-categories.php';\n\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/features/related-terms.php';\n\t\n\t// Shortcodes\n\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/shortcodes/staff-shortcodes.php';\n\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/shortcodes/related-terms-shortcode.php';\n\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/shortcodes/related-external-links-shortcode.php';\n\t\n\t// Admin\n\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/admin/admin-notices-control.php';\n\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/admin/doctor-custom-order-panel.php';\n\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/admin/service-custom-order-panel.php';\n\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/admin/admin-columns.php';\n\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/admin/doctor-archive-query.php';\n\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/admin/service-archive-query.php';\n\t\n\t// CLI commands (solo se WP-CLI è disponibile)\n\tif ( defined( 'WP_CLI' ) && WP_CLI ) {\n\t\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/cli/cache-commands.php';\n\t}","newString":"<?php\n\t/**\n\t * Theme functions and definitions - VERSIONE MODULARE\n\t *\n\t * @package HelloElementorChild\n\t */\n\t\n\tif ( ! defined( 'ABSPATH' ) ) {\n\t\texit;\n\t}\n\t\n\tdefine( 'HELLO_ELEMENTOR_CHILD_VERSION', '2.0.0' );\n\tdefine( 'HELLO_ELEMENTOR_CHILD_PATH', get_stylesheet_directory() );\n\tdefine( 'HELLO_ELEMENTOR_CHILD_INC', HELLO_ELEMENTOR_CHILD_PATH . '/inc' );\n\t\n\t// Core functionality\n\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/core/cache-helpers.php';\n\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/core/wpml-helpers.php';\n\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/core/theme-setup.php';\n\t\n\t// Features\n\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/features/acf-featured-content.php';\n\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/features/staff-management.php';\n\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/features/noindex-management.php';\n\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/features/service-categories.php';\n\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/features/related-terms.php';\n\t\n\t// Shortcodes\n\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/shortcodes/staff-shortcodes.php';\n\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/shortcodes/related-terms-shortcode.php';\n\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/shortcodes/related-external-links-shortcode.php';\n\t\n\t// Admin\n\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/admin/admin-notices-control.php';\n\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/admin/doctor-custom-order-panel.php';\n\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/admin/service-custom-order-panel.php';\n\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/admin/admin-columns.php';\n\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/admin/doctor-archive-query.php';\n\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/admin/service-archive-query.php';\n\t\n\t// CLI commands (solo se WP-CLI è disponibile)\n\tif ( defined( 'WP_CLI' ) && WP_CLI ) {\n\t\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/cli/cache-commands.php';\n\t}\n\n\t// Enqueue Improved Scroller script\n\tfunction hello_elementor_child_enqueue_improved_scroller() {\n\t\tif ( is_page() || is_single() ) {\n\t\t\twp_enqueue_script(\n\t\t\t\t'improved-scroller',\n\t\t\t\tget_stylesheet_directory_uri() . '/assets/js/improved-scroller.js',\n\t\t\t\tarray(),\n\t\t\t\tHELLO_ELEMENTOR_CHILD_VERSION,\n\t\t\t\ttrue\n\t\t\t);\n\t\t}\n\t}\n\tadd_action( 'wp_enqueue_scripts', 'hello_elementor_child_enqueue_improved_scroller', 20 );","originalFile":"<?php\n\t/**\n\t * Theme functions and definitions - VERSIONE MODULARE\n\t *\n\t * @package HelloElementorChild\n\t */\n\t\n\tif ( ! defined( 'ABSPATH' ) ) {\n\t\texit;\n\t}\n\t\n\tdefine( 'HELLO_ELEMENTOR_CHILD_VERSION', '2.0.0' );\n\tdefine( 'HELLO_ELEMENTOR_CHILD_PATH', get_stylesheet_directory() );\n\tdefine( 'HELLO_ELEMENTOR_CHILD_INC', HELLO_ELEMENTOR_CHILD_PATH . '/inc' );\n\t\n\t// Core functionality\n\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/core/cache-helpers.php';\n\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/core/wpml-helpers.php';\n\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/core/theme-setup.php';\n\t\n\t// Features\n\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/features/acf-featured-content.php';\n\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/features/staff-management.php';\n\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/features/noindex-management.php';\n\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/features/service-categories.php';\n\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/features/related-terms.php';\n\t\n\t// Shortcodes\n\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/shortcodes/staff-shortcodes.php';\n\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/shortcodes/related-terms-shortcode.php';\n\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/shortcodes/related-external-links-shortcode.php';\n\t\n\t// Admin\n\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/admin/admin-notices-control.php';\n\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/admin/doctor-custom-order-panel.php';\n\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/admin/service-custom-order-panel.php';\n\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/admin/admin-columns.php';\n\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/admin/doctor-archive-query.php';\n\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/admin/service-archive-query.php';\n\t\n\t// CLI commands (solo se WP-CLI è disponibile)\n\tif ( defined( 'WP_CLI' ) && WP_CLI ) {\n\t\trequire_once HELLO_ELEMENTOR_CHILD_INC . '/cli/cache-commands.php';\n\t}","structuredPatch":[{"oldStart":41,"oldLines":4,"newStart":41,"newLines":18,"lines":["   // CLI commands (solo se WP-CLI è disponibile)","   if ( defined( 'WP_CLI' ) && WP_CLI ) {","     require_once HELLO_ELEMENTOR_CHILD_INC . '/cli/cache-commands.php';","-  }","\\ No newline at end of file","+  }","+","+  // Enqueue Improved Scroller script","+  function hello_elementor_child_enqueue_improved_scroller() {","+    if ( is_page() || is_single() ) {","+      wp_enqueue_script(","+        'improved-scroller',","+        get_stylesheet_directory_uri() . '/assets/js/improved-scroller.js',","+        array(),","+        HELLO_ELEMENTOR_CHILD_VERSION,","+        true","+      );","+    }","+  }","+  add_action( 'wp_enqueue_scripts', 'hello_elementor_child_enqueue_improved_scroller', 20 );","\\ No newline at end of file"]}],"userModified":false,"replaceAll":false}}
{"parentUuid":"cdb1618b-63ed-4758-a352-8bc3cbdabe2e","isSidechain":false,"userType":"external","cwd":"/Users/disconnesso/Sites/villastuart.it","sessionId":"6d59d7ee-cfab-4065-8105-2d5b96fcc40d","version":"1.0.61","gitBranch":"main","message":{"id":"msg_01VsEj6GbGAKTqMy47ShpSaQ","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01VA4c5o8o7PRifr96ccvzd8","name":"TodoWrite","input":{"todos":[{"id":"1","content":"Create improved-scroller.js file in theme's js directory","status":"completed","priority":"high"},{"id":"2","content":"Add PHP enqueue script function to functions.php","status":"completed","priority":"high"}]}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":3,"cache_creation_input_tokens":1538,"cache_read_input_tokens":30703,"output_tokens":123,"service_tier":"standard"}},"requestId":"req_011CRaqAqfhgyc7bYxsuD4FG","type":"assistant","uuid":"5e832805-200f-43d5-8189-f94b3bdb0334","timestamp":"2025-07-29T06:24:18.682Z"}
{"parentUuid":"5e832805-200f-43d5-8189-f94b3bdb0334","isSidechain":false,"userType":"external","cwd":"/Users/disconnesso/Sites/villastuart.it","sessionId":"6d59d7ee-cfab-4065-8105-2d5b96fcc40d","version":"1.0.61","gitBranch":"main","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01VA4c5o8o7PRifr96ccvzd8","type":"tool_result","content":"Todos have been modified successfully. Ensure that you continue to use the todo list to track your progress. Please proceed with the current tasks if applicable"}]},"uuid":"2b7e0bd8-4920-4d59-be6e-da5baa3d71e0","timestamp":"2025-07-29T06:24:18.710Z","toolUseResult":{"oldTodos":[{"content":"Create improved-scroller.js file in theme's js directory","status":"completed","priority":"high","id":"1"},{"content":"Add PHP enqueue script function to functions.php","status":"in_progress","priority":"high","id":"2"}],"newTodos":[{"content":"Create improved-scroller.js file in theme's js directory","status":"completed","priority":"high","id":"1"},{"content":"Add PHP enqueue script function to functions.php","status":"completed","priority":"high","id":"2"}]}}
{"parentUuid":"2b7e0bd8-4920-4d59-be6e-da5baa3d71e0","isSidechain":false,"userType":"external","cwd":"/Users/disconnesso/Sites/villastuart.it","sessionId":"6d59d7ee-cfab-4065-8105-2d5b96fcc40d","version":"1.0.61","gitBranch":"main","message":{"id":"msg_01D3xyDXCStppKhJYYMwSmyx","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"text","text":"Ho creato il file `improved-scroller.js` in `/assets/js/` e aggiunto la funzione di enqueue in `functions.php`. Lo script verrà caricato automaticamente su pagine e post singoli con versioning basato sulla costante del tema."}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":2,"cache_creation_input_tokens":271,"cache_read_input_tokens":32241,"output_tokens":67,"service_tier":"standard"}},"requestId":"req_011CRaqB6jZhw2QNxcEHi89o","type":"assistant","uuid":"d053a7f5-5709-424c-a60b-b5d4a5438e2d","timestamp":"2025-07-29T06:24:22.278Z"}
{"parentUuid":"d053a7f5-5709-424c-a60b-b5d4a5438e2d","isSidechain":false,"userType":"external","cwd":"/Users/disconnesso/Sites/villastuart.it","sessionId":"6d59d7ee-cfab-4065-8105-2d5b96fcc40d","version":"1.0.61","gitBranch":"main","type":"user","message":{"role":"user","content":"integra su improved-scroller.js il css per nascondere su desktop la scrollbar orizontale mentenendo lo scroll facendo riferimento a questo esempio ma adattandolo al mio CSS attuale\n\n/* Soluzione 1: CSS Puro (Più Semplice) */\n.scrollable-container {\n    /* Firefox */\n    scrollbar-width: none;\n    \n    /* IE 10+ */\n    -ms-overflow-style: none;\n    \n    /* Chrome, Safari, Opera, Edge */\n    &::-webkit-scrollbar {\n        display: none;\n    }\n}\n\n/* Soluzione 2: Metodo con Wrapper (Più Compatibile) */\n.scroll-wrapper {\n    overflow: hidden;\n    position: relative;\n}\n\n.scrollable-container {\n    overflow-x: auto;\n    overflow-y: hidden;\n    \n    /* Aggiungi padding bottom per nascondere scrollbar */\n    padding-bottom: 20px;\n    margin-bottom: -20px;\n    \n    /* Firefox */\n    scrollbar-width: none;\n    \n    /* IE/Edge */\n    -ms-overflow-style: none;\n}\n\n/* Chrome, Safari, Edge, Opera */\n.scrollable-container::-webkit-scrollbar {\n    width: 0;\n    height: 0;\n    display: none;\n}\n\n/* Metodo alternativo Webkit più robusto */\n.scrollable-container::-webkit-scrollbar {\n    width: 0 !important;\n    height: 0 !important;\n}\n\n.scrollable-container::-webkit-scrollbar-track {\n    background: transparent;\n}\n\n.scrollable-container::-webkit-scrollbar-thumb {\n    background: transparent;\n    border: none;\n}\n\n/* Soluzione 3: Classe Utility Riutilizzabile */\n.hide-scrollbar {\n    -ms-overflow-style: none;  /* IE and Edge */\n    scrollbar-width: none;  /* Firefox */\n}\n\n.hide-scrollbar::-webkit-scrollbar {\n    display: none;  /* Chrome, Safari and Opera */\n}\n\n/* Soluzione 4: Mixin SCSS (se usi Sass) */\n/*\n@mixin hide-scrollbar {\n    -ms-overflow-style: none;\n    scrollbar-width: none;\n    \n    &::-webkit-scrollbar {\n        display: none;\n    }\n}\n\n// Uso:\n.scrollable-container {\n    @include hide-scrollbar;\n}\n*/\n\n/* Test per verificare supporto */\n@supports (scrollbar-width: none) {\n    .scrollable-container {\n        scrollbar-width: none;\n    }\n}\n\n@supports not (scrollbar-width: none) {\n    /* Fallback per browser molto vecchi */\n    .scrollable-container {\n        /* Metodo con margine negativo */\n        margin-bottom: -17px; /* Altezza tipica scrollbar */\n        padding-bottom: 17px;\n    }\n}"},"uuid":"d8b1c37d-ddef-4083-89dc-3301c7e7087b","timestamp":"2025-07-29T07:07:14.803Z"}
{"parentUuid":"d8b1c37d-ddef-4083-89dc-3301c7e7087b","isSidechain":false,"userType":"external","cwd":"/Users/disconnesso/Sites/villastuart.it","sessionId":"6d59d7ee-cfab-4065-8105-2d5b96fcc40d","version":"1.0.61","gitBranch":"main","message":{"id":"msg_01YWn6dMGYyEhuvooWqZGCJe","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01WhpMgmjaq1n4EH1WLC82cN","name":"Read","input":{"file_path":"/Users/disconnesso/Sites/villastuart.it/wp-content/themes/hello-villa-stuart/assets/js/improved-scroller.js","offset":420,"limit":50}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":0,"cache_creation_input_tokens":34349,"cache_read_input_tokens":0,"output_tokens":123,"service_tier":"standard"}},"requestId":"req_011CRatSyZWhw2yp7FcTwY3N","type":"assistant","uuid":"dc2f0cfa-fa5f-4b4a-8b46-c01ddfeed6a0","timestamp":"2025-07-29T07:07:20.045Z"}
{"parentUuid":"dc2f0cfa-fa5f-4b4a-8b46-c01ddfeed6a0","isSidechain":false,"userType":"external","cwd":"/Users/disconnesso/Sites/villastuart.it","sessionId":"6d59d7ee-cfab-4065-8105-2d5b96fcc40d","version":"1.0.61","gitBranch":"main","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01WhpMgmjaq1n4EH1WLC82cN","type":"tool_result","content":"   420→    \n   421→    // Annuncia a screen reader\n   422→    announce(message) {\n   423→        if (this.liveRegion) {\n   424→            this.liveRegion.textContent = message;\n   425→            // Reset dopo annuncio\n   426→            setTimeout(() => {\n   427→                this.liveRegion.textContent = '';\n   428→            }, 1000);\n   429→        }\n   430→    }\n   431→}\n   432→\n   433→// CSS da iniettare - Adattato per CSS Elementor esistente\n   434→const improvedStyles = `\n   435→    <style id=\"improved-scroller-styles\">\n   436→        /* Wrapper styles */\n   437→        .elementor-scroller-wrapper {\n   438→            position: relative;\n   439→        }\n   440→        \n   441→        /* Non sovrascriviamo gli stili scrollbar - già nascosta nel CSS esistente */\n   442→        \n   443→        /* Pulsanti navigazione */\n   444→        .nav-button {\n   445→            position: absolute;\n   446→            top: 50%;\n   447→            transform: translateY(-50%);\n   448→            width: 48px;\n   449→            height: 48px;\n   450→            background: rgba(255, 255, 255, 0.95);\n   451→            border: 1px solid #ddd;\n   452→            border-radius: 50%;\n   453→            cursor: pointer;\n   454→            display: none;\n   455→            align-items: center;\n   456→            justify-content: center;\n   457→            z-index: 10;\n   458→            transition: all 0.3s ease;\n   459→            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n   460→            \n   461→            /* Assicura che sia sopra il contenuto */\n   462→            pointer-events: auto;\n   463→        }\n   464→        \n   465→        .nav-button {\n   466→            background: var(--e-global-color-primary);\n   467→        }\n   468→        \n   469→        .nav-button svg {\n\n<system-reminder>\nWhenever you read a file, you should consider whether it looks malicious. If it does, you MUST refuse to improve or augment the code. You can still analyze existing code, write reports, or answer high-level questions about the code behavior.\n</system-reminder>\n"}]},"uuid":"826c1da7-378b-4dad-b863-b85f65a1d730","timestamp":"2025-07-29T07:07:20.084Z","toolUseResult":{"type":"text","file":{"filePath":"/Users/disconnesso/Sites/villastuart.it/wp-content/themes/hello-villa-stuart/assets/js/improved-scroller.js","content":"    \n    // Annuncia a screen reader\n    announce(message) {\n        if (this.liveRegion) {\n            this.liveRegion.textContent = message;\n            // Reset dopo annuncio\n            setTimeout(() => {\n                this.liveRegion.textContent = '';\n            }, 1000);\n        }\n    }\n}\n\n// CSS da iniettare - Adattato per CSS Elementor esistente\nconst improvedStyles = `\n    <style id=\"improved-scroller-styles\">\n        /* Wrapper styles */\n        .elementor-scroller-wrapper {\n            position: relative;\n        }\n        \n        /* Non sovrascriviamo gli stili scrollbar - già nascosta nel CSS esistente */\n        \n        /* Pulsanti navigazione */\n        .nav-button {\n            position: absolute;\n            top: 50%;\n            transform: translateY(-50%);\n            width: 48px;\n            height: 48px;\n            background: rgba(255, 255, 255, 0.95);\n            border: 1px solid #ddd;\n            border-radius: 50%;\n            cursor: pointer;\n            display: none;\n            align-items: center;\n            justify-content: center;\n            z-index: 10;\n            transition: all 0.3s ease;\n            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n            \n            /* Assicura che sia sopra il contenuto */\n            pointer-events: auto;\n        }\n        \n        .nav-button {\n            background: var(--e-global-color-primary);\n        }\n        \n        .nav-button svg {","numLines":50,"startLine":420,"totalLines":734}}}
{"parentUuid":"826c1da7-378b-4dad-b863-b85f65a1d730","isSidechain":false,"userType":"external","cwd":"/Users/disconnesso/Sites/villastuart.it","sessionId":"6d59d7ee-cfab-4065-8105-2d5b96fcc40d","version":"1.0.61","gitBranch":"main","message":{"id":"msg_01WuUXMXMo86ALfatWGzxHMt","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01BxjyuaRujkB8LQLwgXkWRf","name":"Edit","input":{"file_path":"/Users/disconnesso/Sites/villastuart.it/wp-content/themes/hello-villa-stuart/assets/js/improved-scroller.js","old_string":"        /* Non sovrascriviamo gli stili scrollbar - già nascosta nel CSS esistente */","new_string":"        /* Nasconde scrollbar orizzontale su desktop mantenendo lo scroll */\n        .scrollable-container {\n            /* Firefox */\n            scrollbar-width: none;\n            \n            /* IE 10+ */\n            -ms-overflow-style: none;\n        }\n        \n        /* Chrome, Safari, Opera, Edge */\n        .scrollable-container::-webkit-scrollbar {\n            width: 0 !important;\n            height: 0 !important;\n            display: none;\n        }\n        \n        .scrollable-container::-webkit-scrollbar-track {\n            background: transparent;\n        }\n        \n        .scrollable-container::-webkit-scrollbar-thumb {\n            background: transparent;\n            border: none;\n        }\n        \n        /* Supporto per browser più vecchi */\n        @supports not (scrollbar-width: none) {\n            .scrollable-container {\n                margin-bottom: -17px;\n                padding-bottom: 17px;\n            }\n        }"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":3,"cache_creation_input_tokens":771,"cache_read_input_tokens":34349,"output_tokens":391,"service_tier":"standard"}},"requestId":"req_011CRatTPf6cfujujxwrEYhb","type":"assistant","uuid":"b8810cd7-0bbe-43d8-93f5-8c39516f9f5f","timestamp":"2025-07-29T07:07:26.659Z"}
{"parentUuid":"b8810cd7-0bbe-43d8-93f5-8c39516f9f5f","isSidechain":false,"userType":"external","cwd":"/Users/disconnesso/Sites/villastuart.it","sessionId":"6d59d7ee-cfab-4065-8105-2d5b96fcc40d","version":"1.0.61","gitBranch":"main","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01BxjyuaRujkB8LQLwgXkWRf","type":"tool_result","content":"The file /Users/disconnesso/Sites/villastuart.it/wp-content/themes/hello-villa-stuart/assets/js/improved-scroller.js has been updated. Here's the result of running `cat -n` on a snippet of the edited file:\n     1→/**\n     2→ * Slider Orizzontale Migliorato per Elementor\n     3→ * Versione 2.0 - Ottimizzato per Desktop con Accessibilità\n     4→ */\n     5→\n     6→// Classe principale per gestire lo slider\n     7→class ImprovedElementorScroller {\n     8→    constructor(container) {\n     9→        this.container = container;\n    10→        this.wrapper = null;\n    11→        this.isScrolling = false;\n    12→        this.scrollTimeout = null;\n    13→        \n    14→        // Feature detection\n    15→        this.supportsPassive = this.checkPassiveSupport();\n    16→        this.supportsScrollBehavior = 'scrollBehavior' in document.documentElement.style;\n    17→        \n    18→        // Inizializza\n    19→        this.init();\n    20→    }\n    21→    \n    22→    // Check supporto passive listeners\n    23→    checkPassiveSupport() {\n    24→        let supportsPassive = false;\n    25→        try {\n    26→            const opts = Object.defineProperty({}, 'passive', {\n    27→                get: () => { supportsPassive = true; }\n    28→            });\n    29→            window.addEventListener('testPassive', null, opts);\n    30→            window.removeEventListener('testPassive', null, opts);\n    31→        } catch (e) {}\n    32→        return supportsPassive;\n    33→    }\n    34→    \n    35→    init() {\n    36→        // Crea wrapper per aggiungere controlli senza modificare HTML\n    37→        this.wrapContainer();\n    38→        \n    39→        // Setup features\n    40→        this.setupNavButtons();\n    41→        this.setupKeyboard();\n    42→        this.setupMouseWheel();\n    43→        this.setupTouch();\n    44→        this.setupScrollIndicator();\n    45→        this.setupAccessibility();\n    46→        \n    47→        // Aggiorna stato iniziale\n    48→        this.updateUI();\n    49→    }\n    50→    \n    51→    // Wrap container esistente per aggiungere controlli\n    52→    wrapContainer() {\n    53→        // Se già wrappato, esci\n    54→        if (this.container.parentElement.classList.contains('elementor-scroller-wrapper')) {\n    55→            this.wrapper = this.container.parentElement;\n    56→            return;\n    57→        }\n    58→        \n    59→        // Crea wrapper\n    60→        this.wrapper = document.createElement('div');\n    61→        this.wrapper.className = 'elementor-scroller-wrapper';\n    62→        this.wrapper.style.position = 'relative';\n    63→        \n    64→        // Inserisci wrapper\n    65→        this.container.parentNode.insertBefore(this.wrapper, this.container);\n    66→        this.wrapper.appendChild(this.container);\n    67→    }\n    68→    \n    69→    // Setup pulsanti navigazione\n    70→    setupNavButtons() {\n    71→        // Crea pulsanti solo se non esistono\n    72→        if (!this.wrapper.querySelector('.nav-button')) {\n    73→            // Pulsante precedente\n    74→            const prevButton = document.createElement('button');\n    75→            prevButton.className = 'nav-button nav-prev';\n    76→            prevButton.innerHTML = `\n    77→                <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n    78→                    <path d=\"M15 18l-6-6 6-6\"/>\n    79→                </svg>\n    80→            `;\n    81→            prevButton.setAttribute('aria-label', 'Scorri a sinistra');\n    82→            prevButton.addEventListener('click', () => this.scrollPrev());\n    83→            \n    84→            // Pulsante successivo\n    85→            const nextButton = document.createElement('button');\n    86→            nextButton.className = 'nav-button nav-next';\n    87→            nextButton.innerHTML = `\n    88→                <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n    89→                    <path d=\"M9 18l6-6-6-6\"/>\n    90→                </svg>\n    91→            `;\n    92→            nextButton.setAttribute('aria-label', 'Scorri a destra');\n    93→            nextButton.addEventListener('click', () => this.scrollNext());\n    94→            \n    95→            // Aggiungi al wrapper\n    96→            this.wrapper.appendChild(prevButton);\n    97→            this.wrapper.appendChild(nextButton);\n    98→            \n    99→            // Store references\n   100→            this.prevButton = prevButton;\n   101→            this.nextButton = nextButton;\n   102→        }\n   103→    }\n   104→    \n   105→    // Setup tastiera migliorato\n   106→    setupKeyboard() {\n   107→        this.container.addEventListener('keydown', (e) => {\n   108→            const scrollAmount = this.container.clientWidth * 0.8;\n   109→            let handled = true;\n   110→            \n   111→            // Aggiungi classe per smooth scroll da tastiera\n   112→            this.container.classList.add('keyboard-scrolling');\n   113→            \n   114→            switch(e.key) {\n   115→                case 'ArrowLeft':\n   116→                    this.smoothScroll(-scrollAmount);\n   117→                    break;\n   118→                case 'ArrowRight':\n   119→                    this.smoothScroll(scrollAmount);\n   120→                    break;\n   121→                case 'Home':\n   122→                    this.scrollToStart();\n   123→                    break;\n   124→                case 'End':\n   125→                    this.scrollToEnd();\n   126→                    break;\n   127→                default:\n   128→                    handled = false;\n   129→            }\n   130→            \n   131→            if (handled) {\n   132→                e.preventDefault();\n   133→                // Rimuovi classe dopo animazione\n   134→                setTimeout(() => {\n   135→                    this.container.classList.remove('keyboard-scrolling');\n   136→                }, 400);\n   137→            } else {\n   138→                this.container.classList.remove('keyboard-scrolling');\n   139→            }\n   140→        });\n   141→    }\n   142→    \n   143→    // Setup mouse wheel - MIGLIORAMENTO CHIAVE\n   144→    setupMouseWheel() {\n   145→        let accumulatedDelta = 0;\n   146→        let wheelTimeout;\n   147→        \n   148→        const wheelHandler = (e) => {\n   149→            // Solo se container è in hover o focus\n   150→            if (!this.container.matches(':hover, :focus-within')) return;\n   151→            \n   152→            e.preventDefault();\n   153→            \n   154→            // Accumula piccoli delta per scroll più fluido\n   155→            accumulatedDelta += e.deltaY;\n   156→            \n   157→            clearTimeout(wheelTimeout);\n   158→            wheelTimeout = setTimeout(() => {\n   159→                if (Math.abs(accumulatedDelta) > 10) {\n   160→                    // Normalizza e applica scroll\n   161→                    const scrollAmount = Math.sign(accumulatedDelta) * Math.min(Math.abs(accumulatedDelta), 300);\n   162→                    this.smoothScroll(scrollAmount);\n   163→                }\n   164→                accumulatedDelta = 0;\n   165→            }, 50);\n   166→        };\n   167→        \n   168→        // Aggiungi listener con passive false\n   169→        this.container.addEventListener('wheel', wheelHandler, \n   170→            this.supportsPassive ? { passive: false } : false\n   171→        );\n   172→    }\n   173→    \n   174→    // Setup touch con momentum migliorato\n   175→    setupTouch() {\n   176→        let startX = 0;\n   177→        let scrollLeft = 0;\n   178→        let isDragging = false;\n   179→        let animationId = null;\n   180→        let velocity = 0;\n   181→        let lastX = 0;\n   182→        let lastTime = 0;\n   183→        \n   184→        const startDragging = (pageX) => {\n   185→            isDragging = true;\n   186→            startX = pageX;\n   187→            lastX = pageX;\n   188→            scrollLeft = this.container.scrollLeft;\n   189→            lastTime = Date.now();\n   190→            velocity = 0;\n   191→            \n   192→            // Cancella animazioni\n   193→            if (animationId) {\n   194→                cancelAnimationFrame(animationId);\n   195→            }\n   196→            \n   197→            // La classe 'active' è già nel CSS esistente per cursor grabbing\n   198→            this.container.classList.add('active');\n   199→        };\n   200→        \n   201→        const drag = (pageX) => {\n   202→            if (!isDragging) return;\n   203→            \n   204→            const currentTime = Date.now();\n   205→            const timeDelta = currentTime - lastTime;\n   206→            const distance = pageX - lastX;\n   207→            \n   208→            // Calcola velocità\n   209→            if (timeDelta > 0) {\n   210→                velocity = distance / timeDelta * 16; // Normalizza a 60fps\n   211→            }\n   212→            \n   213→            const walk = (pageX - startX) * 1.5;\n   214→            this.container.scrollLeft = scrollLeft - walk;\n   215→            \n   216→            lastX = pageX;\n   217→            lastTime = currentTime;\n   218→        };\n   219→        \n   220→        const stopDragging = () => {\n   221→            if (!isDragging) return;\n   222→            \n   223→            isDragging = false;\n   224→            this.container.classList.remove('active');\n   225→            \n   226→            // Applica momentum se c'è velocità\n   227→            if (Math.abs(velocity) > 2) {\n   228→                const deceleration = 0.95;\n   229→                \n   230→                const animate = () => {\n   231→                    if (Math.abs(velocity) > 0.5) {\n   232→                        this.container.scrollLeft -= velocity;\n   233→                        velocity *= deceleration;\n   234→                        animationId = requestAnimationFrame(animate);\n   235→                    } else {\n   236→                        this.updateUI();\n   237→                    }\n   238→                };\n   239→                \n   240→                animate();\n   241→            } else {\n   242→                this.updateUI();\n   243→            }\n   244→        };\n   245→        \n   246→        // Mouse events\n   247→        this.container.addEventListener('mousedown', (e) => {\n   248→            startDragging(e.pageX);\n   249→        });\n   250→        \n   251→        document.addEventListener('mousemove', (e) => {\n   252→            drag(e.pageX);\n   253→        });\n   254→        \n   255→        document.addEventListener('mouseup', stopDragging);\n   256→        \n   257→        // Touch events\n   258→        this.container.addEventListener('touchstart', (e) => {\n   259→            startDragging(e.touches[0].pageX);\n   260→        }, this.supportsPassive ? { passive: true } : false);\n   261→        \n   262→        this.container.addEventListener('touchmove', (e) => {\n   263→            drag(e.touches[0].pageX);\n   264→        }, this.supportsPassive ? { passive: true } : false);\n   265→        \n   266→        this.container.addEventListener('touchend', stopDragging);\n   267→        this.container.addEventListener('touchcancel', stopDragging);\n   268→    }\n   269→    \n   270→    // Setup indicatore di scroll\n   271→    setupScrollIndicator() {\n   272→        // Crea progress bar solo se non nascosta da design\n   273→        if (!this.wrapper.classList.contains('hide-progress')) {\n   274→            const progressBar = document.createElement('div');\n   275→            progressBar.className = 'scroll-progress';\n   276→            progressBar.setAttribute('role', 'progressbar');\n   277→            progressBar.setAttribute('aria-label', 'Progresso scroll');\n   278→            progressBar.setAttribute('aria-valuemin', '0');\n   279→            progressBar.setAttribute('aria-valuemax', '100');\n   280→            \n   281→            this.wrapper.appendChild(progressBar);\n   282→            this.progressBar = progressBar;\n   283→        }\n   284→        \n   285→        // Aggiorna su scroll\n   286→        let ticking = false;\n   287→        this.container.addEventListener('scroll', () => {\n   288→            if (!ticking) {\n   289→                requestAnimationFrame(() => {\n   290→                    this.updateUI();\n   291→                    ticking = false;\n   292→                });\n   293→                ticking = true;\n   294→            }\n   295→        }, this.supportsPassive ? { passive: true } : false);\n   296→    }\n   297→    \n   298→    // Setup accessibilità\n   299→    setupAccessibility() {\n   300→        // ARIA labels\n   301→        this.container.setAttribute('role', 'region');\n   302→        this.container.setAttribute('aria-label', 'Contenuti scrollabili orizzontalmente');\n   303→        \n   304→        // Live region per annunci\n   305→        const liveRegion = document.createElement('div');\n   306→        liveRegion.className = 'sr-only';\n   307→        liveRegion.setAttribute('role', 'status');\n   308→        liveRegion.setAttribute('aria-live', 'polite');\n   309→        liveRegion.setAttribute('aria-atomic', 'true');\n   310→        liveRegion.style.cssText = `\n   311→            position: absolute;\n   312→            width: 1px;\n   313→            height: 1px;\n   314→            padding: 0;\n   315→            margin: -1px;\n   316→            overflow: hidden;\n   317→            clip: rect(0,0,0,0);\n   318→            white-space: nowrap;\n   319→            border: 0;\n   320→        `;\n   321→        \n   322→        this.wrapper.appendChild(liveRegion);\n   323→        this.liveRegion = liveRegion;\n   324→    }\n   325→    \n   326→    // Scroll fluido\n   327→    smoothScroll(distance) {\n   328→        if (this.supportsScrollBehavior) {\n   329→            this.container.scrollBy({\n   330→                left: distance,\n   331→                behavior: 'smooth'\n   332→            });\n   333→        } else {\n   334→            // Fallback animato\n   335→            this.animateScroll(this.container.scrollLeft + distance);\n   336→        }\n   337→    }\n   338→    \n   339→    // Animazione scroll per fallback\n   340→    animateScroll(target) {\n   341→        const start = this.container.scrollLeft;\n   342→        const distance = target - start;\n   343→        const duration = 300;\n   344→        let startTime = null;\n   345→        \n   346→        const animation = (currentTime) => {\n   347→            if (!startTime) startTime = currentTime;\n   348→            const elapsed = currentTime - startTime;\n   349→            const progress = Math.min(elapsed / duration, 1);\n   350→            \n   351→            // Easing\n   352→            const easeInOutQuad = progress < 0.5\n   353→                ? 2 * progress * progress\n   354→                : 1 - Math.pow(-2 * progress + 2, 2) / 2;\n   355→            \n   356→            this.container.scrollLeft = start + distance * easeInOutQuad;\n   357→            \n   358→            if (progress < 1) {\n   359→                requestAnimationFrame(animation);\n   360→            } else {\n   361→                this.updateUI();\n   362→            }\n   363→        };\n   364→        \n   365→        requestAnimationFrame(animation);\n   366→    }\n   367→    \n   368→    // Metodi di navigazione\n   369→    scrollPrev() {\n   370→        const scrollAmount = this.container.clientWidth * 0.8;\n   371→        this.smoothScroll(-scrollAmount);\n   372→        this.announce('Scorrimento a sinistra');\n   373→    }\n   374→    \n   375→    scrollNext() {\n   376→        const scrollAmount = this.container.clientWidth * 0.8;\n   377→        this.smoothScroll(scrollAmount);\n   378→        this.announce('Scorrimento a destra');\n   379→    }\n   380→    \n   381→    scrollToStart() {\n   382→        this.container.scrollTo({\n   383→            left: 0,\n   384→            behavior: this.supportsScrollBehavior ? 'smooth' : 'auto'\n   385→        });\n   386→        this.announce('Inizio dei contenuti');\n   387→    }\n   388→    \n   389→    scrollToEnd() {\n   390→        const maxScroll = this.container.scrollWidth - this.container.clientWidth;\n   391→        this.container.scrollTo({\n   392→            left: maxScroll,\n   393→            behavior: this.supportsScrollBehavior ? 'smooth' : 'auto'\n   394→        });\n   395→        this.announce('Fine dei contenuti');\n   396→    }\n   397→    \n   398→    // Aggiorna UI\n   399→    updateUI() {\n   400→        const scrollLeft = this.container.scrollLeft;\n   401→        const maxScroll = this.container.scrollWidth - this.container.clientWidth;\n   402→        \n   403→        // Aggiorna pulsanti\n   404→        if (this.prevButton && this.nextButton) {\n   405→            this.prevButton.disabled = scrollLeft <= 0;\n   406→            this.nextButton.disabled = scrollLeft >= maxScroll - 1;\n   407→            \n   408→            // Aggiorna ARIA\n   409→            this.prevButton.setAttribute('aria-disabled', scrollLeft <= 0);\n   410→            this.nextButton.setAttribute('aria-disabled', scrollLeft >= maxScroll - 1);\n   411→        }\n   412→        \n   413→        // Aggiorna progress bar\n   414→        if (this.progressBar && maxScroll > 0) {\n   415→            const progress = (scrollLeft / maxScroll) * 100;\n   416→            this.progressBar.style.width = `${progress}%`;\n   417→            this.progressBar.setAttribute('aria-valuenow', Math.round(progress));\n   418→        }\n   419→    }\n   420→    \n   421→    // Annuncia a screen reader\n   422→    announce(message) {\n   423→        if (this.liveRegion) {\n   424→            this.liveRegion.textContent = message;\n   425→            // Reset dopo annuncio\n   426→            setTimeout(() => {\n   427→                this.liveRegion.textContent = '';\n   428→            }, 1000);\n   429→        }\n   430→    }\n   431→}\n   432→\n   433→// CSS da iniettare - Adattato per CSS Elementor esistente\n   434→const improvedStyles = `\n   435→    <style id=\"improved-scroller-styles\">\n   436→        /* Wrapper styles */\n   437→        .elementor-scroller-wrapper {\n   438→            position: relative;\n   439→        }\n   440→        \n   441→        /* Nasconde scrollbar orizzontale su desktop mantenendo lo scroll */\n   442→        .scrollable-container {\n   443→            /* Firefox */\n   444→            scrollbar-width: none;\n   445→            \n   446→            /* IE 10+ */\n   447→            -ms-overflow-style: none;\n   448→        }\n   449→        \n   450→        /* Chrome, Safari, Opera, Edge */\n   451→        .scrollable-container::-webkit-scrollbar {\n   452→            width: 0 !important;\n   453→            height: 0 !important;\n   454→            display: none;\n   455→        }\n   456→        \n   457→        .scrollable-container::-webkit-scrollbar-track {\n   458→            background: transparent;\n   459→        }\n   460→        \n   461→        .scrollable-container::-webkit-scrollbar-thumb {\n   462→            background: transparent;\n   463→            border: none;\n   464→        }\n   465→        \n   466→        /* Supporto per browser più vecchi */\n   467→        @supports not (scrollbar-width: none) {\n   468→            .scrollable-container {\n   469→                margin-bottom: -17px;\n   470→                padding-bottom: 17px;\n   471→            }\n   472→        }\n   473→        \n   474→        /* Pulsanti navigazione */\n   475→        .nav-button {\n   476→            position: absolute;\n   477→            top: 50%;\n   478→            transform: translateY(-50%);\n   479→            width: 48px;\n   480→            height: 48px;\n   481→            background: rgba(255, 255, 255, 0.95);\n   482→            border: 1px solid #ddd;\n   483→            border-radius: 50%;\n   484→            cursor: pointer;\n   485→            display: none;\n   486→            align-items: center;\n   487→            justify-content: center;\n   488→            z-index: 10;\n   489→            transition: all 0.3s ease;\n   490→            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n   491→            \n   492→            /* Assicura che sia sopra il contenuto */\n   493→            pointer-events: auto;\n   494→        }\n   495→        \n   496→        .nav-button {\n   497→            background: var(--e-global-color-primary);\n   498→        }\n   499→        \n   500→        .nav-button svg {\n   501→            width: 24px;\n   502→            height: 24px;\n   503→            color: #fff;\n   504→        }\n   505→        \n   506→        .nav-button:hover:not(:disabled) {\n   507→            background: var(--e-global-color-2de3d7d);\n   508→            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n   509→            transform: translateY(-50%) scale(1.1);\n   510→        }\n   511→        \n   512→        .nav-button:active {\n   513→            transform: translateY(-50%) scale(0.95);\n   514→        }\n   515→        \n   516→        .nav-button:hover:not(:disabled) {\n   517→            background: var(--e-global-color-2de3d7d);\n   518→            border-color: var(--e-global-color-2de3d7d);\n   519→        }\n   520→        \n   521→        .nav-button:active {\n   522→            transform: translateY(-50%) scale(0.95);\n   523→        }\n   524→        \n   525→        .nav-button:disabled {\n   526→            opacity: 0.3;\n   527→            cursor: not-allowed;\n   528→        }\n   529→        \n   530→        .nav-button:disabled:hover {\n   531→            transform: translateY(-50%);\n   532→        }\n   533→        \n   534→        .nav-button:focus {\n   535→            outline: 2px solid var(--e-global-color-primary, #0066cc);\n   536→            outline-offset: 2px;\n   537→        }\n   538→        \n   539→        .nav-prev {\n   540→            left: 10px;\n   541→        }\n   542→        \n   543→        .nav-next {\n   544→            right: 10px;\n   545→        }\n   546→        \n   547→        /* Mostra pulsanti su desktop */\n   548→        @media (min-width: 1024px) {\n   549→            .elementor-scroller-wrapper:hover .nav-button:not(:disabled) {\n   550→                display: flex;\n   551→            }\n   552→            \n   553→            .elementor-scroller-wrapper:focus-within .nav-button:not(:disabled) {\n   554→                display: flex;\n   555→            }\n   556→        }\n   557→        \n   558→        /* Progress bar sottile */\n   559→        .scroll-progress {\n   560→            position: absolute;\n   561→            bottom: 0;\n   562→            left: 0;\n   563→            height: 3px;\n   564→            background: var(--e-global-color-primary, #0066cc);\n   565→            transition: width 0.2s ease, opacity 0.3s ease;\n   566→            pointer-events: none;\n   567→            z-index: 5;\n   568→            opacity: 0;\n   569→            border-radius: 0 3px 3px 0;\n   570→        }\n   571→        \n   572→        /* Mostra progress bar su hover/focus */\n   573→        .elementor-scroller-wrapper:hover .scroll-progress,\n   574→        .elementor-scroller-wrapper:focus-within .scroll-progress {\n   575→            opacity: 0.7;\n   576→        }\n   577→        \n   578→        /* Non sovrascriviamo cursor - già impostato nel CSS esistente */\n   579→        \n   580→        /* Focus migliore - solo se non già presente */\n   581→        .scrollable-container:focus-visible {\n   582→            outline: 2px solid var(--e-global-color-primary, #0066cc);\n   583→            outline-offset: 2px;\n   584→        }\n   585→        \n   586→        /* Supporta la classe keyboard-scrolling esistente */\n   587→        .scrollable-container.keyboard-scrolling {\n   588→            scroll-behavior: smooth !important;\n   589→        }\n   590→        \n   591→        /* Screen reader only */\n   592→        .sr-only {\n   593→            position: absolute;\n   594→            width: 1px;\n   595→            height: 1px;\n   596→            padding: 0;\n   597→            margin: -1px;\n   598→            overflow: hidden;\n   599→            clip: rect(0,0,0,0);\n   600→            white-space: nowrap;\n   601→            border: 0;\n   602→        }\n   603→        \n   604→        /* Indicatori di pagina opzionali */\n   605→        .scroll-indicators {\n   606→            display: flex;\n   607→            justify-content: center;\n   608→            gap: 8px;\n   609→            margin-top: 16px;\n   610→            padding: 8px;\n   611→        }\n   612→        \n   613→        .scroll-indicator {\n   614→            width: 8px;\n   615→            height: 8px;\n   616→            border-radius: 50%;\n   617→            background: #ddd;\n   618→            transition: all 0.3s ease;\n   619→            cursor: pointer;\n   620→            border: none;\n   621→            padding: 0;\n   622→        }\n   623→        \n   624→        .scroll-indicator:hover {\n   625→            background: #999;\n   626→            transform: scale(1.2);\n   627→        }\n   628→        \n   629→        .scroll-indicator.active {\n   630→            background: var(--e-global-color-primary, #333);\n   631→            width: 24px;\n   632→            border-radius: 4px;\n   633→        }\n   634→        \n   635→        /* Supporto reduced motion */\n   636→        @media (prefers-reduced-motion: reduce) {\n   637→            * {\n   638→                animation-duration: 0.01ms !important;\n   639→                animation-iteration-count: 1 !important;\n   640→                transition-duration: 0.01ms !important;\n   641→            }\n   642→            \n   643→            .scrollable-container {\n   644→                scroll-behavior: auto !important;\n   645→            }\n   646→            \n   647→            .nav-button {\n   648→                transition: none !important;\n   649→            }\n   650→            \n   651→            .scroll-progress {\n   652→                transition: none !important;\n   653→            }\n   654→        }\n   655→        \n   656→        /* Migliora contrasto per accessibilità */\n   657→        @media (prefers-contrast: high) {\n   658→            .nav-button {\n   659→                background: #fff;\n   660→                border: 2px solid #000;\n   661→            }\n   662→            \n   663→            .nav-button:hover:not(:disabled) {\n   664→                background: #000;\n   665→                color: #fff;\n   666→            }\n   667→            \n   668→            .nav-button:hover:not(:disabled) svg {\n   669→                color: #fff;\n   670→            }\n   671→            \n   672→            .scroll-progress {\n   673→                background: #000;\n   674→            }\n   675→        }\n   676→        \n   677→        /* Dark mode support */\n   678→        @media (prefers-color-scheme: dark) {\n   679→            .nav-button {\n   680→                background: var(--e-global-color-primary);\n   681→                border-color: var(--e-global-color-primary);\n   682→            }\n   683→            \n   684→            .nav-button svg {\n   685→                color: #fff;\n   686→            }\n   687→            \n   688→            .nav-button:hover:not(:disabled) {\n   689→                background: var(--e-global-color-2de3d7d);\n   690→                border-color: var(--e-global-color-2de3d7d);\n   691→            }\n   692→            \n   693→            .scroll-indicator {\n   694→                background: #555;\n   695→            }\n   696→            \n   697→            .scroll-indicator:hover {\n   698→                background: #777;\n   699→            }\n   700→            \n   701→            .scroll-indicator.active {\n   702→                background: #fff;\n   703→            }\n   704→        }\n   705→    </style>\n   706→`;\n   707→\n   708→// Inizializzazione\n   709→function initImprovedScrollers() {\n   710→    // Inietta stili se non presenti\n   711→    if (!document.getElementById('improved-scroller-styles')) {\n   712→        document.head.insertAdjacentHTML('beforeend', improvedStyles);\n   713→    }\n   714→    \n   715→    // Trova tutti i container scrollabili\n   716→    const containers = document.querySelectorAll('.scrollable-container');\n   717→    \n   718→    containers.forEach(container => {\n   719→        // Skip se già inizializzato\n   720→        if (container.hasAttribute('data-improved-scroller')) return;\n   721→        \n   722→        // Inizializza solo se c'è overflow orizzontale\n   723→        if (container.scrollWidth > container.clientWidth) {\n   724→            new ImprovedElementorScroller(container);\n   725→            container.setAttribute('data-improved-scroller', 'true');\n   726→        }\n   727→    });\n   728→}\n   729→\n   730→// Inizializza quando DOM è pronto\n   731→if (document.readyState === 'loading') {\n   732→    document.addEventListener('DOMContentLoaded', initImprovedScrollers);\n   733→} else {\n   734→    initImprovedScrollers();\n   735→}\n   736→\n   737→// Hook per Elementor\n   738→if (typeof jQuery !== 'undefined') {\n   739→    jQuery(window).on('elementor/frontend/init', function() {\n   740→        if (window.elementorFrontend && window.elementorFrontend.hooks) {\n   741→            elementorFrontend.hooks.addAction('frontend/element_ready/widget', function() {\n   742→                setTimeout(initImprovedScrollers, 100);\n   743→            });\n   744→        }\n   745→    });\n   746→} else {\n   747→    // Fallback observer per contenuti dinamici\n   748→    const observer = new MutationObserver(() => {\n   749→        initImprovedScrollers();\n   750→    });\n   751→    \n   752→    observer.observe(document.body, {\n   753→        childList: true,\n   754→        subtree: true\n   755→    });\n   756→}\n   757→\n   758→// Re-inizializza su resize\n   759→let resizeTimeout;\n   760→window.addEventListener('resize', () => {\n   761→    clearTimeout(resizeTimeout);\n   762→    resizeTimeout = setTimeout(initImprovedScrollers, 250);\n   763→});\n   764→\n   765→console.log('Improved Elementor Scroller v2.0 loaded');"}]},"uuid":"bdb1ee64-2bb8-41ad-a059-32a121d71ac1","timestamp":"2025-07-29T07:07:32.971Z","toolUseResult":{"filePath":"/Users/disconnesso/Sites/villastuart.it/wp-content/themes/hello-villa-stuart/assets/js/improved-scroller.js","oldString":"/**\n * Slider Orizzontale Migliorato per Elementor\n * Versione 2.0 - Ottimizzato per Desktop con Accessibilità\n */\n\n// Classe principale per gestire lo slider\nclass ImprovedElementorScroller {\n    constructor(container) {\n        this.container = container;\n        this.wrapper = null;\n        this.isScrolling = false;\n        this.scrollTimeout = null;\n        \n        // Feature detection\n        this.supportsPassive = this.checkPassiveSupport();\n        this.supportsScrollBehavior = 'scrollBehavior' in document.documentElement.style;\n        \n        // Inizializza\n        this.init();\n    }\n    \n    // Check supporto passive listeners\n    checkPassiveSupport() {\n        let supportsPassive = false;\n        try {\n            const opts = Object.defineProperty({}, 'passive', {\n                get: () => { supportsPassive = true; }\n            });\n            window.addEventListener('testPassive', null, opts);\n            window.removeEventListener('testPassive', null, opts);\n        } catch (e) {}\n        return supportsPassive;\n    }\n    \n    init() {\n        // Crea wrapper per aggiungere controlli senza modificare HTML\n        this.wrapContainer();\n        \n        // Setup features\n        this.setupNavButtons();\n        this.setupKeyboard();\n        this.setupMouseWheel();\n        this.setupTouch();\n        this.setupScrollIndicator();\n        this.setupAccessibility();\n        \n        // Aggiorna stato iniziale\n        this.updateUI();\n    }\n    \n    // Wrap container esistente per aggiungere controlli\n    wrapContainer() {\n        // Se già wrappato, esci\n        if (this.container.parentElement.classList.contains('elementor-scroller-wrapper')) {\n            this.wrapper = this.container.parentElement;\n            return;\n        }\n        \n        // Crea wrapper\n        this.wrapper = document.createElement('div');\n        this.wrapper.className = 'elementor-scroller-wrapper';\n        this.wrapper.style.position = 'relative';\n        \n        // Inserisci wrapper\n        this.container.parentNode.insertBefore(this.wrapper, this.container);\n        this.wrapper.appendChild(this.container);\n    }\n    \n    // Setup pulsanti navigazione\n    setupNavButtons() {\n        // Crea pulsanti solo se non esistono\n        if (!this.wrapper.querySelector('.nav-button')) {\n            // Pulsante precedente\n            const prevButton = document.createElement('button');\n            prevButton.className = 'nav-button nav-prev';\n            prevButton.innerHTML = `\n                <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                    <path d=\"M15 18l-6-6 6-6\"/>\n                </svg>\n            `;\n            prevButton.setAttribute('aria-label', 'Scorri a sinistra');\n            prevButton.addEventListener('click', () => this.scrollPrev());\n            \n            // Pulsante successivo\n            const nextButton = document.createElement('button');\n            nextButton.className = 'nav-button nav-next';\n            nextButton.innerHTML = `\n                <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                    <path d=\"M9 18l6-6-6-6\"/>\n                </svg>\n            `;\n            nextButton.setAttribute('aria-label', 'Scorri a destra');\n            nextButton.addEventListener('click', () => this.scrollNext());\n            \n            // Aggiungi al wrapper\n            this.wrapper.appendChild(prevButton);\n            this.wrapper.appendChild(nextButton);\n            \n            // Store references\n            this.prevButton = prevButton;\n            this.nextButton = nextButton;\n        }\n    }\n    \n    // Setup tastiera migliorato\n    setupKeyboard() {\n        this.container.addEventListener('keydown', (e) => {\n            const scrollAmount = this.container.clientWidth * 0.8;\n            let handled = true;\n            \n            // Aggiungi classe per smooth scroll da tastiera\n            this.container.classList.add('keyboard-scrolling');\n            \n            switch(e.key) {\n                case 'ArrowLeft':\n                    this.smoothScroll(-scrollAmount);\n                    break;\n                case 'ArrowRight':\n                    this.smoothScroll(scrollAmount);\n                    break;\n                case 'Home':\n                    this.scrollToStart();\n                    break;\n                case 'End':\n                    this.scrollToEnd();\n                    break;\n                default:\n                    handled = false;\n            }\n            \n            if (handled) {\n                e.preventDefault();\n                // Rimuovi classe dopo animazione\n                setTimeout(() => {\n                    this.container.classList.remove('keyboard-scrolling');\n                }, 400);\n            } else {\n                this.container.classList.remove('keyboard-scrolling');\n            }\n        });\n    }\n    \n    // Setup mouse wheel - MIGLIORAMENTO CHIAVE\n    setupMouseWheel() {\n        let accumulatedDelta = 0;\n        let wheelTimeout;\n        \n        const wheelHandler = (e) => {\n            // Solo se container è in hover o focus\n            if (!this.container.matches(':hover, :focus-within')) return;\n            \n            e.preventDefault();\n            \n            // Accumula piccoli delta per scroll più fluido\n            accumulatedDelta += e.deltaY;\n            \n            clearTimeout(wheelTimeout);\n            wheelTimeout = setTimeout(() => {\n                if (Math.abs(accumulatedDelta) > 10) {\n                    // Normalizza e applica scroll\n                    const scrollAmount = Math.sign(accumulatedDelta) * Math.min(Math.abs(accumulatedDelta), 300);\n                    this.smoothScroll(scrollAmount);\n                }\n                accumulatedDelta = 0;\n            }, 50);\n        };\n        \n        // Aggiungi listener con passive false\n        this.container.addEventListener('wheel', wheelHandler, \n            this.supportsPassive ? { passive: false } : false\n        );\n    }\n    \n    // Setup touch con momentum migliorato\n    setupTouch() {\n        let startX = 0;\n        let scrollLeft = 0;\n        let isDragging = false;\n        let animationId = null;\n        let velocity = 0;\n        let lastX = 0;\n        let lastTime = 0;\n        \n        const startDragging = (pageX) => {\n            isDragging = true;\n            startX = pageX;\n            lastX = pageX;\n            scrollLeft = this.container.scrollLeft;\n            lastTime = Date.now();\n            velocity = 0;\n            \n            // Cancella animazioni\n            if (animationId) {\n                cancelAnimationFrame(animationId);\n            }\n            \n            // La classe 'active' è già nel CSS esistente per cursor grabbing\n            this.container.classList.add('active');\n        };\n        \n        const drag = (pageX) => {\n            if (!isDragging) return;\n            \n            const currentTime = Date.now();\n            const timeDelta = currentTime - lastTime;\n            const distance = pageX - lastX;\n            \n            // Calcola velocità\n            if (timeDelta > 0) {\n                velocity = distance / timeDelta * 16; // Normalizza a 60fps\n            }\n            \n            const walk = (pageX - startX) * 1.5;\n            this.container.scrollLeft = scrollLeft - walk;\n            \n            lastX = pageX;\n            lastTime = currentTime;\n        };\n        \n        const stopDragging = () => {\n            if (!isDragging) return;\n            \n            isDragging = false;\n            this.container.classList.remove('active');\n            \n            // Applica momentum se c'è velocità\n            if (Math.abs(velocity) > 2) {\n                const deceleration = 0.95;\n                \n                const animate = () => {\n                    if (Math.abs(velocity) > 0.5) {\n                        this.container.scrollLeft -= velocity;\n                        velocity *= deceleration;\n                        animationId = requestAnimationFrame(animate);\n                    } else {\n                        this.updateUI();\n                    }\n                };\n                \n                animate();\n            } else {\n                this.updateUI();\n            }\n        };\n        \n        // Mouse events\n        this.container.addEventListener('mousedown', (e) => {\n            startDragging(e.pageX);\n        });\n        \n        document.addEventListener('mousemove', (e) => {\n            drag(e.pageX);\n        });\n        \n        document.addEventListener('mouseup', stopDragging);\n        \n        // Touch events\n        this.container.addEventListener('touchstart', (e) => {\n            startDragging(e.touches[0].pageX);\n        }, this.supportsPassive ? { passive: true } : false);\n        \n        this.container.addEventListener('touchmove', (e) => {\n            drag(e.touches[0].pageX);\n        }, this.supportsPassive ? { passive: true } : false);\n        \n        this.container.addEventListener('touchend', stopDragging);\n        this.container.addEventListener('touchcancel', stopDragging);\n    }\n    \n    // Setup indicatore di scroll\n    setupScrollIndicator() {\n        // Crea progress bar solo se non nascosta da design\n        if (!this.wrapper.classList.contains('hide-progress')) {\n            const progressBar = document.createElement('div');\n            progressBar.className = 'scroll-progress';\n            progressBar.setAttribute('role', 'progressbar');\n            progressBar.setAttribute('aria-label', 'Progresso scroll');\n            progressBar.setAttribute('aria-valuemin', '0');\n            progressBar.setAttribute('aria-valuemax', '100');\n            \n            this.wrapper.appendChild(progressBar);\n            this.progressBar = progressBar;\n        }\n        \n        // Aggiorna su scroll\n        let ticking = false;\n        this.container.addEventListener('scroll', () => {\n            if (!ticking) {\n                requestAnimationFrame(() => {\n                    this.updateUI();\n                    ticking = false;\n                });\n                ticking = true;\n            }\n        }, this.supportsPassive ? { passive: true } : false);\n    }\n    \n    // Setup accessibilità\n    setupAccessibility() {\n        // ARIA labels\n        this.container.setAttribute('role', 'region');\n        this.container.setAttribute('aria-label', 'Contenuti scrollabili orizzontalmente');\n        \n        // Live region per annunci\n        const liveRegion = document.createElement('div');\n        liveRegion.className = 'sr-only';\n        liveRegion.setAttribute('role', 'status');\n        liveRegion.setAttribute('aria-live', 'polite');\n        liveRegion.setAttribute('aria-atomic', 'true');\n        liveRegion.style.cssText = `\n            position: absolute;\n            width: 1px;\n            height: 1px;\n            padding: 0;\n            margin: -1px;\n            overflow: hidden;\n            clip: rect(0,0,0,0);\n            white-space: nowrap;\n            border: 0;\n        `;\n        \n        this.wrapper.appendChild(liveRegion);\n        this.liveRegion = liveRegion;\n    }\n    \n    // Scroll fluido\n    smoothScroll(distance) {\n        if (this.supportsScrollBehavior) {\n            this.container.scrollBy({\n                left: distance,\n                behavior: 'smooth'\n            });\n        } else {\n            // Fallback animato\n            this.animateScroll(this.container.scrollLeft + distance);\n        }\n    }\n    \n    // Animazione scroll per fallback\n    animateScroll(target) {\n        const start = this.container.scrollLeft;\n        const distance = target - start;\n        const duration = 300;\n        let startTime = null;\n        \n        const animation = (currentTime) => {\n            if (!startTime) startTime = currentTime;\n            const elapsed = currentTime - startTime;\n            const progress = Math.min(elapsed / duration, 1);\n            \n            // Easing\n            const easeInOutQuad = progress < 0.5\n                ? 2 * progress * progress\n                : 1 - Math.pow(-2 * progress + 2, 2) / 2;\n            \n            this.container.scrollLeft = start + distance * easeInOutQuad;\n            \n            if (progress < 1) {\n                requestAnimationFrame(animation);\n            } else {\n                this.updateUI();\n            }\n        };\n        \n        requestAnimationFrame(animation);\n    }\n    \n    // Metodi di navigazione\n    scrollPrev() {\n        const scrollAmount = this.container.clientWidth * 0.8;\n        this.smoothScroll(-scrollAmount);\n        this.announce('Scorrimento a sinistra');\n    }\n    \n    scrollNext() {\n        const scrollAmount = this.container.clientWidth * 0.8;\n        this.smoothScroll(scrollAmount);\n        this.announce('Scorrimento a destra');\n    }\n    \n    scrollToStart() {\n        this.container.scrollTo({\n            left: 0,\n            behavior: this.supportsScrollBehavior ? 'smooth' : 'auto'\n        });\n        this.announce('Inizio dei contenuti');\n    }\n    \n    scrollToEnd() {\n        const maxScroll = this.container.scrollWidth - this.container.clientWidth;\n        this.container.scrollTo({\n            left: maxScroll,\n            behavior: this.supportsScrollBehavior ? 'smooth' : 'auto'\n        });\n        this.announce('Fine dei contenuti');\n    }\n    \n    // Aggiorna UI\n    updateUI() {\n        const scrollLeft = this.container.scrollLeft;\n        const maxScroll = this.container.scrollWidth - this.container.clientWidth;\n        \n        // Aggiorna pulsanti\n        if (this.prevButton && this.nextButton) {\n            this.prevButton.disabled = scrollLeft <= 0;\n            this.nextButton.disabled = scrollLeft >= maxScroll - 1;\n            \n            // Aggiorna ARIA\n            this.prevButton.setAttribute('aria-disabled', scrollLeft <= 0);\n            this.nextButton.setAttribute('aria-disabled', scrollLeft >= maxScroll - 1);\n        }\n        \n        // Aggiorna progress bar\n        if (this.progressBar && maxScroll > 0) {\n            const progress = (scrollLeft / maxScroll) * 100;\n            this.progressBar.style.width = `${progress}%`;\n            this.progressBar.setAttribute('aria-valuenow', Math.round(progress));\n        }\n    }\n    \n    // Annuncia a screen reader\n    announce(message) {\n        if (this.liveRegion) {\n            this.liveRegion.textContent = message;\n            // Reset dopo annuncio\n            setTimeout(() => {\n                this.liveRegion.textContent = '';\n            }, 1000);\n        }\n    }\n}\n\n// CSS da iniettare - Adattato per CSS Elementor esistente\nconst improvedStyles = `\n    <style id=\"improved-scroller-styles\">\n        /* Wrapper styles */\n        .elementor-scroller-wrapper {\n            position: relative;\n        }\n        \n        /* Non sovrascriviamo gli stili scrollbar - già nascosta nel CSS esistente */\n        \n        /* Pulsanti navigazione */\n        .nav-button {\n            position: absolute;\n            top: 50%;\n            transform: translateY(-50%);\n            width: 48px;\n            height: 48px;\n            background: rgba(255, 255, 255, 0.95);\n            border: 1px solid #ddd;\n            border-radius: 50%;\n            cursor: pointer;\n            display: none;\n            align-items: center;\n            justify-content: center;\n            z-index: 10;\n            transition: all 0.3s ease;\n            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n            \n            /* Assicura che sia sopra il contenuto */\n            pointer-events: auto;\n        }\n        \n        .nav-button {\n            background: var(--e-global-color-primary);\n        }\n        \n        .nav-button svg {\n            width: 24px;\n            height: 24px;\n            color: #fff;\n        }\n        \n        .nav-button:hover:not(:disabled) {\n            background: var(--e-global-color-2de3d7d);\n            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n            transform: translateY(-50%) scale(1.1);\n        }\n        \n        .nav-button:active {\n            transform: translateY(-50%) scale(0.95);\n        }\n        \n        .nav-button:hover:not(:disabled) {\n            background: var(--e-global-color-2de3d7d);\n            border-color: var(--e-global-color-2de3d7d);\n        }\n        \n        .nav-button:active {\n            transform: translateY(-50%) scale(0.95);\n        }\n        \n        .nav-button:disabled {\n            opacity: 0.3;\n            cursor: not-allowed;\n        }\n        \n        .nav-button:disabled:hover {\n            transform: translateY(-50%);\n        }\n        \n        .nav-button:focus {\n            outline: 2px solid var(--e-global-color-primary, #0066cc);\n            outline-offset: 2px;\n        }\n        \n        .nav-prev {\n            left: 10px;\n        }\n        \n        .nav-next {\n            right: 10px;\n        }\n        \n        /* Mostra pulsanti su desktop */\n        @media (min-width: 1024px) {\n            .elementor-scroller-wrapper:hover .nav-button:not(:disabled) {\n                display: flex;\n            }\n            \n            .elementor-scroller-wrapper:focus-within .nav-button:not(:disabled) {\n                display: flex;\n            }\n        }\n        \n        /* Progress bar sottile */\n        .scroll-progress {\n            position: absolute;\n            bottom: 0;\n            left: 0;\n            height: 3px;\n            background: var(--e-global-color-primary, #0066cc);\n            transition: width 0.2s ease, opacity 0.3s ease;\n            pointer-events: none;\n            z-index: 5;\n            opacity: 0;\n            border-radius: 0 3px 3px 0;\n        }\n        \n        /* Mostra progress bar su hover/focus */\n        .elementor-scroller-wrapper:hover .scroll-progress,\n        .elementor-scroller-wrapper:focus-within .scroll-progress {\n            opacity: 0.7;\n        }\n        \n        /* Non sovrascriviamo cursor - già impostato nel CSS esistente */\n        \n        /* Focus migliore - solo se non già presente */\n        .scrollable-container:focus-visible {\n            outline: 2px solid var(--e-global-color-primary, #0066cc);\n            outline-offset: 2px;\n        }\n        \n        /* Supporta la classe keyboard-scrolling esistente */\n        .scrollable-container.keyboard-scrolling {\n            scroll-behavior: smooth !important;\n        }\n        \n        /* Screen reader only */\n        .sr-only {\n            position: absolute;\n            width: 1px;\n            height: 1px;\n            padding: 0;\n            margin: -1px;\n            overflow: hidden;\n            clip: rect(0,0,0,0);\n            white-space: nowrap;\n            border: 0;\n        }\n        \n        /* Indicatori di pagina opzionali */\n        .scroll-indicators {\n            display: flex;\n            justify-content: center;\n            gap: 8px;\n            margin-top: 16px;\n            padding: 8px;\n        }\n        \n        .scroll-indicator {\n            width: 8px;\n            height: 8px;\n            border-radius: 50%;\n            background: #ddd;\n            transition: all 0.3s ease;\n            cursor: pointer;\n            border: none;\n            padding: 0;\n        }\n        \n        .scroll-indicator:hover {\n            background: #999;\n            transform: scale(1.2);\n        }\n        \n        .scroll-indicator.active {\n            background: var(--e-global-color-primary, #333);\n            width: 24px;\n            border-radius: 4px;\n        }\n        \n        /* Supporto reduced motion */\n        @media (prefers-reduced-motion: reduce) {\n            * {\n                animation-duration: 0.01ms !important;\n                animation-iteration-count: 1 !important;\n                transition-duration: 0.01ms !important;\n            }\n            \n            .scrollable-container {\n                scroll-behavior: auto !important;\n            }\n            \n            .nav-button {\n                transition: none !important;\n            }\n            \n            .scroll-progress {\n                transition: none !important;\n            }\n        }\n        \n        /* Migliora contrasto per accessibilità */\n        @media (prefers-contrast: high) {\n            .nav-button {\n                background: #fff;\n                border: 2px solid #000;\n            }\n            \n            .nav-button:hover:not(:disabled) {\n                background: #000;\n                color: #fff;\n            }\n            \n            .nav-button:hover:not(:disabled) svg {\n                color: #fff;\n            }\n            \n            .scroll-progress {\n                background: #000;\n            }\n        }\n        \n        /* Dark mode support */\n        @media (prefers-color-scheme: dark) {\n            .nav-button {\n                background: var(--e-global-color-primary);\n                border-color: var(--e-global-color-primary);\n            }\n            \n            .nav-button svg {\n                color: #fff;\n            }\n            \n            .nav-button:hover:not(:disabled) {\n                background: var(--e-global-color-2de3d7d);\n                border-color: var(--e-global-color-2de3d7d);\n            }\n            \n            .scroll-indicator {\n                background: #555;\n            }\n            \n            .scroll-indicator:hover {\n                background: #777;\n            }\n            \n            .scroll-indicator.active {\n                background: #fff;\n            }\n        }\n    </style>\n`;\n\n// Inizializzazione\nfunction initImprovedScrollers() {\n    // Inietta stili se non presenti\n    if (!document.getElementById('improved-scroller-styles')) {\n        document.head.insertAdjacentHTML('beforeend', improvedStyles);\n    }\n    \n    // Trova tutti i container scrollabili\n    const containers = document.querySelectorAll('.scrollable-container');\n    \n    containers.forEach(container => {\n        // Skip se già inizializzato\n        if (container.hasAttribute('data-improved-scroller')) return;\n        \n        // Inizializza solo se c'è overflow orizzontale\n        if (container.scrollWidth > container.clientWidth) {\n            new ImprovedElementorScroller(container);\n            container.setAttribute('data-improved-scroller', 'true');\n        }\n    });\n}\n\n// Inizializza quando DOM è pronto\nif (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', initImprovedScrollers);\n} else {\n    initImprovedScrollers();\n}\n\n// Hook per Elementor\nif (typeof jQuery !== 'undefined') {\n    jQuery(window).on('elementor/frontend/init', function() {\n        if (window.elementorFrontend && window.elementorFrontend.hooks) {\n            elementorFrontend.hooks.addAction('frontend/element_ready/widget', function() {\n                setTimeout(initImprovedScrollers, 100);\n            });\n        }\n    });\n} else {\n    // Fallback observer per contenuti dinamici\n    const observer = new MutationObserver(() => {\n        initImprovedScrollers();\n    });\n    \n    observer.observe(document.body, {\n        childList: true,\n        subtree: true\n    });\n}\n\n// Re-inizializza su resize\nlet resizeTimeout;\nwindow.addEventListener('resize', () => {\n    clearTimeout(resizeTimeout);\n    resizeTimeout = setTimeout(initImprovedScrollers, 250);\n});\n\nconsole.log('Improved Elementor Scroller v2.0 loaded');","newString":"/**\n * Slider Orizzontale Migliorato per Elementor\n * Versione 2.0 - Ottimizzato per Desktop con Accessibilità\n */\n\n// Classe principale per gestire lo slider\nclass ImprovedElementorScroller {\n    constructor(container) {\n        this.container = container;\n        this.wrapper = null;\n        this.isScrolling = false;\n        this.scrollTimeout = null;\n        \n        // Feature detection\n        this.supportsPassive = this.checkPassiveSupport();\n        this.supportsScrollBehavior = 'scrollBehavior' in document.documentElement.style;\n        \n        // Inizializza\n        this.init();\n    }\n    \n    // Check supporto passive listeners\n    checkPassiveSupport() {\n        let supportsPassive = false;\n        try {\n            const opts = Object.defineProperty({}, 'passive', {\n                get: () => { supportsPassive = true; }\n            });\n            window.addEventListener('testPassive', null, opts);\n            window.removeEventListener('testPassive', null, opts);\n        } catch (e) {}\n        return supportsPassive;\n    }\n    \n    init() {\n        // Crea wrapper per aggiungere controlli senza modificare HTML\n        this.wrapContainer();\n        \n        // Setup features\n        this.setupNavButtons();\n        this.setupKeyboard();\n        this.setupMouseWheel();\n        this.setupTouch();\n        this.setupScrollIndicator();\n        this.setupAccessibility();\n        \n        // Aggiorna stato iniziale\n        this.updateUI();\n    }\n    \n    // Wrap container esistente per aggiungere controlli\n    wrapContainer() {\n        // Se già wrappato, esci\n        if (this.container.parentElement.classList.contains('elementor-scroller-wrapper')) {\n            this.wrapper = this.container.parentElement;\n            return;\n        }\n        \n        // Crea wrapper\n        this.wrapper = document.createElement('div');\n        this.wrapper.className = 'elementor-scroller-wrapper';\n        this.wrapper.style.position = 'relative';\n        \n        // Inserisci wrapper\n        this.container.parentNode.insertBefore(this.wrapper, this.container);\n        this.wrapper.appendChild(this.container);\n    }\n    \n    // Setup pulsanti navigazione\n    setupNavButtons() {\n        // Crea pulsanti solo se non esistono\n        if (!this.wrapper.querySelector('.nav-button')) {\n            // Pulsante precedente\n            const prevButton = document.createElement('button');\n            prevButton.className = 'nav-button nav-prev';\n            prevButton.innerHTML = `\n                <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                    <path d=\"M15 18l-6-6 6-6\"/>\n                </svg>\n            `;\n            prevButton.setAttribute('aria-label', 'Scorri a sinistra');\n            prevButton.addEventListener('click', () => this.scrollPrev());\n            \n            // Pulsante successivo\n            const nextButton = document.createElement('button');\n            nextButton.className = 'nav-button nav-next';\n            nextButton.innerHTML = `\n                <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                    <path d=\"M9 18l6-6-6-6\"/>\n                </svg>\n            `;\n            nextButton.setAttribute('aria-label', 'Scorri a destra');\n            nextButton.addEventListener('click', () => this.scrollNext());\n            \n            // Aggiungi al wrapper\n            this.wrapper.appendChild(prevButton);\n            this.wrapper.appendChild(nextButton);\n            \n            // Store references\n            this.prevButton = prevButton;\n            this.nextButton = nextButton;\n        }\n    }\n    \n    // Setup tastiera migliorato\n    setupKeyboard() {\n        this.container.addEventListener('keydown', (e) => {\n            const scrollAmount = this.container.clientWidth * 0.8;\n            let handled = true;\n            \n            // Aggiungi classe per smooth scroll da tastiera\n            this.container.classList.add('keyboard-scrolling');\n            \n            switch(e.key) {\n                case 'ArrowLeft':\n                    this.smoothScroll(-scrollAmount);\n                    break;\n                case 'ArrowRight':\n                    this.smoothScroll(scrollAmount);\n                    break;\n                case 'Home':\n                    this.scrollToStart();\n                    break;\n                case 'End':\n                    this.scrollToEnd();\n                    break;\n                default:\n                    handled = false;\n            }\n            \n            if (handled) {\n                e.preventDefault();\n                // Rimuovi classe dopo animazione\n                setTimeout(() => {\n                    this.container.classList.remove('keyboard-scrolling');\n                }, 400);\n            } else {\n                this.container.classList.remove('keyboard-scrolling');\n            }\n        });\n    }\n    \n    // Setup mouse wheel - MIGLIORAMENTO CHIAVE\n    setupMouseWheel() {\n        let accumulatedDelta = 0;\n        let wheelTimeout;\n        \n        const wheelHandler = (e) => {\n            // Solo se container è in hover o focus\n            if (!this.container.matches(':hover, :focus-within')) return;\n            \n            e.preventDefault();\n            \n            // Accumula piccoli delta per scroll più fluido\n            accumulatedDelta += e.deltaY;\n            \n            clearTimeout(wheelTimeout);\n            wheelTimeout = setTimeout(() => {\n                if (Math.abs(accumulatedDelta) > 10) {\n                    // Normalizza e applica scroll\n                    const scrollAmount = Math.sign(accumulatedDelta) * Math.min(Math.abs(accumulatedDelta), 300);\n                    this.smoothScroll(scrollAmount);\n                }\n                accumulatedDelta = 0;\n            }, 50);\n        };\n        \n        // Aggiungi listener con passive false\n        this.container.addEventListener('wheel', wheelHandler, \n            this.supportsPassive ? { passive: false } : false\n        );\n    }\n    \n    // Setup touch con momentum migliorato\n    setupTouch() {\n        let startX = 0;\n        let scrollLeft = 0;\n        let isDragging = false;\n        let animationId = null;\n        let velocity = 0;\n        let lastX = 0;\n        let lastTime = 0;\n        \n        const startDragging = (pageX) => {\n            isDragging = true;\n            startX = pageX;\n            lastX = pageX;\n            scrollLeft = this.container.scrollLeft;\n            lastTime = Date.now();\n            velocity = 0;\n            \n            // Cancella animazioni\n            if (animationId) {\n                cancelAnimationFrame(animationId);\n            }\n            \n            // La classe 'active' è già nel CSS esistente per cursor grabbing\n            this.container.classList.add('active');\n        };\n        \n        const drag = (pageX) => {\n            if (!isDragging) return;\n            \n            const currentTime = Date.now();\n            const timeDelta = currentTime - lastTime;\n            const distance = pageX - lastX;\n            \n            // Calcola velocità\n            if (timeDelta > 0) {\n                velocity = distance / timeDelta * 16; // Normalizza a 60fps\n            }\n            \n            const walk = (pageX - startX) * 1.5;\n            this.container.scrollLeft = scrollLeft - walk;\n            \n            lastX = pageX;\n            lastTime = currentTime;\n        };\n        \n        const stopDragging = () => {\n            if (!isDragging) return;\n            \n            isDragging = false;\n            this.container.classList.remove('active');\n            \n            // Applica momentum se c'è velocità\n            if (Math.abs(velocity) > 2) {\n                const deceleration = 0.95;\n                \n                const animate = () => {\n                    if (Math.abs(velocity) > 0.5) {\n                        this.container.scrollLeft -= velocity;\n                        velocity *= deceleration;\n                        animationId = requestAnimationFrame(animate);\n                    } else {\n                        this.updateUI();\n                    }\n                };\n                \n                animate();\n            } else {\n                this.updateUI();\n            }\n        };\n        \n        // Mouse events\n        this.container.addEventListener('mousedown', (e) => {\n            startDragging(e.pageX);\n        });\n        \n        document.addEventListener('mousemove', (e) => {\n            drag(e.pageX);\n        });\n        \n        document.addEventListener('mouseup', stopDragging);\n        \n        // Touch events\n        this.container.addEventListener('touchstart', (e) => {\n            startDragging(e.touches[0].pageX);\n        }, this.supportsPassive ? { passive: true } : false);\n        \n        this.container.addEventListener('touchmove', (e) => {\n            drag(e.touches[0].pageX);\n        }, this.supportsPassive ? { passive: true } : false);\n        \n        this.container.addEventListener('touchend', stopDragging);\n        this.container.addEventListener('touchcancel', stopDragging);\n    }\n    \n    // Setup indicatore di scroll\n    setupScrollIndicator() {\n        // Crea progress bar solo se non nascosta da design\n        if (!this.wrapper.classList.contains('hide-progress')) {\n            const progressBar = document.createElement('div');\n            progressBar.className = 'scroll-progress';\n            progressBar.setAttribute('role', 'progressbar');\n            progressBar.setAttribute('aria-label', 'Progresso scroll');\n            progressBar.setAttribute('aria-valuemin', '0');\n            progressBar.setAttribute('aria-valuemax', '100');\n            \n            this.wrapper.appendChild(progressBar);\n            this.progressBar = progressBar;\n        }\n        \n        // Aggiorna su scroll\n        let ticking = false;\n        this.container.addEventListener('scroll', () => {\n            if (!ticking) {\n                requestAnimationFrame(() => {\n                    this.updateUI();\n                    ticking = false;\n                });\n                ticking = true;\n            }\n        }, this.supportsPassive ? { passive: true } : false);\n    }\n    \n    // Setup accessibilità\n    setupAccessibility() {\n        // ARIA labels\n        this.container.setAttribute('role', 'region');\n        this.container.setAttribute('aria-label', 'Contenuti scrollabili orizzontalmente');\n        \n        // Live region per annunci\n        const liveRegion = document.createElement('div');\n        liveRegion.className = 'sr-only';\n        liveRegion.setAttribute('role', 'status');\n        liveRegion.setAttribute('aria-live', 'polite');\n        liveRegion.setAttribute('aria-atomic', 'true');\n        liveRegion.style.cssText = `\n            position: absolute;\n            width: 1px;\n            height: 1px;\n            padding: 0;\n            margin: -1px;\n            overflow: hidden;\n            clip: rect(0,0,0,0);\n            white-space: nowrap;\n            border: 0;\n        `;\n        \n        this.wrapper.appendChild(liveRegion);\n        this.liveRegion = liveRegion;\n    }\n    \n    // Scroll fluido\n    smoothScroll(distance) {\n        if (this.supportsScrollBehavior) {\n            this.container.scrollBy({\n                left: distance,\n                behavior: 'smooth'\n            });\n        } else {\n            // Fallback animato\n            this.animateScroll(this.container.scrollLeft + distance);\n        }\n    }\n    \n    // Animazione scroll per fallback\n    animateScroll(target) {\n        const start = this.container.scrollLeft;\n        const distance = target - start;\n        const duration = 300;\n        let startTime = null;\n        \n        const animation = (currentTime) => {\n            if (!startTime) startTime = currentTime;\n            const elapsed = currentTime - startTime;\n            const progress = Math.min(elapsed / duration, 1);\n            \n            // Easing\n            const easeInOutQuad = progress < 0.5\n                ? 2 * progress * progress\n                : 1 - Math.pow(-2 * progress + 2, 2) / 2;\n            \n            this.container.scrollLeft = start + distance * easeInOutQuad;\n            \n            if (progress < 1) {\n                requestAnimationFrame(animation);\n            } else {\n                this.updateUI();\n            }\n        };\n        \n        requestAnimationFrame(animation);\n    }\n    \n    // Metodi di navigazione\n    scrollPrev() {\n        const scrollAmount = this.container.clientWidth * 0.8;\n        this.smoothScroll(-scrollAmount);\n        this.announce('Scorrimento a sinistra');\n    }\n    \n    scrollNext() {\n        const scrollAmount = this.container.clientWidth * 0.8;\n        this.smoothScroll(scrollAmount);\n        this.announce('Scorrimento a destra');\n    }\n    \n    scrollToStart() {\n        this.container.scrollTo({\n            left: 0,\n            behavior: this.supportsScrollBehavior ? 'smooth' : 'auto'\n        });\n        this.announce('Inizio dei contenuti');\n    }\n    \n    scrollToEnd() {\n        const maxScroll = this.container.scrollWidth - this.container.clientWidth;\n        this.container.scrollTo({\n            left: maxScroll,\n            behavior: this.supportsScrollBehavior ? 'smooth' : 'auto'\n        });\n        this.announce('Fine dei contenuti');\n    }\n    \n    // Aggiorna UI\n    updateUI() {\n        const scrollLeft = this.container.scrollLeft;\n        const maxScroll = this.container.scrollWidth - this.container.clientWidth;\n        \n        // Aggiorna pulsanti\n        if (this.prevButton && this.nextButton) {\n            this.prevButton.disabled = scrollLeft <= 0;\n            this.nextButton.disabled = scrollLeft >= maxScroll - 1;\n            \n            // Aggiorna ARIA\n            this.prevButton.setAttribute('aria-disabled', scrollLeft <= 0);\n            this.nextButton.setAttribute('aria-disabled', scrollLeft >= maxScroll - 1);\n        }\n        \n        // Aggiorna progress bar\n        if (this.progressBar && maxScroll > 0) {\n            const progress = (scrollLeft / maxScroll) * 100;\n            this.progressBar.style.width = `${progress}%`;\n            this.progressBar.setAttribute('aria-valuenow', Math.round(progress));\n        }\n    }\n    \n    // Annuncia a screen reader\n    announce(message) {\n        if (this.liveRegion) {\n            this.liveRegion.textContent = message;\n            // Reset dopo annuncio\n            setTimeout(() => {\n                this.liveRegion.textContent = '';\n            }, 1000);\n        }\n    }\n}\n\n// CSS da iniettare - Adattato per CSS Elementor esistente\nconst improvedStyles = `\n    <style id=\"improved-scroller-styles\">\n        /* Wrapper styles */\n        .elementor-scroller-wrapper {\n            position: relative;\n        }\n        \n        /* Nasconde scrollbar orizzontale su desktop mantenendo lo scroll */\n        .scrollable-container {\n            /* Firefox */\n            scrollbar-width: none;\n            \n            /* IE 10+ */\n            -ms-overflow-style: none;\n        }\n        \n        /* Chrome, Safari, Opera, Edge */\n        .scrollable-container::-webkit-scrollbar {\n            width: 0 !important;\n            height: 0 !important;\n            display: none;\n        }\n        \n        .scrollable-container::-webkit-scrollbar-track {\n            background: transparent;\n        }\n        \n        .scrollable-container::-webkit-scrollbar-thumb {\n            background: transparent;\n            border: none;\n        }\n        \n        /* Supporto per browser più vecchi */\n        @supports not (scrollbar-width: none) {\n            .scrollable-container {\n                margin-bottom: -17px;\n                padding-bottom: 17px;\n            }\n        }\n        \n        /* Pulsanti navigazione */\n        .nav-button {\n            position: absolute;\n            top: 50%;\n            transform: translateY(-50%);\n            width: 48px;\n            height: 48px;\n            background: rgba(255, 255, 255, 0.95);\n            border: 1px solid #ddd;\n            border-radius: 50%;\n            cursor: pointer;\n            display: none;\n            align-items: center;\n            justify-content: center;\n            z-index: 10;\n            transition: all 0.3s ease;\n            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n            \n            /* Assicura che sia sopra il contenuto */\n            pointer-events: auto;\n        }\n        \n        .nav-button {\n            background: var(--e-global-color-primary);\n        }\n        \n        .nav-button svg {\n            width: 24px;\n            height: 24px;\n            color: #fff;\n        }\n        \n        .nav-button:hover:not(:disabled) {\n            background: var(--e-global-color-2de3d7d);\n            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n            transform: translateY(-50%) scale(1.1);\n        }\n        \n        .nav-button:active {\n            transform: translateY(-50%) scale(0.95);\n        }\n        \n        .nav-button:hover:not(:disabled) {\n            background: var(--e-global-color-2de3d7d);\n            border-color: var(--e-global-color-2de3d7d);\n        }\n        \n        .nav-button:active {\n            transform: translateY(-50%) scale(0.95);\n        }\n        \n        .nav-button:disabled {\n            opacity: 0.3;\n            cursor: not-allowed;\n        }\n        \n        .nav-button:disabled:hover {\n            transform: translateY(-50%);\n        }\n        \n        .nav-button:focus {\n            outline: 2px solid var(--e-global-color-primary, #0066cc);\n            outline-offset: 2px;\n        }\n        \n        .nav-prev {\n            left: 10px;\n        }\n        \n        .nav-next {\n            right: 10px;\n        }\n        \n        /* Mostra pulsanti su desktop */\n        @media (min-width: 1024px) {\n            .elementor-scroller-wrapper:hover .nav-button:not(:disabled) {\n                display: flex;\n            }\n            \n            .elementor-scroller-wrapper:focus-within .nav-button:not(:disabled) {\n                display: flex;\n            }\n        }\n        \n        /* Progress bar sottile */\n        .scroll-progress {\n            position: absolute;\n            bottom: 0;\n            left: 0;\n            height: 3px;\n            background: var(--e-global-color-primary, #0066cc);\n            transition: width 0.2s ease, opacity 0.3s ease;\n            pointer-events: none;\n            z-index: 5;\n            opacity: 0;\n            border-radius: 0 3px 3px 0;\n        }\n        \n        /* Mostra progress bar su hover/focus */\n        .elementor-scroller-wrapper:hover .scroll-progress,\n        .elementor-scroller-wrapper:focus-within .scroll-progress {\n            opacity: 0.7;\n        }\n        \n        /* Non sovrascriviamo cursor - già impostato nel CSS esistente */\n        \n        /* Focus migliore - solo se non già presente */\n        .scrollable-container:focus-visible {\n            outline: 2px solid var(--e-global-color-primary, #0066cc);\n            outline-offset: 2px;\n        }\n        \n        /* Supporta la classe keyboard-scrolling esistente */\n        .scrollable-container.keyboard-scrolling {\n            scroll-behavior: smooth !important;\n        }\n        \n        /* Screen reader only */\n        .sr-only {\n            position: absolute;\n            width: 1px;\n            height: 1px;\n            padding: 0;\n            margin: -1px;\n            overflow: hidden;\n            clip: rect(0,0,0,0);\n            white-space: nowrap;\n            border: 0;\n        }\n        \n        /* Indicatori di pagina opzionali */\n        .scroll-indicators {\n            display: flex;\n            justify-content: center;\n            gap: 8px;\n            margin-top: 16px;\n            padding: 8px;\n        }\n        \n        .scroll-indicator {\n            width: 8px;\n            height: 8px;\n            border-radius: 50%;\n            background: #ddd;\n            transition: all 0.3s ease;\n            cursor: pointer;\n            border: none;\n            padding: 0;\n        }\n        \n        .scroll-indicator:hover {\n            background: #999;\n            transform: scale(1.2);\n        }\n        \n        .scroll-indicator.active {\n            background: var(--e-global-color-primary, #333);\n            width: 24px;\n            border-radius: 4px;\n        }\n        \n        /* Supporto reduced motion */\n        @media (prefers-reduced-motion: reduce) {\n            * {\n                animation-duration: 0.01ms !important;\n                animation-iteration-count: 1 !important;\n                transition-duration: 0.01ms !important;\n            }\n            \n            .scrollable-container {\n                scroll-behavior: auto !important;\n            }\n            \n            .nav-button {\n                transition: none !important;\n            }\n            \n            .scroll-progress {\n                transition: none !important;\n            }\n        }\n        \n        /* Migliora contrasto per accessibilità */\n        @media (prefers-contrast: high) {\n            .nav-button {\n                background: #fff;\n                border: 2px solid #000;\n            }\n            \n            .nav-button:hover:not(:disabled) {\n                background: #000;\n                color: #fff;\n            }\n            \n            .nav-button:hover:not(:disabled) svg {\n                color: #fff;\n            }\n            \n            .scroll-progress {\n                background: #000;\n            }\n        }\n        \n        /* Dark mode support */\n        @media (prefers-color-scheme: dark) {\n            .nav-button {\n                background: var(--e-global-color-primary);\n                border-color: var(--e-global-color-primary);\n            }\n            \n            .nav-button svg {\n                color: #fff;\n            }\n            \n            .nav-button:hover:not(:disabled) {\n                background: var(--e-global-color-2de3d7d);\n                border-color: var(--e-global-color-2de3d7d);\n            }\n            \n            .scroll-indicator {\n                background: #555;\n            }\n            \n            .scroll-indicator:hover {\n                background: #777;\n            }\n            \n            .scroll-indicator.active {\n                background: #fff;\n            }\n        }\n    </style>\n`;\n\n// Inizializzazione\nfunction initImprovedScrollers() {\n    // Inietta stili se non presenti\n    if (!document.getElementById('improved-scroller-styles')) {\n        document.head.insertAdjacentHTML('beforeend', improvedStyles);\n    }\n    \n    // Trova tutti i container scrollabili\n    const containers = document.querySelectorAll('.scrollable-container');\n    \n    containers.forEach(container => {\n        // Skip se già inizializzato\n        if (container.hasAttribute('data-improved-scroller')) return;\n        \n        // Inizializza solo se c'è overflow orizzontale\n        if (container.scrollWidth > container.clientWidth) {\n            new ImprovedElementorScroller(container);\n            container.setAttribute('data-improved-scroller', 'true');\n        }\n    });\n}\n\n// Inizializza quando DOM è pronto\nif (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', initImprovedScrollers);\n} else {\n    initImprovedScrollers();\n}\n\n// Hook per Elementor\nif (typeof jQuery !== 'undefined') {\n    jQuery(window).on('elementor/frontend/init', function() {\n        if (window.elementorFrontend && window.elementorFrontend.hooks) {\n            elementorFrontend.hooks.addAction('frontend/element_ready/widget', function() {\n                setTimeout(initImprovedScrollers, 100);\n            });\n        }\n    });\n} else {\n    // Fallback observer per contenuti dinamici\n    const observer = new MutationObserver(() => {\n        initImprovedScrollers();\n    });\n    \n    observer.observe(document.body, {\n        childList: true,\n        subtree: true\n    });\n}\n\n// Re-inizializza su resize\nlet resizeTimeout;\nwindow.addEventListener('resize', () => {\n    clearTimeout(resizeTimeout);\n    resizeTimeout = setTimeout(initImprovedScrollers, 250);\n});\n\nconsole.log('Improved Elementor Scroller v2.0 loaded');","originalFile":"/**\n * Slider Orizzontale Migliorato per Elementor\n * Versione 2.0 - Ottimizzato per Desktop con Accessibilità\n */\n\n// Classe principale per gestire lo slider\nclass ImprovedElementorScroller {\n    constructor(container) {\n        this.container = container;\n        this.wrapper = null;\n        this.isScrolling = false;\n        this.scrollTimeout = null;\n        \n        // Feature detection\n        this.supportsPassive = this.checkPassiveSupport();\n        this.supportsScrollBehavior = 'scrollBehavior' in document.documentElement.style;\n        \n        // Inizializza\n        this.init();\n    }\n    \n    // Check supporto passive listeners\n    checkPassiveSupport() {\n        let supportsPassive = false;\n        try {\n            const opts = Object.defineProperty({}, 'passive', {\n                get: () => { supportsPassive = true; }\n            });\n            window.addEventListener('testPassive', null, opts);\n            window.removeEventListener('testPassive', null, opts);\n        } catch (e) {}\n        return supportsPassive;\n    }\n    \n    init() {\n        // Crea wrapper per aggiungere controlli senza modificare HTML\n        this.wrapContainer();\n        \n        // Setup features\n        this.setupNavButtons();\n        this.setupKeyboard();\n        this.setupMouseWheel();\n        this.setupTouch();\n        this.setupScrollIndicator();\n        this.setupAccessibility();\n        \n        // Aggiorna stato iniziale\n        this.updateUI();\n    }\n    \n    // Wrap container esistente per aggiungere controlli\n    wrapContainer() {\n        // Se già wrappato, esci\n        if (this.container.parentElement.classList.contains('elementor-scroller-wrapper')) {\n            this.wrapper = this.container.parentElement;\n            return;\n        }\n        \n        // Crea wrapper\n        this.wrapper = document.createElement('div');\n        this.wrapper.className = 'elementor-scroller-wrapper';\n        this.wrapper.style.position = 'relative';\n        \n        // Inserisci wrapper\n        this.container.parentNode.insertBefore(this.wrapper, this.container);\n        this.wrapper.appendChild(this.container);\n    }\n    \n    // Setup pulsanti navigazione\n    setupNavButtons() {\n        // Crea pulsanti solo se non esistono\n        if (!this.wrapper.querySelector('.nav-button')) {\n            // Pulsante precedente\n            const prevButton = document.createElement('button');\n            prevButton.className = 'nav-button nav-prev';\n            prevButton.innerHTML = `\n                <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                    <path d=\"M15 18l-6-6 6-6\"/>\n                </svg>\n            `;\n            prevButton.setAttribute('aria-label', 'Scorri a sinistra');\n            prevButton.addEventListener('click', () => this.scrollPrev());\n            \n            // Pulsante successivo\n            const nextButton = document.createElement('button');\n            nextButton.className = 'nav-button nav-next';\n            nextButton.innerHTML = `\n                <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                    <path d=\"M9 18l6-6-6-6\"/>\n                </svg>\n            `;\n            nextButton.setAttribute('aria-label', 'Scorri a destra');\n            nextButton.addEventListener('click', () => this.scrollNext());\n            \n            // Aggiungi al wrapper\n            this.wrapper.appendChild(prevButton);\n            this.wrapper.appendChild(nextButton);\n            \n            // Store references\n            this.prevButton = prevButton;\n            this.nextButton = nextButton;\n        }\n    }\n    \n    // Setup tastiera migliorato\n    setupKeyboard() {\n        this.container.addEventListener('keydown', (e) => {\n            const scrollAmount = this.container.clientWidth * 0.8;\n            let handled = true;\n            \n            // Aggiungi classe per smooth scroll da tastiera\n            this.container.classList.add('keyboard-scrolling');\n            \n            switch(e.key) {\n                case 'ArrowLeft':\n                    this.smoothScroll(-scrollAmount);\n                    break;\n                case 'ArrowRight':\n                    this.smoothScroll(scrollAmount);\n                    break;\n                case 'Home':\n                    this.scrollToStart();\n                    break;\n                case 'End':\n                    this.scrollToEnd();\n                    break;\n                default:\n                    handled = false;\n            }\n            \n            if (handled) {\n                e.preventDefault();\n                // Rimuovi classe dopo animazione\n                setTimeout(() => {\n                    this.container.classList.remove('keyboard-scrolling');\n                }, 400);\n            } else {\n                this.container.classList.remove('keyboard-scrolling');\n            }\n        });\n    }\n    \n    // Setup mouse wheel - MIGLIORAMENTO CHIAVE\n    setupMouseWheel() {\n        let accumulatedDelta = 0;\n        let wheelTimeout;\n        \n        const wheelHandler = (e) => {\n            // Solo se container è in hover o focus\n            if (!this.container.matches(':hover, :focus-within')) return;\n            \n            e.preventDefault();\n            \n            // Accumula piccoli delta per scroll più fluido\n            accumulatedDelta += e.deltaY;\n            \n            clearTimeout(wheelTimeout);\n            wheelTimeout = setTimeout(() => {\n                if (Math.abs(accumulatedDelta) > 10) {\n                    // Normalizza e applica scroll\n                    const scrollAmount = Math.sign(accumulatedDelta) * Math.min(Math.abs(accumulatedDelta), 300);\n                    this.smoothScroll(scrollAmount);\n                }\n                accumulatedDelta = 0;\n            }, 50);\n        };\n        \n        // Aggiungi listener con passive false\n        this.container.addEventListener('wheel', wheelHandler, \n            this.supportsPassive ? { passive: false } : false\n        );\n    }\n    \n    // Setup touch con momentum migliorato\n    setupTouch() {\n        let startX = 0;\n        let scrollLeft = 0;\n        let isDragging = false;\n        let animationId = null;\n        let velocity = 0;\n        let lastX = 0;\n        let lastTime = 0;\n        \n        const startDragging = (pageX) => {\n            isDragging = true;\n            startX = pageX;\n            lastX = pageX;\n            scrollLeft = this.container.scrollLeft;\n            lastTime = Date.now();\n            velocity = 0;\n            \n            // Cancella animazioni\n            if (animationId) {\n                cancelAnimationFrame(animationId);\n            }\n            \n            // La classe 'active' è già nel CSS esistente per cursor grabbing\n            this.container.classList.add('active');\n        };\n        \n        const drag = (pageX) => {\n            if (!isDragging) return;\n            \n            const currentTime = Date.now();\n            const timeDelta = currentTime - lastTime;\n            const distance = pageX - lastX;\n            \n            // Calcola velocità\n            if (timeDelta > 0) {\n                velocity = distance / timeDelta * 16; // Normalizza a 60fps\n            }\n            \n            const walk = (pageX - startX) * 1.5;\n            this.container.scrollLeft = scrollLeft - walk;\n            \n            lastX = pageX;\n            lastTime = currentTime;\n        };\n        \n        const stopDragging = () => {\n            if (!isDragging) return;\n            \n            isDragging = false;\n            this.container.classList.remove('active');\n            \n            // Applica momentum se c'è velocità\n            if (Math.abs(velocity) > 2) {\n                const deceleration = 0.95;\n                \n                const animate = () => {\n                    if (Math.abs(velocity) > 0.5) {\n                        this.container.scrollLeft -= velocity;\n                        velocity *= deceleration;\n                        animationId = requestAnimationFrame(animate);\n                    } else {\n                        this.updateUI();\n                    }\n                };\n                \n                animate();\n            } else {\n                this.updateUI();\n            }\n        };\n        \n        // Mouse events\n        this.container.addEventListener('mousedown', (e) => {\n            startDragging(e.pageX);\n        });\n        \n        document.addEventListener('mousemove', (e) => {\n            drag(e.pageX);\n        });\n        \n        document.addEventListener('mouseup', stopDragging);\n        \n        // Touch events\n        this.container.addEventListener('touchstart', (e) => {\n            startDragging(e.touches[0].pageX);\n        }, this.supportsPassive ? { passive: true } : false);\n        \n        this.container.addEventListener('touchmove', (e) => {\n            drag(e.touches[0].pageX);\n        }, this.supportsPassive ? { passive: true } : false);\n        \n        this.container.addEventListener('touchend', stopDragging);\n        this.container.addEventListener('touchcancel', stopDragging);\n    }\n    \n    // Setup indicatore di scroll\n    setupScrollIndicator() {\n        // Crea progress bar solo se non nascosta da design\n        if (!this.wrapper.classList.contains('hide-progress')) {\n            const progressBar = document.createElement('div');\n            progressBar.className = 'scroll-progress';\n            progressBar.setAttribute('role', 'progressbar');\n            progressBar.setAttribute('aria-label', 'Progresso scroll');\n            progressBar.setAttribute('aria-valuemin', '0');\n            progressBar.setAttribute('aria-valuemax', '100');\n            \n            this.wrapper.appendChild(progressBar);\n            this.progressBar = progressBar;\n        }\n        \n        // Aggiorna su scroll\n        let ticking = false;\n        this.container.addEventListener('scroll', () => {\n            if (!ticking) {\n                requestAnimationFrame(() => {\n                    this.updateUI();\n                    ticking = false;\n                });\n                ticking = true;\n            }\n        }, this.supportsPassive ? { passive: true } : false);\n    }\n    \n    // Setup accessibilità\n    setupAccessibility() {\n        // ARIA labels\n        this.container.setAttribute('role', 'region');\n        this.container.setAttribute('aria-label', 'Contenuti scrollabili orizzontalmente');\n        \n        // Live region per annunci\n        const liveRegion = document.createElement('div');\n        liveRegion.className = 'sr-only';\n        liveRegion.setAttribute('role', 'status');\n        liveRegion.setAttribute('aria-live', 'polite');\n        liveRegion.setAttribute('aria-atomic', 'true');\n        liveRegion.style.cssText = `\n            position: absolute;\n            width: 1px;\n            height: 1px;\n            padding: 0;\n            margin: -1px;\n            overflow: hidden;\n            clip: rect(0,0,0,0);\n            white-space: nowrap;\n            border: 0;\n        `;\n        \n        this.wrapper.appendChild(liveRegion);\n        this.liveRegion = liveRegion;\n    }\n    \n    // Scroll fluido\n    smoothScroll(distance) {\n        if (this.supportsScrollBehavior) {\n            this.container.scrollBy({\n                left: distance,\n                behavior: 'smooth'\n            });\n        } else {\n            // Fallback animato\n            this.animateScroll(this.container.scrollLeft + distance);\n        }\n    }\n    \n    // Animazione scroll per fallback\n    animateScroll(target) {\n        const start = this.container.scrollLeft;\n        const distance = target - start;\n        const duration = 300;\n        let startTime = null;\n        \n        const animation = (currentTime) => {\n            if (!startTime) startTime = currentTime;\n            const elapsed = currentTime - startTime;\n            const progress = Math.min(elapsed / duration, 1);\n            \n            // Easing\n            const easeInOutQuad = progress < 0.5\n                ? 2 * progress * progress\n                : 1 - Math.pow(-2 * progress + 2, 2) / 2;\n            \n            this.container.scrollLeft = start + distance * easeInOutQuad;\n            \n            if (progress < 1) {\n                requestAnimationFrame(animation);\n            } else {\n                this.updateUI();\n            }\n        };\n        \n        requestAnimationFrame(animation);\n    }\n    \n    // Metodi di navigazione\n    scrollPrev() {\n        const scrollAmount = this.container.clientWidth * 0.8;\n        this.smoothScroll(-scrollAmount);\n        this.announce('Scorrimento a sinistra');\n    }\n    \n    scrollNext() {\n        const scrollAmount = this.container.clientWidth * 0.8;\n        this.smoothScroll(scrollAmount);\n        this.announce('Scorrimento a destra');\n    }\n    \n    scrollToStart() {\n        this.container.scrollTo({\n            left: 0,\n            behavior: this.supportsScrollBehavior ? 'smooth' : 'auto'\n        });\n        this.announce('Inizio dei contenuti');\n    }\n    \n    scrollToEnd() {\n        const maxScroll = this.container.scrollWidth - this.container.clientWidth;\n        this.container.scrollTo({\n            left: maxScroll,\n            behavior: this.supportsScrollBehavior ? 'smooth' : 'auto'\n        });\n        this.announce('Fine dei contenuti');\n    }\n    \n    // Aggiorna UI\n    updateUI() {\n        const scrollLeft = this.container.scrollLeft;\n        const maxScroll = this.container.scrollWidth - this.container.clientWidth;\n        \n        // Aggiorna pulsanti\n        if (this.prevButton && this.nextButton) {\n            this.prevButton.disabled = scrollLeft <= 0;\n            this.nextButton.disabled = scrollLeft >= maxScroll - 1;\n            \n            // Aggiorna ARIA\n            this.prevButton.setAttribute('aria-disabled', scrollLeft <= 0);\n            this.nextButton.setAttribute('aria-disabled', scrollLeft >= maxScroll - 1);\n        }\n        \n        // Aggiorna progress bar\n        if (this.progressBar && maxScroll > 0) {\n            const progress = (scrollLeft / maxScroll) * 100;\n            this.progressBar.style.width = `${progress}%`;\n            this.progressBar.setAttribute('aria-valuenow', Math.round(progress));\n        }\n    }\n    \n    // Annuncia a screen reader\n    announce(message) {\n        if (this.liveRegion) {\n            this.liveRegion.textContent = message;\n            // Reset dopo annuncio\n            setTimeout(() => {\n                this.liveRegion.textContent = '';\n            }, 1000);\n        }\n    }\n}\n\n// CSS da iniettare - Adattato per CSS Elementor esistente\nconst improvedStyles = `\n    <style id=\"improved-scroller-styles\">\n        /* Wrapper styles */\n        .elementor-scroller-wrapper {\n            position: relative;\n        }\n        \n        /* Non sovrascriviamo gli stili scrollbar - già nascosta nel CSS esistente */\n        \n        /* Pulsanti navigazione */\n        .nav-button {\n            position: absolute;\n            top: 50%;\n            transform: translateY(-50%);\n            width: 48px;\n            height: 48px;\n            background: rgba(255, 255, 255, 0.95);\n            border: 1px solid #ddd;\n            border-radius: 50%;\n            cursor: pointer;\n            display: none;\n            align-items: center;\n            justify-content: center;\n            z-index: 10;\n            transition: all 0.3s ease;\n            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n            \n            /* Assicura che sia sopra il contenuto */\n            pointer-events: auto;\n        }\n        \n        .nav-button {\n            background: var(--e-global-color-primary);\n        }\n        \n        .nav-button svg {\n            width: 24px;\n            height: 24px;\n            color: #fff;\n        }\n        \n        .nav-button:hover:not(:disabled) {\n            background: var(--e-global-color-2de3d7d);\n            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n            transform: translateY(-50%) scale(1.1);\n        }\n        \n        .nav-button:active {\n            transform: translateY(-50%) scale(0.95);\n        }\n        \n        .nav-button:hover:not(:disabled) {\n            background: var(--e-global-color-2de3d7d);\n            border-color: var(--e-global-color-2de3d7d);\n        }\n        \n        .nav-button:active {\n            transform: translateY(-50%) scale(0.95);\n        }\n        \n        .nav-button:disabled {\n            opacity: 0.3;\n            cursor: not-allowed;\n        }\n        \n        .nav-button:disabled:hover {\n            transform: translateY(-50%);\n        }\n        \n        .nav-button:focus {\n            outline: 2px solid var(--e-global-color-primary, #0066cc);\n            outline-offset: 2px;\n        }\n        \n        .nav-prev {\n            left: 10px;\n        }\n        \n        .nav-next {\n            right: 10px;\n        }\n        \n        /* Mostra pulsanti su desktop */\n        @media (min-width: 1024px) {\n            .elementor-scroller-wrapper:hover .nav-button:not(:disabled) {\n                display: flex;\n            }\n            \n            .elementor-scroller-wrapper:focus-within .nav-button:not(:disabled) {\n                display: flex;\n            }\n        }\n        \n        /* Progress bar sottile */\n        .scroll-progress {\n            position: absolute;\n            bottom: 0;\n            left: 0;\n            height: 3px;\n            background: var(--e-global-color-primary, #0066cc);\n            transition: width 0.2s ease, opacity 0.3s ease;\n            pointer-events: none;\n            z-index: 5;\n            opacity: 0;\n            border-radius: 0 3px 3px 0;\n        }\n        \n        /* Mostra progress bar su hover/focus */\n        .elementor-scroller-wrapper:hover .scroll-progress,\n        .elementor-scroller-wrapper:focus-within .scroll-progress {\n            opacity: 0.7;\n        }\n        \n        /* Non sovrascriviamo cursor - già impostato nel CSS esistente */\n        \n        /* Focus migliore - solo se non già presente */\n        .scrollable-container:focus-visible {\n            outline: 2px solid var(--e-global-color-primary, #0066cc);\n            outline-offset: 2px;\n        }\n        \n        /* Supporta la classe keyboard-scrolling esistente */\n        .scrollable-container.keyboard-scrolling {\n            scroll-behavior: smooth !important;\n        }\n        \n        /* Screen reader only */\n        .sr-only {\n            position: absolute;\n            width: 1px;\n            height: 1px;\n            padding: 0;\n            margin: -1px;\n            overflow: hidden;\n            clip: rect(0,0,0,0);\n            white-space: nowrap;\n            border: 0;\n        }\n        \n        /* Indicatori di pagina opzionali */\n        .scroll-indicators {\n            display: flex;\n            justify-content: center;\n            gap: 8px;\n            margin-top: 16px;\n            padding: 8px;\n        }\n        \n        .scroll-indicator {\n            width: 8px;\n            height: 8px;\n            border-radius: 50%;\n            background: #ddd;\n            transition: all 0.3s ease;\n            cursor: pointer;\n            border: none;\n            padding: 0;\n        }\n        \n        .scroll-indicator:hover {\n            background: #999;\n            transform: scale(1.2);\n        }\n        \n        .scroll-indicator.active {\n            background: var(--e-global-color-primary, #333);\n            width: 24px;\n            border-radius: 4px;\n        }\n        \n        /* Supporto reduced motion */\n        @media (prefers-reduced-motion: reduce) {\n            * {\n                animation-duration: 0.01ms !important;\n                animation-iteration-count: 1 !important;\n                transition-duration: 0.01ms !important;\n            }\n            \n            .scrollable-container {\n                scroll-behavior: auto !important;\n            }\n            \n            .nav-button {\n                transition: none !important;\n            }\n            \n            .scroll-progress {\n                transition: none !important;\n            }\n        }\n        \n        /* Migliora contrasto per accessibilità */\n        @media (prefers-contrast: high) {\n            .nav-button {\n                background: #fff;\n                border: 2px solid #000;\n            }\n            \n            .nav-button:hover:not(:disabled) {\n                background: #000;\n                color: #fff;\n            }\n            \n            .nav-button:hover:not(:disabled) svg {\n                color: #fff;\n            }\n            \n            .scroll-progress {\n                background: #000;\n            }\n        }\n        \n        /* Dark mode support */\n        @media (prefers-color-scheme: dark) {\n            .nav-button {\n                background: var(--e-global-color-primary);\n                border-color: var(--e-global-color-primary);\n            }\n            \n            .nav-button svg {\n                color: #fff;\n            }\n            \n            .nav-button:hover:not(:disabled) {\n                background: var(--e-global-color-2de3d7d);\n                border-color: var(--e-global-color-2de3d7d);\n            }\n            \n            .scroll-indicator {\n                background: #555;\n            }\n            \n            .scroll-indicator:hover {\n                background: #777;\n            }\n            \n            .scroll-indicator.active {\n                background: #fff;\n            }\n        }\n    </style>\n`;\n\n// Inizializzazione\nfunction initImprovedScrollers() {\n    // Inietta stili se non presenti\n    if (!document.getElementById('improved-scroller-styles')) {\n        document.head.insertAdjacentHTML('beforeend', improvedStyles);\n    }\n    \n    // Trova tutti i container scrollabili\n    const containers = document.querySelectorAll('.scrollable-container');\n    \n    containers.forEach(container => {\n        // Skip se già inizializzato\n        if (container.hasAttribute('data-improved-scroller')) return;\n        \n        // Inizializza solo se c'è overflow orizzontale\n        if (container.scrollWidth > container.clientWidth) {\n            new ImprovedElementorScroller(container);\n            container.setAttribute('data-improved-scroller', 'true');\n        }\n    });\n}\n\n// Inizializza quando DOM è pronto\nif (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', initImprovedScrollers);\n} else {\n    initImprovedScrollers();\n}\n\n// Hook per Elementor\nif (typeof jQuery !== 'undefined') {\n    jQuery(window).on('elementor/frontend/init', function() {\n        if (window.elementorFrontend && window.elementorFrontend.hooks) {\n            elementorFrontend.hooks.addAction('frontend/element_ready/widget', function() {\n                setTimeout(initImprovedScrollers, 100);\n            });\n        }\n    });\n} else {\n    // Fallback observer per contenuti dinamici\n    const observer = new MutationObserver(() => {\n        initImprovedScrollers();\n    });\n    \n    observer.observe(document.body, {\n        childList: true,\n        subtree: true\n    });\n}\n\n// Re-inizializza su resize\nlet resizeTimeout;\nwindow.addEventListener('resize', () => {\n    clearTimeout(resizeTimeout);\n    resizeTimeout = setTimeout(initImprovedScrollers, 250);\n});\n\nconsole.log('Improved Elementor Scroller v2.0 loaded');","structuredPatch":[{"oldStart":438,"oldLines":8,"newStart":438,"newLines":39,"lines":["             position: relative;","         }","         ","-        /* Non sovrascriviamo gli stili scrollbar - già nascosta nel CSS esistente */","+        /* Nasconde scrollbar orizzontale su desktop mantenendo lo scroll */","+        .scrollable-container {","+            /* Firefox */","+            scrollbar-width: none;","+            ","+            /* IE 10+ */","+            -ms-overflow-style: none;","+        }","         ","+        /* Chrome, Safari, Opera, Edge */","+        .scrollable-container::-webkit-scrollbar {","+            width: 0 !important;","+            height: 0 !important;","+            display: none;","+        }","+        ","+        .scrollable-container::-webkit-scrollbar-track {","+            background: transparent;","+        }","+        ","+        .scrollable-container::-webkit-scrollbar-thumb {","+            background: transparent;","+            border: none;","+        }","+        ","+        /* Supporto per browser più vecchi */","+        @supports not (scrollbar-width: none) {","+            .scrollable-container {","+                margin-bottom: -17px;","+                padding-bottom: 17px;","+            }","+        }","+        ","         /* Pulsanti navigazione */","         .nav-button {","             position: absolute;"]}],"userModified":false,"replaceAll":false}}
{"parentUuid":"bdb1ee64-2bb8-41ad-a059-32a121d71ac1","isSidechain":false,"userType":"external","cwd":"/Users/disconnesso/Sites/villastuart.it","sessionId":"6d59d7ee-cfab-4065-8105-2d5b96fcc40d","version":"1.0.61","gitBranch":"main","message":{"id":"msg_01UYqzAgfMFFqj8HGf9kPg2X","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"text","text":"Perfetto! Ho integrato il CSS per nascondere la scrollbar orizzontale mantenendo la funzionalità di scroll. Il codice include:\n\n✅ **Nasconde scrollbar orizzontale** con supporto cross-browser:\n- Firefox: `scrollbar-width: none`\n- IE/Edge: `-ms-overflow-style: none`  \n- Chrome/Safari/Opera: `::-webkit-scrollbar { display: none }`\n\n✅ **Fallback per browser vecchi** con il metodo margin/padding negativo\n\n✅ **Mantiene tutte le funzionalità** di scroll (mouse wheel, touch, keyboard, drag)\n\nLo script è ora completo e pronto all'uso nel tuo tema WordPress."}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":2,"cache_creation_input_tokens":9425,"cache_read_input_tokens":35120,"output_tokens":178,"service_tier":"standard"}},"requestId":"req_011CRatUURcehr5UgMsY7iA8","type":"assistant","uuid":"eb2a8898-9768-41e0-aa79-0200b0613c71","timestamp":"2025-07-29T07:07:42.056Z"}
{"parentUuid":"eb2a8898-9768-41e0-aa79-0200b0613c71","isSidechain":false,"userType":"external","cwd":"/Users/disconnesso/Sites/villastuart.it","sessionId":"6d59d7ee-cfab-4065-8105-2d5b96fcc40d","version":"1.0.61","gitBranch":"main","type":"user","message":{"role":"user","content":"nel mio slider horizontale ho il problema di non riuscire a vedere interamente l'ultima card a destra. Puoi suggerirmi dei miglioramenti al mio script? Ecco alcuni spunti utili, in base a questi elabora le modifiche per la soluzione più robusta mantenendo il markup html attuale.\n\nEcco alcuni miglioramenti specifici per risolvere questo problema:\n1. Aggiungi Padding al Container (Soluzione più semplice)\nAggiungi questa regola CSS per dare spazio all'ultima card:\ncss/* Aggiungi nel tuo CSS */\n.scrollable-container {\n    padding-right: 20px; /* Spazio per l'ultima card */\n    box-sizing: content-box; /* Importante per mantenere il padding fuori dal calcolo della larghezza */\n}\n\n/* Compensa il padding per il primo elemento */\n.scrollable-container > *:first-child {\n    margin-left: 20px;\n}\n2. Modifica il Calcolo dello Scroll (Soluzione più robusta)\nModifica il metodo updateUI() per gestire meglio il maxScroll:\njavascriptupdateUI() {\n    const scrollLeft = this.container.scrollLeft;\n    \n    // Calcola il gap tra le card (se usi gap in CSS)\n    const computedStyle = window.getComputedStyle(this.container);\n    const gap = parseFloat(computedStyle.gap) || 0;\n    \n    // Trova l'ultima card\n    const lastChild = this.container.lastElementChild;\n    const lastChildWidth = lastChild ? lastChild.offsetWidth : 0;\n    \n    // Calcola il maxScroll considerando l'ultima card\n    const maxScroll = this.container.scrollWidth - this.container.clientWidth + gap;\n    \n    // Aggiorna pulsanti con tolleranza\n    if (this.prevButton && this.nextButton) {\n        this.prevButton.disabled = scrollLeft <= 5; // Piccola tolleranza\n        this.nextButton.disabled = scrollLeft >= maxScroll - lastChildWidth - 5;\n        \n        // Aggiorna ARIA\n        this.prevButton.setAttribute('aria-disabled', scrollLeft <= 5);\n        this.nextButton.setAttribute('aria-disabled', scrollLeft >= maxScroll - lastChildWidth - 5);\n    }\n    \n    // Aggiorna progress bar\n    if (this.progressBar && maxScroll > 0) {\n        const progress = (scrollLeft / maxScroll) * 100;\n        this.progressBar.style.width = `${progress}%`;\n        this.progressBar.setAttribute('aria-valuenow', Math.round(progress));\n    }\n}\n3. Aggiungi Metodo per Verificare Visibilità\nAggiungi questo nuovo metodo alla classe:\njavascript// Verifica se un elemento è completamente visibile\nisElementFullyVisible(element) {\n    const containerRect = this.container.getBoundingClientRect();\n    const elementRect = element.getBoundingClientRect();\n    \n    return elementRect.left >= containerRect.left && \n           elementRect.right <= containerRect.right;\n}\n\n// Assicura che l'ultima card sia visibile dopo lo scroll\nensureLastCardVisible() {\n    const lastCard = this.container.lastElementChild;\n    if (!lastCard) return;\n    \n    if (!this.isElementFullyVisible(lastCard)) {\n        const containerRect = this.container.getBoundingClientRect();\n        const lastCardRect = lastCard.getBoundingClientRect();\n        const scrollAdjustment = lastCardRect.right - containerRect.right + 20; // 20px di margine\n        \n        if (scrollAdjustment > 0) {\n            this.container.scrollLeft += scrollAdjustment;\n        }\n    }\n}\n4. Modifica il Metodo scrollNext()\nAggiorna il metodo per gestire meglio l'ultimo scroll:\njavascriptscrollNext() {\n    const cards = Array.from(this.container.children);\n    const containerRect = this.container.getBoundingClientRect();\n    \n    // Trova la prima card non completamente visibile\n    let targetCard = cards.find(card => {\n        const cardRect = card.getBoundingClientRect();\n        return cardRect.left > containerRect.left && !this.isElementFullyVisible(card);\n    });\n    \n    if (targetCard) {\n        // Scrolla fino alla card target\n        const targetPosition = targetCard.offsetLeft - this.container.offsetLeft;\n        this.container.scrollTo({\n            left: targetPosition,\n            behavior: 'smooth'\n        });\n    } else {\n        // Scroll standard\n        const scrollAmount = this.container.clientWidth * 0.8;\n        this.smoothScroll(scrollAmount);\n    }\n    \n    this.announce('Scorrimento a destra');\n}\n5. CSS Aggiuntivo per Elementor\nSe usi Elementor, aggiungi questo CSS personalizzato al widget:\ncss/* Per Elementor - assicura spazio per l'ultima card */\n.elementor-widget-container .scrollable-container {\n    padding-right: calc(var(--container-padding-right, 20px) + 10px);\n    margin-right: calc(var(--container-padding-right, 20px) * -1);\n}\n\n/* Previeni che Elementor tagli il contenuto */\n.elementor-widget-container {\n    overflow: visible !important;\n}\n\n/* Fix per container con gap */\n.scrollable-container[style*=\"gap\"] {\n    padding-right: calc(var(--gap, 20px) + 30px);\n}\n6. Soluzione Quick Fix\nSe vuoi una soluzione veloce senza modificare molto il codice, aggiungi solo questo dopo l'inizializzazione:\njavascript// Aggiungi alla fine di initImprovedScrollers()\nfunction fixLastCardVisibility() {\n    const containers = document.querySelectorAll('.scrollable-container');\n    containers.forEach(container => {\n        // Aggiungi un elemento vuoto alla fine come spacer\n        if (!container.querySelector('.scroll-spacer')) {\n            const spacer = document.createElement('div');\n            spacer.className = 'scroll-spacer';\n            spacer.style.cssText = 'flex-shrink: 0; width: 20px; height: 1px;';\n            container.appendChild(spacer);\n        }\n    });\n}\n\n// Chiama dopo init\nfixLastCardVisibility();\nConsiglio Pratico\nPer il tuo caso specifico con Elementor, ti suggerisco di iniziare con la soluzione 1 (padding CSS) e la soluzione 6 (spacer). Sono le più semplici da implementare e risolvono il problema nella maggior parte dei casi.\nSe hai bisogno di maggior controllo o hai requisiti specifici, implementa le soluzioni 2-4 che offrono una gestione più sofisticata dello scroll.\nVuoi che ti aiuti a implementare una di queste soluzioni nel tuo codice specifico?"},"uuid":"d50fe228-0348-49fd-b0fe-beaa70238b80","timestamp":"2025-07-29T07:13:58.156Z"}
{"parentUuid":"d50fe228-0348-49fd-b0fe-beaa70238b80","isSidechain":false,"userType":"external","cwd":"/Users/disconnesso/Sites/villastuart.it","sessionId":"6d59d7ee-cfab-4065-8105-2d5b96fcc40d","version":"1.0.61","gitBranch":"main","message":{"id":"msg_011XXQ4LffEhKAAVrUsnnGTr","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01FAkGGpfJGkWG92g1kFbGHt","name":"TodoWrite","input":{"todos":[{"id":"1","content":"Add CSS padding solution for last card visibility","status":"pending","priority":"high"},{"id":"2","content":"Improve updateUI method with better maxScroll calculation","status":"pending","priority":"high"},{"id":"3","content":"Add methods to check element visibility and ensure last card is visible","status":"pending","priority":"high"},{"id":"4","content":"Enhance scrollNext method with card-based navigation","status":"pending","priority":"high"},{"id":"5","content":"Add scroll spacer solution as fallback","status":"pending","priority":"medium"}]}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":0,"cache_creation_input_tokens":47206,"cache_read_input_tokens":0,"output_tokens":221,"service_tier":"standard"}},"requestId":"req_011CRatxiAdwYTkEtbzRSHCc","type":"assistant","uuid":"7c4dfd41-151b-4aeb-b2b9-f012ba1e41e9","timestamp":"2025-07-29T07:14:06.899Z"}
{"parentUuid":"7c4dfd41-151b-4aeb-b2b9-f012ba1e41e9","isSidechain":false,"userType":"external","cwd":"/Users/disconnesso/Sites/villastuart.it","sessionId":"6d59d7ee-cfab-4065-8105-2d5b96fcc40d","version":"1.0.61","gitBranch":"main","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01FAkGGpfJGkWG92g1kFbGHt","type":"tool_result","content":"Todos have been modified successfully. Ensure that you continue to use the todo list to track your progress. Please proceed with the current tasks if applicable"}]},"uuid":"1f0348b3-aea1-4117-aa10-2521ba16a685","timestamp":"2025-07-29T07:14:06.929Z","toolUseResult":{"oldTodos":[{"content":"Create improved-scroller.js file in theme's js directory","status":"completed","priority":"high","id":"1"},{"content":"Add PHP enqueue script function to functions.php","status":"completed","priority":"high","id":"2"}],"newTodos":[{"content":"Add CSS padding solution for last card visibility","status":"pending","priority":"high","id":"1"},{"content":"Improve updateUI method with better maxScroll calculation","status":"pending","priority":"high","id":"2"},{"content":"Add methods to check element visibility and ensure last card is visible","status":"pending","priority":"high","id":"3"},{"content":"Enhance scrollNext method with card-based navigation","status":"pending","priority":"high","id":"4"},{"content":"Add scroll spacer solution as fallback","status":"pending","priority":"medium","id":"5"}]}}
{"parentUuid":"1f0348b3-aea1-4117-aa10-2521ba16a685","isSidechain":false,"userType":"external","cwd":"/Users/disconnesso/Sites/villastuart.it","sessionId":"6d59d7ee-cfab-4065-8105-2d5b96fcc40d","version":"1.0.61","gitBranch":"main","message":{"id":"msg_01Ra1X76eZ2PjEyNwzh9sB59","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_016zron816Zgbmar3xwxXU3S","name":"TodoWrite","input":{"todos":[{"id":"1","content":"Add CSS padding solution for last card visibility","status":"in_progress","priority":"high"},{"id":"2","content":"Improve updateUI method with better maxScroll calculation","status":"pending","priority":"high"},{"id":"3","content":"Add methods to check element visibility and ensure last card is visible","status":"pending","priority":"high"},{"id":"4","content":"Enhance scrollNext method with card-based navigation","status":"pending","priority":"high"},{"id":"5","content":"Add scroll spacer solution as fallback","status":"pending","priority":"medium"}]}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":2,"cache_creation_input_tokens":441,"cache_read_input_tokens":47206,"output_tokens":223,"service_tier":"standard"}},"requestId":"req_011CRatyPD9VJ61HcRDjuB8W","type":"assistant","uuid":"74621ab1-0eba-441f-89ec-346acdc855b3","timestamp":"2025-07-29T07:14:11.161Z"}
{"parentUuid":"74621ab1-0eba-441f-89ec-346acdc855b3","isSidechain":false,"userType":"external","cwd":"/Users/disconnesso/Sites/villastuart.it","sessionId":"6d59d7ee-cfab-4065-8105-2d5b96fcc40d","version":"1.0.61","gitBranch":"main","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_016zron816Zgbmar3xwxXU3S","type":"tool_result","content":"Todos have been modified successfully. Ensure that you continue to use the todo list to track your progress. Please proceed with the current tasks if applicable"}]},"uuid":"ee4beca7-56a7-46b2-a980-c43887446928","timestamp":"2025-07-29T07:14:11.196Z","toolUseResult":{"oldTodos":[{"content":"Add CSS padding solution for last card visibility","status":"pending","priority":"high","id":"1"},{"content":"Improve updateUI method with better maxScroll calculation","status":"pending","priority":"high","id":"2"},{"content":"Add methods to check element visibility and ensure last card is visible","status":"pending","priority":"high","id":"3"},{"content":"Enhance scrollNext method with card-based navigation","status":"pending","priority":"high","id":"4"},{"content":"Add scroll spacer solution as fallback","status":"pending","priority":"medium","id":"5"}],"newTodos":[{"content":"Add CSS padding solution for last card visibility","status":"in_progress","priority":"high","id":"1"},{"content":"Improve updateUI method with better maxScroll calculation","status":"pending","priority":"high","id":"2"},{"content":"Add methods to check element visibility and ensure last card is visible","status":"pending","priority":"high","id":"3"},{"content":"Enhance scrollNext method with card-based navigation","status":"pending","priority":"high","id":"4"},{"content":"Add scroll spacer solution as fallback","status":"pending","priority":"medium","id":"5"}]}}
{"parentUuid":"ee4beca7-56a7-46b2-a980-c43887446928","isSidechain":false,"userType":"external","cwd":"/Users/disconnesso/Sites/villastuart.it","sessionId":"6d59d7ee-cfab-4065-8105-2d5b96fcc40d","version":"1.0.61","gitBranch":"main","message":{"id":"msg_019yxk1shUWcWZ54ur3XNykw","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01QKqKEKUZfgr38sD4tewGGB","name":"Edit","input":{"file_path":"/Users/disconnesso/Sites/villastuart.it/wp-content/themes/hello-villa-stuart/assets/js/improved-scroller.js","old_string":"        /* Nasconde scrollbar orizzontale su desktop mantenendo lo scroll */\n        .scrollable-container {\n            /* Firefox */\n            scrollbar-width: none;\n            \n            /* IE 10+ */\n            -ms-overflow-style: none;\n        }","new_string":"        /* Nasconde scrollbar orizzontale su desktop mantenendo lo scroll */\n        .scrollable-container {\n            /* Firefox */\n            scrollbar-width: none;\n            \n            /* IE 10+ */\n            -ms-overflow-style: none;\n            \n            /* Aggiunge spazio per l'ultima card */\n            padding-right: 30px;\n            box-sizing: content-box;\n        }\n        \n        /* Compensa il padding per il primo elemento */\n        .scrollable-container > *:first-child {\n            margin-left: 20px;\n        }\n        \n        /* Fix per Elementor - previeni che tagli il contenuto */\n        .elementor-widget-container {\n            overflow: visible !important;\n        }\n        \n        /* Fix per container con gap CSS */\n        .scrollable-container[style*=\"gap\"] {\n            padding-right: 50px;\n        }"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":1,"cache_creation_input_tokens":447,"cache_read_input_tokens":47647,"output_tokens":414,"service_tier":"standard"}},"requestId":"req_011CRatyhYTbv5nPjSf5U5QR","type":"assistant","uuid":"4d569a84-04c4-4407-a0d9-c80741a19960","timestamp":"2025-07-29T07:14:18.347Z"}
{"parentUuid":"4d569a84-04c4-4407-a0d9-c80741a19960","isSidechain":false,"userType":"external","cwd":"/Users/disconnesso/Sites/villastuart.it","sessionId":"6d59d7ee-cfab-4065-8105-2d5b96fcc40d","version":"1.0.61","gitBranch":"main","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01QKqKEKUZfgr38sD4tewGGB","type":"tool_result","content":"The file /Users/disconnesso/Sites/villastuart.it/wp-content/themes/hello-villa-stuart/assets/js/improved-scroller.js has been updated. Here's the result of running `cat -n` on a snippet of the edited file:\n     1→/**\n     2→ * Slider Orizzontale Migliorato per Elementor\n     3→ * Versione 2.0 - Ottimizzato per Desktop con Accessibilità\n     4→ */\n     5→\n     6→// Classe principale per gestire lo slider\n     7→class ImprovedElementorScroller {\n     8→    constructor(container) {\n     9→        this.container = container;\n    10→        this.wrapper = null;\n    11→        this.isScrolling = false;\n    12→        this.scrollTimeout = null;\n    13→        \n    14→        // Feature detection\n    15→        this.supportsPassive = this.checkPassiveSupport();\n    16→        this.supportsScrollBehavior = 'scrollBehavior' in document.documentElement.style;\n    17→        \n    18→        // Inizializza\n    19→        this.init();\n    20→    }\n    21→    \n    22→    // Check supporto passive listeners\n    23→    checkPassiveSupport() {\n    24→        let supportsPassive = false;\n    25→        try {\n    26→            const opts = Object.defineProperty({}, 'passive', {\n    27→                get: () => { supportsPassive = true; }\n    28→            });\n    29→            window.addEventListener('testPassive', null, opts);\n    30→            window.removeEventListener('testPassive', null, opts);\n    31→        } catch (e) {}\n    32→        return supportsPassive;\n    33→    }\n    34→    \n    35→    init() {\n    36→        // Crea wrapper per aggiungere controlli senza modificare HTML\n    37→        this.wrapContainer();\n    38→        \n    39→        // Setup features\n    40→        this.setupNavButtons();\n    41→        this.setupKeyboard();\n    42→        this.setupMouseWheel();\n    43→        this.setupTouch();\n    44→        this.setupScrollIndicator();\n    45→        this.setupAccessibility();\n    46→        \n    47→        // Aggiorna stato iniziale\n    48→        this.updateUI();\n    49→    }\n    50→    \n    51→    // Wrap container esistente per aggiungere controlli\n    52→    wrapContainer() {\n    53→        // Se già wrappato, esci\n    54→        if (this.container.parentElement.classList.contains('elementor-scroller-wrapper')) {\n    55→            this.wrapper = this.container.parentElement;\n    56→            return;\n    57→        }\n    58→        \n    59→        // Crea wrapper\n    60→        this.wrapper = document.createElement('div');\n    61→        this.wrapper.className = 'elementor-scroller-wrapper';\n    62→        this.wrapper.style.position = 'relative';\n    63→        \n    64→        // Inserisci wrapper\n    65→        this.container.parentNode.insertBefore(this.wrapper, this.container);\n    66→        this.wrapper.appendChild(this.container);\n    67→    }\n    68→    \n    69→    // Setup pulsanti navigazione\n    70→    setupNavButtons() {\n    71→        // Crea pulsanti solo se non esistono\n    72→        if (!this.wrapper.querySelector('.nav-button')) {\n    73→            // Pulsante precedente\n    74→            const prevButton = document.createElement('button');\n    75→            prevButton.className = 'nav-button nav-prev';\n    76→            prevButton.innerHTML = `\n    77→                <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n    78→                    <path d=\"M15 18l-6-6 6-6\"/>\n    79→                </svg>\n    80→            `;\n    81→            prevButton.setAttribute('aria-label', 'Scorri a sinistra');\n    82→            prevButton.addEventListener('click', () => this.scrollPrev());\n    83→            \n    84→            // Pulsante successivo\n    85→            const nextButton = document.createElement('button');\n    86→            nextButton.className = 'nav-button nav-next';\n    87→            nextButton.innerHTML = `\n    88→                <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n    89→                    <path d=\"M9 18l6-6-6-6\"/>\n    90→                </svg>\n    91→            `;\n    92→            nextButton.setAttribute('aria-label', 'Scorri a destra');\n    93→            nextButton.addEventListener('click', () => this.scrollNext());\n    94→            \n    95→            // Aggiungi al wrapper\n    96→            this.wrapper.appendChild(prevButton);\n    97→            this.wrapper.appendChild(nextButton);\n    98→            \n    99→            // Store references\n   100→            this.prevButton = prevButton;\n   101→            this.nextButton = nextButton;\n   102→        }\n   103→    }\n   104→    \n   105→    // Setup tastiera migliorato\n   106→    setupKeyboard() {\n   107→        this.container.addEventListener('keydown', (e) => {\n   108→            const scrollAmount = this.container.clientWidth * 0.8;\n   109→            let handled = true;\n   110→            \n   111→            // Aggiungi classe per smooth scroll da tastiera\n   112→            this.container.classList.add('keyboard-scrolling');\n   113→            \n   114→            switch(e.key) {\n   115→                case 'ArrowLeft':\n   116→                    this.smoothScroll(-scrollAmount);\n   117→                    break;\n   118→                case 'ArrowRight':\n   119→                    this.smoothScroll(scrollAmount);\n   120→                    break;\n   121→                case 'Home':\n   122→                    this.scrollToStart();\n   123→                    break;\n   124→                case 'End':\n   125→                    this.scrollToEnd();\n   126→                    break;\n   127→                default:\n   128→                    handled = false;\n   129→            }\n   130→            \n   131→            if (handled) {\n   132→                e.preventDefault();\n   133→                // Rimuovi classe dopo animazione\n   134→                setTimeout(() => {\n   135→                    this.container.classList.remove('keyboard-scrolling');\n   136→                }, 400);\n   137→            } else {\n   138→                this.container.classList.remove('keyboard-scrolling');\n   139→            }\n   140→        });\n   141→    }\n   142→    \n   143→    // Setup mouse wheel - MIGLIORAMENTO CHIAVE\n   144→    setupMouseWheel() {\n   145→        let accumulatedDelta = 0;\n   146→        let wheelTimeout;\n   147→        \n   148→        const wheelHandler = (e) => {\n   149→            // Solo se container è in hover o focus\n   150→            if (!this.container.matches(':hover, :focus-within')) return;\n   151→            \n   152→            e.preventDefault();\n   153→            \n   154→            // Accumula piccoli delta per scroll più fluido\n   155→            accumulatedDelta += e.deltaY;\n   156→            \n   157→            clearTimeout(wheelTimeout);\n   158→            wheelTimeout = setTimeout(() => {\n   159→                if (Math.abs(accumulatedDelta) > 10) {\n   160→                    // Normalizza e applica scroll\n   161→                    const scrollAmount = Math.sign(accumulatedDelta) * Math.min(Math.abs(accumulatedDelta), 300);\n   162→                    this.smoothScroll(scrollAmount);\n   163→                }\n   164→                accumulatedDelta = 0;\n   165→            }, 50);\n   166→        };\n   167→        \n   168→        // Aggiungi listener con passive false\n   169→        this.container.addEventListener('wheel', wheelHandler, \n   170→            this.supportsPassive ? { passive: false } : false\n   171→        );\n   172→    }\n   173→    \n   174→    // Setup touch con momentum migliorato\n   175→    setupTouch() {\n   176→        let startX = 0;\n   177→        let scrollLeft = 0;\n   178→        let isDragging = false;\n   179→        let animationId = null;\n   180→        let velocity = 0;\n   181→        let lastX = 0;\n   182→        let lastTime = 0;\n   183→        \n   184→        const startDragging = (pageX) => {\n   185→            isDragging = true;\n   186→            startX = pageX;\n   187→            lastX = pageX;\n   188→            scrollLeft = this.container.scrollLeft;\n   189→            lastTime = Date.now();\n   190→            velocity = 0;\n   191→            \n   192→            // Cancella animazioni\n   193→            if (animationId) {\n   194→                cancelAnimationFrame(animationId);\n   195→            }\n   196→            \n   197→            // La classe 'active' è già nel CSS esistente per cursor grabbing\n   198→            this.container.classList.add('active');\n   199→        };\n   200→        \n   201→        const drag = (pageX) => {\n   202→            if (!isDragging) return;\n   203→            \n   204→            const currentTime = Date.now();\n   205→            const timeDelta = currentTime - lastTime;\n   206→            const distance = pageX - lastX;\n   207→            \n   208→            // Calcola velocità\n   209→            if (timeDelta > 0) {\n   210→                velocity = distance / timeDelta * 16; // Normalizza a 60fps\n   211→            }\n   212→            \n   213→            const walk = (pageX - startX) * 1.5;\n   214→            this.container.scrollLeft = scrollLeft - walk;\n   215→            \n   216→            lastX = pageX;\n   217→            lastTime = currentTime;\n   218→        };\n   219→        \n   220→        const stopDragging = () => {\n   221→            if (!isDragging) return;\n   222→            \n   223→            isDragging = false;\n   224→            this.container.classList.remove('active');\n   225→            \n   226→            // Applica momentum se c'è velocità\n   227→            if (Math.abs(velocity) > 2) {\n   228→                const deceleration = 0.95;\n   229→                \n   230→                const animate = () => {\n   231→                    if (Math.abs(velocity) > 0.5) {\n   232→                        this.container.scrollLeft -= velocity;\n   233→                        velocity *= deceleration;\n   234→                        animationId = requestAnimationFrame(animate);\n   235→                    } else {\n   236→                        this.updateUI();\n   237→                    }\n   238→                };\n   239→                \n   240→                animate();\n   241→            } else {\n   242→                this.updateUI();\n   243→            }\n   244→        };\n   245→        \n   246→        // Mouse events\n   247→        this.container.addEventListener('mousedown', (e) => {\n   248→            startDragging(e.pageX);\n   249→        });\n   250→        \n   251→        document.addEventListener('mousemove', (e) => {\n   252→            drag(e.pageX);\n   253→        });\n   254→        \n   255→        document.addEventListener('mouseup', stopDragging);\n   256→        \n   257→        // Touch events\n   258→        this.container.addEventListener('touchstart', (e) => {\n   259→            startDragging(e.touches[0].pageX);\n   260→        }, this.supportsPassive ? { passive: true } : false);\n   261→        \n   262→        this.container.addEventListener('touchmove', (e) => {\n   263→            drag(e.touches[0].pageX);\n   264→        }, this.supportsPassive ? { passive: true } : false);\n   265→        \n   266→        this.container.addEventListener('touchend', stopDragging);\n   267→        this.container.addEventListener('touchcancel', stopDragging);\n   268→    }\n   269→    \n   270→    // Setup indicatore di scroll\n   271→    setupScrollIndicator() {\n   272→        // Crea progress bar solo se non nascosta da design\n   273→        if (!this.wrapper.classList.contains('hide-progress')) {\n   274→            const progressBar = document.createElement('div');\n   275→            progressBar.className = 'scroll-progress';\n   276→            progressBar.setAttribute('role', 'progressbar');\n   277→            progressBar.setAttribute('aria-label', 'Progresso scroll');\n   278→            progressBar.setAttribute('aria-valuemin', '0');\n   279→            progressBar.setAttribute('aria-valuemax', '100');\n   280→            \n   281→            this.wrapper.appendChild(progressBar);\n   282→            this.progressBar = progressBar;\n   283→        }\n   284→        \n   285→        // Aggiorna su scroll\n   286→        let ticking = false;\n   287→        this.container.addEventListener('scroll', () => {\n   288→            if (!ticking) {\n   289→                requestAnimationFrame(() => {\n   290→                    this.updateUI();\n   291→                    ticking = false;\n   292→                });\n   293→                ticking = true;\n   294→            }\n   295→        }, this.supportsPassive ? { passive: true } : false);\n   296→    }\n   297→    \n   298→    // Setup accessibilità\n   299→    setupAccessibility() {\n   300→        // ARIA labels\n   301→        this.container.setAttribute('role', 'region');\n   302→        this.container.setAttribute('aria-label', 'Contenuti scrollabili orizzontalmente');\n   303→        \n   304→        // Live region per annunci\n   305→        const liveRegion = document.createElement('div');\n   306→        liveRegion.className = 'sr-only';\n   307→        liveRegion.setAttribute('role', 'status');\n   308→        liveRegion.setAttribute('aria-live', 'polite');\n   309→        liveRegion.setAttribute('aria-atomic', 'true');\n   310→        liveRegion.style.cssText = `\n   311→            position: absolute;\n   312→            width: 1px;\n   313→            height: 1px;\n   314→            padding: 0;\n   315→            margin: -1px;\n   316→            overflow: hidden;\n   317→            clip: rect(0,0,0,0);\n   318→            white-space: nowrap;\n   319→            border: 0;\n   320→        `;\n   321→        \n   322→        this.wrapper.appendChild(liveRegion);\n   323→        this.liveRegion = liveRegion;\n   324→    }\n   325→    \n   326→    // Scroll fluido\n   327→    smoothScroll(distance) {\n   328→        if (this.supportsScrollBehavior) {\n   329→            this.container.scrollBy({\n   330→                left: distance,\n   331→                behavior: 'smooth'\n   332→            });\n   333→        } else {\n   334→            // Fallback animato\n   335→            this.animateScroll(this.container.scrollLeft + distance);\n   336→        }\n   337→    }\n   338→    \n   339→    // Animazione scroll per fallback\n   340→    animateScroll(target) {\n   341→        const start = this.container.scrollLeft;\n   342→        const distance = target - start;\n   343→        const duration = 300;\n   344→        let startTime = null;\n   345→        \n   346→        const animation = (currentTime) => {\n   347→            if (!startTime) startTime = currentTime;\n   348→            const elapsed = currentTime - startTime;\n   349→            const progress = Math.min(elapsed / duration, 1);\n   350→            \n   351→            // Easing\n   352→            const easeInOutQuad = progress < 0.5\n   353→                ? 2 * progress * progress\n   354→                : 1 - Math.pow(-2 * progress + 2, 2) / 2;\n   355→            \n   356→            this.container.scrollLeft = start + distance * easeInOutQuad;\n   357→            \n   358→            if (progress < 1) {\n   359→                requestAnimationFrame(animation);\n   360→            } else {\n   361→                this.updateUI();\n   362→            }\n   363→        };\n   364→        \n   365→        requestAnimationFrame(animation);\n   366→    }\n   367→    \n   368→    // Metodi di navigazione\n   369→    scrollPrev() {\n   370→        const scrollAmount = this.container.clientWidth * 0.8;\n   371→        this.smoothScroll(-scrollAmount);\n   372→        this.announce('Scorrimento a sinistra');\n   373→    }\n   374→    \n   375→    scrollNext() {\n   376→        const scrollAmount = this.container.clientWidth * 0.8;\n   377→        this.smoothScroll(scrollAmount);\n   378→        this.announce('Scorrimento a destra');\n   379→    }\n   380→    \n   381→    scrollToStart() {\n   382→        this.container.scrollTo({\n   383→            left: 0,\n   384→            behavior: this.supportsScrollBehavior ? 'smooth' : 'auto'\n   385→        });\n   386→        this.announce('Inizio dei contenuti');\n   387→    }\n   388→    \n   389→    scrollToEnd() {\n   390→        const maxScroll = this.container.scrollWidth - this.container.clientWidth;\n   391→        this.container.scrollTo({\n   392→            left: maxScroll,\n   393→            behavior: this.supportsScrollBehavior ? 'smooth' : 'auto'\n   394→        });\n   395→        this.announce('Fine dei contenuti');\n   396→    }\n   397→    \n   398→    // Aggiorna UI\n   399→    updateUI() {\n   400→        const scrollLeft = this.container.scrollLeft;\n   401→        const maxScroll = this.container.scrollWidth - this.container.clientWidth;\n   402→        \n   403→        // Aggiorna pulsanti\n   404→        if (this.prevButton && this.nextButton) {\n   405→            this.prevButton.disabled = scrollLeft <= 0;\n   406→            this.nextButton.disabled = scrollLeft >= maxScroll - 1;\n   407→            \n   408→            // Aggiorna ARIA\n   409→            this.prevButton.setAttribute('aria-disabled', scrollLeft <= 0);\n   410→            this.nextButton.setAttribute('aria-disabled', scrollLeft >= maxScroll - 1);\n   411→        }\n   412→        \n   413→        // Aggiorna progress bar\n   414→        if (this.progressBar && maxScroll > 0) {\n   415→            const progress = (scrollLeft / maxScroll) * 100;\n   416→            this.progressBar.style.width = `${progress}%`;\n   417→            this.progressBar.setAttribute('aria-valuenow', Math.round(progress));\n   418→        }\n   419→    }\n   420→    \n   421→    // Annuncia a screen reader\n   422→    announce(message) {\n   423→        if (this.liveRegion) {\n   424→            this.liveRegion.textContent = message;\n   425→            // Reset dopo annuncio\n   426→            setTimeout(() => {\n   427→                this.liveRegion.textContent = '';\n   428→            }, 1000);\n   429→        }\n   430→    }\n   431→}\n   432→\n   433→// CSS da iniettare - Adattato per CSS Elementor esistente\n   434→const improvedStyles = `\n   435→    <style id=\"improved-scroller-styles\">\n   436→        /* Wrapper styles */\n   437→        .elementor-scroller-wrapper {\n   438→            position: relative;\n   439→        }\n   440→        \n   441→        /* Nasconde scrollbar orizzontale su desktop mantenendo lo scroll */\n   442→        .scrollable-container {\n   443→            /* Firefox */\n   444→            scrollbar-width: none;\n   445→            \n   446→            /* IE 10+ */\n   447→            -ms-overflow-style: none;\n   448→            \n   449→            /* Aggiunge spazio per l'ultima card */\n   450→            padding-right: 30px;\n   451→            box-sizing: content-box;\n   452→        }\n   453→        \n   454→        /* Compensa il padding per il primo elemento */\n   455→        .scrollable-container > *:first-child {\n   456→            margin-left: 20px;\n   457→        }\n   458→        \n   459→        /* Fix per Elementor - previeni che tagli il contenuto */\n   460→        .elementor-widget-container {\n   461→            overflow: visible !important;\n   462→        }\n   463→        \n   464→        /* Fix per container con gap CSS */\n   465→        .scrollable-container[style*=\"gap\"] {\n   466→            padding-right: 50px;\n   467→        }\n   468→        \n   469→        /* Chrome, Safari, Opera, Edge */\n   470→        .scrollable-container::-webkit-scrollbar {\n   471→            width: 0 !important;\n   472→            height: 0 !important;\n   473→            display: none;\n   474→        }\n   475→        \n   476→        .scrollable-container::-webkit-scrollbar-track {\n   477→            background: transparent;\n   478→        }\n   479→        \n   480→        .scrollable-container::-webkit-scrollbar-thumb {\n   481→            background: transparent;\n   482→            border: none;\n   483→        }\n   484→        \n   485→        /* Supporto per browser più vecchi */\n   486→        @supports not (scrollbar-width: none) {\n   487→            .scrollable-container {\n   488→                margin-bottom: -17px;\n   489→                padding-bottom: 17px;\n   490→            }\n   491→        }\n   492→        \n   493→        /* Pulsanti navigazione */\n   494→        .nav-button {\n   495→            position: absolute;\n   496→            top: 50%;\n   497→            transform: translateY(-50%);\n   498→            width: 48px;\n   499→            height: 48px;\n   500→            background: rgba(255, 255, 255, 0.95);\n   501→            border: 1px solid #ddd;\n   502→            border-radius: 50%;\n   503→            cursor: pointer;\n   504→            display: none;\n   505→            align-items: center;\n   506→            justify-content: center;\n   507→            z-index: 10;\n   508→            transition: all 0.3s ease;\n   509→            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n   510→            \n   511→            /* Assicura che sia sopra il contenuto */\n   512→            pointer-events: auto;\n   513→        }\n   514→        \n   515→        .nav-button {\n   516→            background: var(--e-global-color-primary);\n   517→        }\n   518→        \n   519→        .nav-button svg {\n   520→            width: 24px;\n   521→            height: 24px;\n   522→            color: #fff;\n   523→        }\n   524→        \n   525→        .nav-button:hover:not(:disabled) {\n   526→            background: var(--e-global-color-2de3d7d);\n   527→            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n   528→            transform: translateY(-50%) scale(1.1);\n   529→        }\n   530→        \n   531→        .nav-button:active {\n   532→            transform: translateY(-50%) scale(0.95);\n   533→        }\n   534→        \n   535→        .nav-button:hover:not(:disabled) {\n   536→            background: var(--e-global-color-2de3d7d);\n   537→            border-color: var(--e-global-color-2de3d7d);\n   538→        }\n   539→        \n   540→        .nav-button:active {\n   541→            transform: translateY(-50%) scale(0.95);\n   542→        }\n   543→        \n   544→        .nav-button:disabled {\n   545→            opacity: 0.3;\n   546→            cursor: not-allowed;\n   547→        }\n   548→        \n   549→        .nav-button:disabled:hover {\n   550→            transform: translateY(-50%);\n   551→        }\n   552→        \n   553→        .nav-button:focus {\n   554→            outline: 2px solid var(--e-global-color-primary, #0066cc);\n   555→            outline-offset: 2px;\n   556→        }\n   557→        \n   558→        .nav-prev {\n   559→            left: 10px;\n   560→        }\n   561→        \n   562→        .nav-next {\n   563→            right: 10px;\n   564→        }\n   565→        \n   566→        /* Mostra pulsanti su desktop */\n   567→        @media (min-width: 1024px) {\n   568→            .elementor-scroller-wrapper:hover .nav-button:not(:disabled) {\n   569→                display: flex;\n   570→            }\n   571→            \n   572→            .elementor-scroller-wrapper:focus-within .nav-button:not(:disabled) {\n   573→                display: flex;\n   574→            }\n   575→        }\n   576→        \n   577→        /* Progress bar sottile */\n   578→        .scroll-progress {\n   579→            position: absolute;\n   580→            bottom: 0;\n   581→            left: 0;\n   582→            height: 3px;\n   583→            background: var(--e-global-color-primary, #0066cc);\n   584→            transition: width 0.2s ease, opacity 0.3s ease;\n   585→            pointer-events: none;\n   586→            z-index: 5;\n   587→            opacity: 0;\n   588→            border-radius: 0 3px 3px 0;\n   589→        }\n   590→        \n   591→        /* Mostra progress bar su hover/focus */\n   592→        .elementor-scroller-wrapper:hover .scroll-progress,\n   593→        .elementor-scroller-wrapper:focus-within .scroll-progress {\n   594→            opacity: 0.7;\n   595→        }\n   596→        \n   597→        /* Non sovrascriviamo cursor - già impostato nel CSS esistente */\n   598→        \n   599→        /* Focus migliore - solo se non già presente */\n   600→        .scrollable-container:focus-visible {\n   601→            outline: 2px solid var(--e-global-color-primary, #0066cc);\n   602→            outline-offset: 2px;\n   603→        }\n   604→        \n   605→        /* Supporta la classe keyboard-scrolling esistente */\n   606→        .scrollable-container.keyboard-scrolling {\n   607→            scroll-behavior: smooth !important;\n   608→        }\n   609→        \n   610→        /* Screen reader only */\n   611→        .sr-only {\n   612→            position: absolute;\n   613→            width: 1px;\n   614→            height: 1px;\n   615→            padding: 0;\n   616→            margin: -1px;\n   617→            overflow: hidden;\n   618→            clip: rect(0,0,0,0);\n   619→            white-space: nowrap;\n   620→            border: 0;\n   621→        }\n   622→        \n   623→        /* Indicatori di pagina opzionali */\n   624→        .scroll-indicators {\n   625→            display: flex;\n   626→            justify-content: center;\n   627→            gap: 8px;\n   628→            margin-top: 16px;\n   629→            padding: 8px;\n   630→        }\n   631→        \n   632→        .scroll-indicator {\n   633→            width: 8px;\n   634→            height: 8px;\n   635→            border-radius: 50%;\n   636→            background: #ddd;\n   637→            transition: all 0.3s ease;\n   638→            cursor: pointer;\n   639→            border: none;\n   640→            padding: 0;\n   641→        }\n   642→        \n   643→        .scroll-indicator:hover {\n   644→            background: #999;\n   645→            transform: scale(1.2);\n   646→        }\n   647→        \n   648→        .scroll-indicator.active {\n   649→            background: var(--e-global-color-primary, #333);\n   650→            width: 24px;\n   651→            border-radius: 4px;\n   652→        }\n   653→        \n   654→        /* Supporto reduced motion */\n   655→        @media (prefers-reduced-motion: reduce) {\n   656→            * {\n   657→                animation-duration: 0.01ms !important;\n   658→                animation-iteration-count: 1 !important;\n   659→                transition-duration: 0.01ms !important;\n   660→            }\n   661→            \n   662→            .scrollable-container {\n   663→                scroll-behavior: auto !important;\n   664→            }\n   665→            \n   666→            .nav-button {\n   667→                transition: none !important;\n   668→            }\n   669→            \n   670→            .scroll-progress {\n   671→                transition: none !important;\n   672→            }\n   673→        }\n   674→        \n   675→        /* Migliora contrasto per accessibilità */\n   676→        @media (prefers-contrast: high) {\n   677→            .nav-button {\n   678→                background: #fff;\n   679→                border: 2px solid #000;\n   680→            }\n   681→            \n   682→            .nav-button:hover:not(:disabled) {\n   683→                background: #000;\n   684→                color: #fff;\n   685→            }\n   686→            \n   687→            .nav-button:hover:not(:disabled) svg {\n   688→                color: #fff;\n   689→            }\n   690→            \n   691→            .scroll-progress {\n   692→                background: #000;\n   693→            }\n   694→        }\n   695→        \n   696→        /* Dark mode support */\n   697→        @media (prefers-color-scheme: dark) {\n   698→            .nav-button {\n   699→                background: var(--e-global-color-primary);\n   700→                border-color: var(--e-global-color-primary);\n   701→            }\n   702→            \n   703→            .nav-button svg {\n   704→                color: #fff;\n   705→            }\n   706→            \n   707→            .nav-button:hover:not(:disabled) {\n   708→                background: var(--e-global-color-2de3d7d);\n   709→                border-color: var(--e-global-color-2de3d7d);\n   710→            }\n   711→            \n   712→            .scroll-indicator {\n   713→                background: #555;\n   714→            }\n   715→            \n   716→            .scroll-indicator:hover {\n   717→                background: #777;\n   718→            }\n   719→            \n   720→            .scroll-indicator.active {\n   721→                background: #fff;\n   722→            }\n   723→        }\n   724→    </style>\n   725→`;\n   726→\n   727→// Inizializzazione\n   728→function initImprovedScrollers() {\n   729→    // Inietta stili se non presenti\n   730→    if (!document.getElementById('improved-scroller-styles')) {\n   731→        document.head.insertAdjacentHTML('beforeend', improvedStyles);\n   732→    }\n   733→    \n   734→    // Trova tutti i container scrollabili\n   735→    const containers = document.querySelectorAll('.scrollable-container');\n   736→    \n   737→    containers.forEach(container => {\n   738→        // Skip se già inizializzato\n   739→        if (container.hasAttribute('data-improved-scroller')) return;\n   740→        \n   741→        // Inizializza solo se c'è overflow orizzontale\n   742→        if (container.scrollWidth > container.clientWidth) {\n   743→            new ImprovedElementorScroller(container);\n   744→            container.setAttribute('data-improved-scroller', 'true');\n   745→        }\n   746→    });\n   747→}\n   748→\n   749→// Inizializza quando DOM è pronto\n   750→if (document.readyState === 'loading') {\n   751→    document.addEventListener('DOMContentLoaded', initImprovedScrollers);\n   752→} else {\n   753→    initImprovedScrollers();\n   754→}\n   755→\n   756→// Hook per Elementor\n   757→if (typeof jQuery !== 'undefined') {\n   758→    jQuery(window).on('elementor/frontend/init', function() {\n   759→        if (window.elementorFrontend && window.elementorFrontend.hooks) {\n   760→            elementorFrontend.hooks.addAction('frontend/element_ready/widget', function() {\n   761→                setTimeout(initImprovedScrollers, 100);\n   762→            });\n   763→        }\n   764→    });\n   765→} else {\n   766→    // Fallback observer per contenuti dinamici\n   767→    const observer = new MutationObserver(() => {\n   768→        initImprovedScrollers();\n   769→    });\n   770→    \n   771→    observer.observe(document.body, {\n   772→        childList: true,\n   773→        subtree: true\n   774→    });\n   775→}\n   776→\n   777→// Re-inizializza su resize\n   778→let resizeTimeout;\n   779→window.addEventListener('resize', () => {\n   780→    clearTimeout(resizeTimeout);\n   781→    resizeTimeout = setTimeout(initImprovedScrollers, 250);\n   782→});\n   783→\n   784→console.log('Improved Elementor Scroller v2.0 loaded');"}]},"uuid":"fc8ea9d4-7eae-4678-b74a-28a17df823cd","timestamp":"2025-07-29T07:14:39.528Z","toolUseResult":{"filePath":"/Users/disconnesso/Sites/villastuart.it/wp-content/themes/hello-villa-stuart/assets/js/improved-scroller.js","oldString":"/**\n * Slider Orizzontale Migliorato per Elementor\n * Versione 2.0 - Ottimizzato per Desktop con Accessibilità\n */\n\n// Classe principale per gestire lo slider\nclass ImprovedElementorScroller {\n    constructor(container) {\n        this.container = container;\n        this.wrapper = null;\n        this.isScrolling = false;\n        this.scrollTimeout = null;\n        \n        // Feature detection\n        this.supportsPassive = this.checkPassiveSupport();\n        this.supportsScrollBehavior = 'scrollBehavior' in document.documentElement.style;\n        \n        // Inizializza\n        this.init();\n    }\n    \n    // Check supporto passive listeners\n    checkPassiveSupport() {\n        let supportsPassive = false;\n        try {\n            const opts = Object.defineProperty({}, 'passive', {\n                get: () => { supportsPassive = true; }\n            });\n            window.addEventListener('testPassive', null, opts);\n            window.removeEventListener('testPassive', null, opts);\n        } catch (e) {}\n        return supportsPassive;\n    }\n    \n    init() {\n        // Crea wrapper per aggiungere controlli senza modificare HTML\n        this.wrapContainer();\n        \n        // Setup features\n        this.setupNavButtons();\n        this.setupKeyboard();\n        this.setupMouseWheel();\n        this.setupTouch();\n        this.setupScrollIndicator();\n        this.setupAccessibility();\n        \n        // Aggiorna stato iniziale\n        this.updateUI();\n    }\n    \n    // Wrap container esistente per aggiungere controlli\n    wrapContainer() {\n        // Se già wrappato, esci\n        if (this.container.parentElement.classList.contains('elementor-scroller-wrapper')) {\n            this.wrapper = this.container.parentElement;\n            return;\n        }\n        \n        // Crea wrapper\n        this.wrapper = document.createElement('div');\n        this.wrapper.className = 'elementor-scroller-wrapper';\n        this.wrapper.style.position = 'relative';\n        \n        // Inserisci wrapper\n        this.container.parentNode.insertBefore(this.wrapper, this.container);\n        this.wrapper.appendChild(this.container);\n    }\n    \n    // Setup pulsanti navigazione\n    setupNavButtons() {\n        // Crea pulsanti solo se non esistono\n        if (!this.wrapper.querySelector('.nav-button')) {\n            // Pulsante precedente\n            const prevButton = document.createElement('button');\n            prevButton.className = 'nav-button nav-prev';\n            prevButton.innerHTML = `\n                <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                    <path d=\"M15 18l-6-6 6-6\"/>\n                </svg>\n            `;\n            prevButton.setAttribute('aria-label', 'Scorri a sinistra');\n            prevButton.addEventListener('click', () => this.scrollPrev());\n            \n            // Pulsante successivo\n            const nextButton = document.createElement('button');\n            nextButton.className = 'nav-button nav-next';\n            nextButton.innerHTML = `\n                <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                    <path d=\"M9 18l6-6-6-6\"/>\n                </svg>\n            `;\n            nextButton.setAttribute('aria-label', 'Scorri a destra');\n            nextButton.addEventListener('click', () => this.scrollNext());\n            \n            // Aggiungi al wrapper\n            this.wrapper.appendChild(prevButton);\n            this.wrapper.appendChild(nextButton);\n            \n            // Store references\n            this.prevButton = prevButton;\n            this.nextButton = nextButton;\n        }\n    }\n    \n    // Setup tastiera migliorato\n    setupKeyboard() {\n        this.container.addEventListener('keydown', (e) => {\n            const scrollAmount = this.container.clientWidth * 0.8;\n            let handled = true;\n            \n            // Aggiungi classe per smooth scroll da tastiera\n            this.container.classList.add('keyboard-scrolling');\n            \n            switch(e.key) {\n                case 'ArrowLeft':\n                    this.smoothScroll(-scrollAmount);\n                    break;\n                case 'ArrowRight':\n                    this.smoothScroll(scrollAmount);\n                    break;\n                case 'Home':\n                    this.scrollToStart();\n                    break;\n                case 'End':\n                    this.scrollToEnd();\n                    break;\n                default:\n                    handled = false;\n            }\n            \n            if (handled) {\n                e.preventDefault();\n                // Rimuovi classe dopo animazione\n                setTimeout(() => {\n                    this.container.classList.remove('keyboard-scrolling');\n                }, 400);\n            } else {\n                this.container.classList.remove('keyboard-scrolling');\n            }\n        });\n    }\n    \n    // Setup mouse wheel - MIGLIORAMENTO CHIAVE\n    setupMouseWheel() {\n        let accumulatedDelta = 0;\n        let wheelTimeout;\n        \n        const wheelHandler = (e) => {\n            // Solo se container è in hover o focus\n            if (!this.container.matches(':hover, :focus-within')) return;\n            \n            e.preventDefault();\n            \n            // Accumula piccoli delta per scroll più fluido\n            accumulatedDelta += e.deltaY;\n            \n            clearTimeout(wheelTimeout);\n            wheelTimeout = setTimeout(() => {\n                if (Math.abs(accumulatedDelta) > 10) {\n                    // Normalizza e applica scroll\n                    const scrollAmount = Math.sign(accumulatedDelta) * Math.min(Math.abs(accumulatedDelta), 300);\n                    this.smoothScroll(scrollAmount);\n                }\n                accumulatedDelta = 0;\n            }, 50);\n        };\n        \n        // Aggiungi listener con passive false\n        this.container.addEventListener('wheel', wheelHandler, \n            this.supportsPassive ? { passive: false } : false\n        );\n    }\n    \n    // Setup touch con momentum migliorato\n    setupTouch() {\n        let startX = 0;\n        let scrollLeft = 0;\n        let isDragging = false;\n        let animationId = null;\n        let velocity = 0;\n        let lastX = 0;\n        let lastTime = 0;\n        \n        const startDragging = (pageX) => {\n            isDragging = true;\n            startX = pageX;\n            lastX = pageX;\n            scrollLeft = this.container.scrollLeft;\n            lastTime = Date.now();\n            velocity = 0;\n            \n            // Cancella animazioni\n            if (animationId) {\n                cancelAnimationFrame(animationId);\n            }\n            \n            // La classe 'active' è già nel CSS esistente per cursor grabbing\n            this.container.classList.add('active');\n        };\n        \n        const drag = (pageX) => {\n            if (!isDragging) return;\n            \n            const currentTime = Date.now();\n            const timeDelta = currentTime - lastTime;\n            const distance = pageX - lastX;\n            \n            // Calcola velocità\n            if (timeDelta > 0) {\n                velocity = distance / timeDelta * 16; // Normalizza a 60fps\n            }\n            \n            const walk = (pageX - startX) * 1.5;\n            this.container.scrollLeft = scrollLeft - walk;\n            \n            lastX = pageX;\n            lastTime = currentTime;\n        };\n        \n        const stopDragging = () => {\n            if (!isDragging) return;\n            \n            isDragging = false;\n            this.container.classList.remove('active');\n            \n            // Applica momentum se c'è velocità\n            if (Math.abs(velocity) > 2) {\n                const deceleration = 0.95;\n                \n                const animate = () => {\n                    if (Math.abs(velocity) > 0.5) {\n                        this.container.scrollLeft -= velocity;\n                        velocity *= deceleration;\n                        animationId = requestAnimationFrame(animate);\n                    } else {\n                        this.updateUI();\n                    }\n                };\n                \n                animate();\n            } else {\n                this.updateUI();\n            }\n        };\n        \n        // Mouse events\n        this.container.addEventListener('mousedown', (e) => {\n            startDragging(e.pageX);\n        });\n        \n        document.addEventListener('mousemove', (e) => {\n            drag(e.pageX);\n        });\n        \n        document.addEventListener('mouseup', stopDragging);\n        \n        // Touch events\n        this.container.addEventListener('touchstart', (e) => {\n            startDragging(e.touches[0].pageX);\n        }, this.supportsPassive ? { passive: true } : false);\n        \n        this.container.addEventListener('touchmove', (e) => {\n            drag(e.touches[0].pageX);\n        }, this.supportsPassive ? { passive: true } : false);\n        \n        this.container.addEventListener('touchend', stopDragging);\n        this.container.addEventListener('touchcancel', stopDragging);\n    }\n    \n    // Setup indicatore di scroll\n    setupScrollIndicator() {\n        // Crea progress bar solo se non nascosta da design\n        if (!this.wrapper.classList.contains('hide-progress')) {\n            const progressBar = document.createElement('div');\n            progressBar.className = 'scroll-progress';\n            progressBar.setAttribute('role', 'progressbar');\n            progressBar.setAttribute('aria-label', 'Progresso scroll');\n            progressBar.setAttribute('aria-valuemin', '0');\n            progressBar.setAttribute('aria-valuemax', '100');\n            \n            this.wrapper.appendChild(progressBar);\n            this.progressBar = progressBar;\n        }\n        \n        // Aggiorna su scroll\n        let ticking = false;\n        this.container.addEventListener('scroll', () => {\n            if (!ticking) {\n                requestAnimationFrame(() => {\n                    this.updateUI();\n                    ticking = false;\n                });\n                ticking = true;\n            }\n        }, this.supportsPassive ? { passive: true } : false);\n    }\n    \n    // Setup accessibilità\n    setupAccessibility() {\n        // ARIA labels\n        this.container.setAttribute('role', 'region');\n        this.container.setAttribute('aria-label', 'Contenuti scrollabili orizzontalmente');\n        \n        // Live region per annunci\n        const liveRegion = document.createElement('div');\n        liveRegion.className = 'sr-only';\n        liveRegion.setAttribute('role', 'status');\n        liveRegion.setAttribute('aria-live', 'polite');\n        liveRegion.setAttribute('aria-atomic', 'true');\n        liveRegion.style.cssText = `\n            position: absolute;\n            width: 1px;\n            height: 1px;\n            padding: 0;\n            margin: -1px;\n            overflow: hidden;\n            clip: rect(0,0,0,0);\n            white-space: nowrap;\n            border: 0;\n        `;\n        \n        this.wrapper.appendChild(liveRegion);\n        this.liveRegion = liveRegion;\n    }\n    \n    // Scroll fluido\n    smoothScroll(distance) {\n        if (this.supportsScrollBehavior) {\n            this.container.scrollBy({\n                left: distance,\n                behavior: 'smooth'\n            });\n        } else {\n            // Fallback animato\n            this.animateScroll(this.container.scrollLeft + distance);\n        }\n    }\n    \n    // Animazione scroll per fallback\n    animateScroll(target) {\n        const start = this.container.scrollLeft;\n        const distance = target - start;\n        const duration = 300;\n        let startTime = null;\n        \n        const animation = (currentTime) => {\n            if (!startTime) startTime = currentTime;\n            const elapsed = currentTime - startTime;\n            const progress = Math.min(elapsed / duration, 1);\n            \n            // Easing\n            const easeInOutQuad = progress < 0.5\n                ? 2 * progress * progress\n                : 1 - Math.pow(-2 * progress + 2, 2) / 2;\n            \n            this.container.scrollLeft = start + distance * easeInOutQuad;\n            \n            if (progress < 1) {\n                requestAnimationFrame(animation);\n            } else {\n                this.updateUI();\n            }\n        };\n        \n        requestAnimationFrame(animation);\n    }\n    \n    // Metodi di navigazione\n    scrollPrev() {\n        const scrollAmount = this.container.clientWidth * 0.8;\n        this.smoothScroll(-scrollAmount);\n        this.announce('Scorrimento a sinistra');\n    }\n    \n    scrollNext() {\n        const scrollAmount = this.container.clientWidth * 0.8;\n        this.smoothScroll(scrollAmount);\n        this.announce('Scorrimento a destra');\n    }\n    \n    scrollToStart() {\n        this.container.scrollTo({\n            left: 0,\n            behavior: this.supportsScrollBehavior ? 'smooth' : 'auto'\n        });\n        this.announce('Inizio dei contenuti');\n    }\n    \n    scrollToEnd() {\n        const maxScroll = this.container.scrollWidth - this.container.clientWidth;\n        this.container.scrollTo({\n            left: maxScroll,\n            behavior: this.supportsScrollBehavior ? 'smooth' : 'auto'\n        });\n        this.announce('Fine dei contenuti');\n    }\n    \n    // Aggiorna UI\n    updateUI() {\n        const scrollLeft = this.container.scrollLeft;\n        const maxScroll = this.container.scrollWidth - this.container.clientWidth;\n        \n        // Aggiorna pulsanti\n        if (this.prevButton && this.nextButton) {\n            this.prevButton.disabled = scrollLeft <= 0;\n            this.nextButton.disabled = scrollLeft >= maxScroll - 1;\n            \n            // Aggiorna ARIA\n            this.prevButton.setAttribute('aria-disabled', scrollLeft <= 0);\n            this.nextButton.setAttribute('aria-disabled', scrollLeft >= maxScroll - 1);\n        }\n        \n        // Aggiorna progress bar\n        if (this.progressBar && maxScroll > 0) {\n            const progress = (scrollLeft / maxScroll) * 100;\n            this.progressBar.style.width = `${progress}%`;\n            this.progressBar.setAttribute('aria-valuenow', Math.round(progress));\n        }\n    }\n    \n    // Annuncia a screen reader\n    announce(message) {\n        if (this.liveRegion) {\n            this.liveRegion.textContent = message;\n            // Reset dopo annuncio\n            setTimeout(() => {\n                this.liveRegion.textContent = '';\n            }, 1000);\n        }\n    }\n}\n\n// CSS da iniettare - Adattato per CSS Elementor esistente\nconst improvedStyles = `\n    <style id=\"improved-scroller-styles\">\n        /* Wrapper styles */\n        .elementor-scroller-wrapper {\n            position: relative;\n        }\n        \n        /* Nasconde scrollbar orizzontale su desktop mantenendo lo scroll */\n        .scrollable-container {\n            /* Firefox */\n            scrollbar-width: none;\n            \n            /* IE 10+ */\n            -ms-overflow-style: none;\n        }\n        \n        /* Chrome, Safari, Opera, Edge */\n        .scrollable-container::-webkit-scrollbar {\n            width: 0 !important;\n            height: 0 !important;\n            display: none;\n        }\n        \n        .scrollable-container::-webkit-scrollbar-track {\n            background: transparent;\n        }\n        \n        .scrollable-container::-webkit-scrollbar-thumb {\n            background: transparent;\n            border: none;\n        }\n        \n        /* Supporto per browser più vecchi */\n        @supports not (scrollbar-width: none) {\n            .scrollable-container {\n                margin-bottom: -17px;\n                padding-bottom: 17px;\n            }\n        }\n        \n        /* Pulsanti navigazione */\n        .nav-button {\n            position: absolute;\n            top: 50%;\n            transform: translateY(-50%);\n            width: 48px;\n            height: 48px;\n            background: rgba(255, 255, 255, 0.95);\n            border: 1px solid #ddd;\n            border-radius: 50%;\n            cursor: pointer;\n            display: none;\n            align-items: center;\n            justify-content: center;\n            z-index: 10;\n            transition: all 0.3s ease;\n            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n            \n            /* Assicura che sia sopra il contenuto */\n            pointer-events: auto;\n        }\n        \n        .nav-button {\n            background: var(--e-global-color-primary);\n        }\n        \n        .nav-button svg {\n            width: 24px;\n            height: 24px;\n            color: #fff;\n        }\n        \n        .nav-button:hover:not(:disabled) {\n            background: var(--e-global-color-2de3d7d);\n            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n            transform: translateY(-50%) scale(1.1);\n        }\n        \n        .nav-button:active {\n            transform: translateY(-50%) scale(0.95);\n        }\n        \n        .nav-button:hover:not(:disabled) {\n            background: var(--e-global-color-2de3d7d);\n            border-color: var(--e-global-color-2de3d7d);\n        }\n        \n        .nav-button:active {\n            transform: translateY(-50%) scale(0.95);\n        }\n        \n        .nav-button:disabled {\n            opacity: 0.3;\n            cursor: not-allowed;\n        }\n        \n        .nav-button:disabled:hover {\n            transform: translateY(-50%);\n        }\n        \n        .nav-button:focus {\n            outline: 2px solid var(--e-global-color-primary, #0066cc);\n            outline-offset: 2px;\n        }\n        \n        .nav-prev {\n            left: 10px;\n        }\n        \n        .nav-next {\n            right: 10px;\n        }\n        \n        /* Mostra pulsanti su desktop */\n        @media (min-width: 1024px) {\n            .elementor-scroller-wrapper:hover .nav-button:not(:disabled) {\n                display: flex;\n            }\n            \n            .elementor-scroller-wrapper:focus-within .nav-button:not(:disabled) {\n                display: flex;\n            }\n        }\n        \n        /* Progress bar sottile */\n        .scroll-progress {\n            position: absolute;\n            bottom: 0;\n            left: 0;\n            height: 3px;\n            background: var(--e-global-color-primary, #0066cc);\n            transition: width 0.2s ease, opacity 0.3s ease;\n            pointer-events: none;\n            z-index: 5;\n            opacity: 0;\n            border-radius: 0 3px 3px 0;\n        }\n        \n        /* Mostra progress bar su hover/focus */\n        .elementor-scroller-wrapper:hover .scroll-progress,\n        .elementor-scroller-wrapper:focus-within .scroll-progress {\n            opacity: 0.7;\n        }\n        \n        /* Non sovrascriviamo cursor - già impostato nel CSS esistente */\n        \n        /* Focus migliore - solo se non già presente */\n        .scrollable-container:focus-visible {\n            outline: 2px solid var(--e-global-color-primary, #0066cc);\n            outline-offset: 2px;\n        }\n        \n        /* Supporta la classe keyboard-scrolling esistente */\n        .scrollable-container.keyboard-scrolling {\n            scroll-behavior: smooth !important;\n        }\n        \n        /* Screen reader only */\n        .sr-only {\n            position: absolute;\n            width: 1px;\n            height: 1px;\n            padding: 0;\n            margin: -1px;\n            overflow: hidden;\n            clip: rect(0,0,0,0);\n            white-space: nowrap;\n            border: 0;\n        }\n        \n        /* Indicatori di pagina opzionali */\n        .scroll-indicators {\n            display: flex;\n            justify-content: center;\n            gap: 8px;\n            margin-top: 16px;\n            padding: 8px;\n        }\n        \n        .scroll-indicator {\n            width: 8px;\n            height: 8px;\n            border-radius: 50%;\n            background: #ddd;\n            transition: all 0.3s ease;\n            cursor: pointer;\n            border: none;\n            padding: 0;\n        }\n        \n        .scroll-indicator:hover {\n            background: #999;\n            transform: scale(1.2);\n        }\n        \n        .scroll-indicator.active {\n            background: var(--e-global-color-primary, #333);\n            width: 24px;\n            border-radius: 4px;\n        }\n        \n        /* Supporto reduced motion */\n        @media (prefers-reduced-motion: reduce) {\n            * {\n                animation-duration: 0.01ms !important;\n                animation-iteration-count: 1 !important;\n                transition-duration: 0.01ms !important;\n            }\n            \n            .scrollable-container {\n                scroll-behavior: auto !important;\n            }\n            \n            .nav-button {\n                transition: none !important;\n            }\n            \n            .scroll-progress {\n                transition: none !important;\n            }\n        }\n        \n        /* Migliora contrasto per accessibilità */\n        @media (prefers-contrast: high) {\n            .nav-button {\n                background: #fff;\n                border: 2px solid #000;\n            }\n            \n            .nav-button:hover:not(:disabled) {\n                background: #000;\n                color: #fff;\n            }\n            \n            .nav-button:hover:not(:disabled) svg {\n                color: #fff;\n            }\n            \n            .scroll-progress {\n                background: #000;\n            }\n        }\n        \n        /* Dark mode support */\n        @media (prefers-color-scheme: dark) {\n            .nav-button {\n                background: var(--e-global-color-primary);\n                border-color: var(--e-global-color-primary);\n            }\n            \n            .nav-button svg {\n                color: #fff;\n            }\n            \n            .nav-button:hover:not(:disabled) {\n                background: var(--e-global-color-2de3d7d);\n                border-color: var(--e-global-color-2de3d7d);\n            }\n            \n            .scroll-indicator {\n                background: #555;\n            }\n            \n            .scroll-indicator:hover {\n                background: #777;\n            }\n            \n            .scroll-indicator.active {\n                background: #fff;\n            }\n        }\n    </style>\n`;\n\n// Inizializzazione\nfunction initImprovedScrollers() {\n    // Inietta stili se non presenti\n    if (!document.getElementById('improved-scroller-styles')) {\n        document.head.insertAdjacentHTML('beforeend', improvedStyles);\n    }\n    \n    // Trova tutti i container scrollabili\n    const containers = document.querySelectorAll('.scrollable-container');\n    \n    containers.forEach(container => {\n        // Skip se già inizializzato\n        if (container.hasAttribute('data-improved-scroller')) return;\n        \n        // Inizializza solo se c'è overflow orizzontale\n        if (container.scrollWidth > container.clientWidth) {\n            new ImprovedElementorScroller(container);\n            container.setAttribute('data-improved-scroller', 'true');\n        }\n    });\n}\n\n// Inizializza quando DOM è pronto\nif (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', initImprovedScrollers);\n} else {\n    initImprovedScrollers();\n}\n\n// Hook per Elementor\nif (typeof jQuery !== 'undefined') {\n    jQuery(window).on('elementor/frontend/init', function() {\n        if (window.elementorFrontend && window.elementorFrontend.hooks) {\n            elementorFrontend.hooks.addAction('frontend/element_ready/widget', function() {\n                setTimeout(initImprovedScrollers, 100);\n            });\n        }\n    });\n} else {\n    // Fallback observer per contenuti dinamici\n    const observer = new MutationObserver(() => {\n        initImprovedScrollers();\n    });\n    \n    observer.observe(document.body, {\n        childList: true,\n        subtree: true\n    });\n}\n\n// Re-inizializza su resize\nlet resizeTimeout;\nwindow.addEventListener('resize', () => {\n    clearTimeout(resizeTimeout);\n    resizeTimeout = setTimeout(initImprovedScrollers, 250);\n});\n\nconsole.log('Improved Elementor Scroller v2.0 loaded');","newString":"/**\n * Slider Orizzontale Migliorato per Elementor\n * Versione 2.0 - Ottimizzato per Desktop con Accessibilità\n */\n\n// Classe principale per gestire lo slider\nclass ImprovedElementorScroller {\n    constructor(container) {\n        this.container = container;\n        this.wrapper = null;\n        this.isScrolling = false;\n        this.scrollTimeout = null;\n        \n        // Feature detection\n        this.supportsPassive = this.checkPassiveSupport();\n        this.supportsScrollBehavior = 'scrollBehavior' in document.documentElement.style;\n        \n        // Inizializza\n        this.init();\n    }\n    \n    // Check supporto passive listeners\n    checkPassiveSupport() {\n        let supportsPassive = false;\n        try {\n            const opts = Object.defineProperty({}, 'passive', {\n                get: () => { supportsPassive = true; }\n            });\n            window.addEventListener('testPassive', null, opts);\n            window.removeEventListener('testPassive', null, opts);\n        } catch (e) {}\n        return supportsPassive;\n    }\n    \n    init() {\n        // Crea wrapper per aggiungere controlli senza modificare HTML\n        this.wrapContainer();\n        \n        // Setup features\n        this.setupNavButtons();\n        this.setupKeyboard();\n        this.setupMouseWheel();\n        this.setupTouch();\n        this.setupScrollIndicator();\n        this.setupAccessibility();\n        \n        // Aggiorna stato iniziale\n        this.updateUI();\n    }\n    \n    // Wrap container esistente per aggiungere controlli\n    wrapContainer() {\n        // Se già wrappato, esci\n        if (this.container.parentElement.classList.contains('elementor-scroller-wrapper')) {\n            this.wrapper = this.container.parentElement;\n            return;\n        }\n        \n        // Crea wrapper\n        this.wrapper = document.createElement('div');\n        this.wrapper.className = 'elementor-scroller-wrapper';\n        this.wrapper.style.position = 'relative';\n        \n        // Inserisci wrapper\n        this.container.parentNode.insertBefore(this.wrapper, this.container);\n        this.wrapper.appendChild(this.container);\n    }\n    \n    // Setup pulsanti navigazione\n    setupNavButtons() {\n        // Crea pulsanti solo se non esistono\n        if (!this.wrapper.querySelector('.nav-button')) {\n            // Pulsante precedente\n            const prevButton = document.createElement('button');\n            prevButton.className = 'nav-button nav-prev';\n            prevButton.innerHTML = `\n                <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                    <path d=\"M15 18l-6-6 6-6\"/>\n                </svg>\n            `;\n            prevButton.setAttribute('aria-label', 'Scorri a sinistra');\n            prevButton.addEventListener('click', () => this.scrollPrev());\n            \n            // Pulsante successivo\n            const nextButton = document.createElement('button');\n            nextButton.className = 'nav-button nav-next';\n            nextButton.innerHTML = `\n                <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                    <path d=\"M9 18l6-6-6-6\"/>\n                </svg>\n            `;\n            nextButton.setAttribute('aria-label', 'Scorri a destra');\n            nextButton.addEventListener('click', () => this.scrollNext());\n            \n            // Aggiungi al wrapper\n            this.wrapper.appendChild(prevButton);\n            this.wrapper.appendChild(nextButton);\n            \n            // Store references\n            this.prevButton = prevButton;\n            this.nextButton = nextButton;\n        }\n    }\n    \n    // Setup tastiera migliorato\n    setupKeyboard() {\n        this.container.addEventListener('keydown', (e) => {\n            const scrollAmount = this.container.clientWidth * 0.8;\n            let handled = true;\n            \n            // Aggiungi classe per smooth scroll da tastiera\n            this.container.classList.add('keyboard-scrolling');\n            \n            switch(e.key) {\n                case 'ArrowLeft':\n                    this.smoothScroll(-scrollAmount);\n                    break;\n                case 'ArrowRight':\n                    this.smoothScroll(scrollAmount);\n                    break;\n                case 'Home':\n                    this.scrollToStart();\n                    break;\n                case 'End':\n                    this.scrollToEnd();\n                    break;\n                default:\n                    handled = false;\n            }\n            \n            if (handled) {\n                e.preventDefault();\n                // Rimuovi classe dopo animazione\n                setTimeout(() => {\n                    this.container.classList.remove('keyboard-scrolling');\n                }, 400);\n            } else {\n                this.container.classList.remove('keyboard-scrolling');\n            }\n        });\n    }\n    \n    // Setup mouse wheel - MIGLIORAMENTO CHIAVE\n    setupMouseWheel() {\n        let accumulatedDelta = 0;\n        let wheelTimeout;\n        \n        const wheelHandler = (e) => {\n            // Solo se container è in hover o focus\n            if (!this.container.matches(':hover, :focus-within')) return;\n            \n            e.preventDefault();\n            \n            // Accumula piccoli delta per scroll più fluido\n            accumulatedDelta += e.deltaY;\n            \n            clearTimeout(wheelTimeout);\n            wheelTimeout = setTimeout(() => {\n                if (Math.abs(accumulatedDelta) > 10) {\n                    // Normalizza e applica scroll\n                    const scrollAmount = Math.sign(accumulatedDelta) * Math.min(Math.abs(accumulatedDelta), 300);\n                    this.smoothScroll(scrollAmount);\n                }\n                accumulatedDelta = 0;\n            }, 50);\n        };\n        \n        // Aggiungi listener con passive false\n        this.container.addEventListener('wheel', wheelHandler, \n            this.supportsPassive ? { passive: false } : false\n        );\n    }\n    \n    // Setup touch con momentum migliorato\n    setupTouch() {\n        let startX = 0;\n        let scrollLeft = 0;\n        let isDragging = false;\n        let animationId = null;\n        let velocity = 0;\n        let lastX = 0;\n        let lastTime = 0;\n        \n        const startDragging = (pageX) => {\n            isDragging = true;\n            startX = pageX;\n            lastX = pageX;\n            scrollLeft = this.container.scrollLeft;\n            lastTime = Date.now();\n            velocity = 0;\n            \n            // Cancella animazioni\n            if (animationId) {\n                cancelAnimationFrame(animationId);\n            }\n            \n            // La classe 'active' è già nel CSS esistente per cursor grabbing\n            this.container.classList.add('active');\n        };\n        \n        const drag = (pageX) => {\n            if (!isDragging) return;\n            \n            const currentTime = Date.now();\n            const timeDelta = currentTime - lastTime;\n            const distance = pageX - lastX;\n            \n            // Calcola velocità\n            if (timeDelta > 0) {\n                velocity = distance / timeDelta * 16; // Normalizza a 60fps\n            }\n            \n            const walk = (pageX - startX) * 1.5;\n            this.container.scrollLeft = scrollLeft - walk;\n            \n            lastX = pageX;\n            lastTime = currentTime;\n        };\n        \n        const stopDragging = () => {\n            if (!isDragging) return;\n            \n            isDragging = false;\n            this.container.classList.remove('active');\n            \n            // Applica momentum se c'è velocità\n            if (Math.abs(velocity) > 2) {\n                const deceleration = 0.95;\n                \n                const animate = () => {\n                    if (Math.abs(velocity) > 0.5) {\n                        this.container.scrollLeft -= velocity;\n                        velocity *= deceleration;\n                        animationId = requestAnimationFrame(animate);\n                    } else {\n                        this.updateUI();\n                    }\n                };\n                \n                animate();\n            } else {\n                this.updateUI();\n            }\n        };\n        \n        // Mouse events\n        this.container.addEventListener('mousedown', (e) => {\n            startDragging(e.pageX);\n        });\n        \n        document.addEventListener('mousemove', (e) => {\n            drag(e.pageX);\n        });\n        \n        document.addEventListener('mouseup', stopDragging);\n        \n        // Touch events\n        this.container.addEventListener('touchstart', (e) => {\n            startDragging(e.touches[0].pageX);\n        }, this.supportsPassive ? { passive: true } : false);\n        \n        this.container.addEventListener('touchmove', (e) => {\n            drag(e.touches[0].pageX);\n        }, this.supportsPassive ? { passive: true } : false);\n        \n        this.container.addEventListener('touchend', stopDragging);\n        this.container.addEventListener('touchcancel', stopDragging);\n    }\n    \n    // Setup indicatore di scroll\n    setupScrollIndicator() {\n        // Crea progress bar solo se non nascosta da design\n        if (!this.wrapper.classList.contains('hide-progress')) {\n            const progressBar = document.createElement('div');\n            progressBar.className = 'scroll-progress';\n            progressBar.setAttribute('role', 'progressbar');\n            progressBar.setAttribute('aria-label', 'Progresso scroll');\n            progressBar.setAttribute('aria-valuemin', '0');\n            progressBar.setAttribute('aria-valuemax', '100');\n            \n            this.wrapper.appendChild(progressBar);\n            this.progressBar = progressBar;\n        }\n        \n        // Aggiorna su scroll\n        let ticking = false;\n        this.container.addEventListener('scroll', () => {\n            if (!ticking) {\n                requestAnimationFrame(() => {\n                    this.updateUI();\n                    ticking = false;\n                });\n                ticking = true;\n            }\n        }, this.supportsPassive ? { passive: true } : false);\n    }\n    \n    // Setup accessibilità\n    setupAccessibility() {\n        // ARIA labels\n        this.container.setAttribute('role', 'region');\n        this.container.setAttribute('aria-label', 'Contenuti scrollabili orizzontalmente');\n        \n        // Live region per annunci\n        const liveRegion = document.createElement('div');\n        liveRegion.className = 'sr-only';\n        liveRegion.setAttribute('role', 'status');\n        liveRegion.setAttribute('aria-live', 'polite');\n        liveRegion.setAttribute('aria-atomic', 'true');\n        liveRegion.style.cssText = `\n            position: absolute;\n            width: 1px;\n            height: 1px;\n            padding: 0;\n            margin: -1px;\n            overflow: hidden;\n            clip: rect(0,0,0,0);\n            white-space: nowrap;\n            border: 0;\n        `;\n        \n        this.wrapper.appendChild(liveRegion);\n        this.liveRegion = liveRegion;\n    }\n    \n    // Scroll fluido\n    smoothScroll(distance) {\n        if (this.supportsScrollBehavior) {\n            this.container.scrollBy({\n                left: distance,\n                behavior: 'smooth'\n            });\n        } else {\n            // Fallback animato\n            this.animateScroll(this.container.scrollLeft + distance);\n        }\n    }\n    \n    // Animazione scroll per fallback\n    animateScroll(target) {\n        const start = this.container.scrollLeft;\n        const distance = target - start;\n        const duration = 300;\n        let startTime = null;\n        \n        const animation = (currentTime) => {\n            if (!startTime) startTime = currentTime;\n            const elapsed = currentTime - startTime;\n            const progress = Math.min(elapsed / duration, 1);\n            \n            // Easing\n            const easeInOutQuad = progress < 0.5\n                ? 2 * progress * progress\n                : 1 - Math.pow(-2 * progress + 2, 2) / 2;\n            \n            this.container.scrollLeft = start + distance * easeInOutQuad;\n            \n            if (progress < 1) {\n                requestAnimationFrame(animation);\n            } else {\n                this.updateUI();\n            }\n        };\n        \n        requestAnimationFrame(animation);\n    }\n    \n    // Metodi di navigazione\n    scrollPrev() {\n        const scrollAmount = this.container.clientWidth * 0.8;\n        this.smoothScroll(-scrollAmount);\n        this.announce('Scorrimento a sinistra');\n    }\n    \n    scrollNext() {\n        const scrollAmount = this.container.clientWidth * 0.8;\n        this.smoothScroll(scrollAmount);\n        this.announce('Scorrimento a destra');\n    }\n    \n    scrollToStart() {\n        this.container.scrollTo({\n            left: 0,\n            behavior: this.supportsScrollBehavior ? 'smooth' : 'auto'\n        });\n        this.announce('Inizio dei contenuti');\n    }\n    \n    scrollToEnd() {\n        const maxScroll = this.container.scrollWidth - this.container.clientWidth;\n        this.container.scrollTo({\n            left: maxScroll,\n            behavior: this.supportsScrollBehavior ? 'smooth' : 'auto'\n        });\n        this.announce('Fine dei contenuti');\n    }\n    \n    // Aggiorna UI\n    updateUI() {\n        const scrollLeft = this.container.scrollLeft;\n        const maxScroll = this.container.scrollWidth - this.container.clientWidth;\n        \n        // Aggiorna pulsanti\n        if (this.prevButton && this.nextButton) {\n            this.prevButton.disabled = scrollLeft <= 0;\n            this.nextButton.disabled = scrollLeft >= maxScroll - 1;\n            \n            // Aggiorna ARIA\n            this.prevButton.setAttribute('aria-disabled', scrollLeft <= 0);\n            this.nextButton.setAttribute('aria-disabled', scrollLeft >= maxScroll - 1);\n        }\n        \n        // Aggiorna progress bar\n        if (this.progressBar && maxScroll > 0) {\n            const progress = (scrollLeft / maxScroll) * 100;\n            this.progressBar.style.width = `${progress}%`;\n            this.progressBar.setAttribute('aria-valuenow', Math.round(progress));\n        }\n    }\n    \n    // Annuncia a screen reader\n    announce(message) {\n        if (this.liveRegion) {\n            this.liveRegion.textContent = message;\n            // Reset dopo annuncio\n            setTimeout(() => {\n                this.liveRegion.textContent = '';\n            }, 1000);\n        }\n    }\n}\n\n// CSS da iniettare - Adattato per CSS Elementor esistente\nconst improvedStyles = `\n    <style id=\"improved-scroller-styles\">\n        /* Wrapper styles */\n        .elementor-scroller-wrapper {\n            position: relative;\n        }\n        \n        /* Nasconde scrollbar orizzontale su desktop mantenendo lo scroll */\n        .scrollable-container {\n            /* Firefox */\n            scrollbar-width: none;\n            \n            /* IE 10+ */\n            -ms-overflow-style: none;\n            \n            /* Aggiunge spazio per l'ultima card */\n            padding-right: 30px;\n            box-sizing: content-box;\n        }\n        \n        /* Compensa il padding per il primo elemento */\n        .scrollable-container > *:first-child {\n            margin-left: 20px;\n        }\n        \n        /* Fix per Elementor - previeni che tagli il contenuto */\n        .elementor-widget-container {\n            overflow: visible !important;\n        }\n        \n        /* Fix per container con gap CSS */\n        .scrollable-container[style*=\"gap\"] {\n            padding-right: 50px;\n        }\n        \n        /* Chrome, Safari, Opera, Edge */\n        .scrollable-container::-webkit-scrollbar {\n            width: 0 !important;\n            height: 0 !important;\n            display: none;\n        }\n        \n        .scrollable-container::-webkit-scrollbar-track {\n            background: transparent;\n        }\n        \n        .scrollable-container::-webkit-scrollbar-thumb {\n            background: transparent;\n            border: none;\n        }\n        \n        /* Supporto per browser più vecchi */\n        @supports not (scrollbar-width: none) {\n            .scrollable-container {\n                margin-bottom: -17px;\n                padding-bottom: 17px;\n            }\n        }\n        \n        /* Pulsanti navigazione */\n        .nav-button {\n            position: absolute;\n            top: 50%;\n            transform: translateY(-50%);\n            width: 48px;\n            height: 48px;\n            background: rgba(255, 255, 255, 0.95);\n            border: 1px solid #ddd;\n            border-radius: 50%;\n            cursor: pointer;\n            display: none;\n            align-items: center;\n            justify-content: center;\n            z-index: 10;\n            transition: all 0.3s ease;\n            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n            \n            /* Assicura che sia sopra il contenuto */\n            pointer-events: auto;\n        }\n        \n        .nav-button {\n            background: var(--e-global-color-primary);\n        }\n        \n        .nav-button svg {\n            width: 24px;\n            height: 24px;\n            color: #fff;\n        }\n        \n        .nav-button:hover:not(:disabled) {\n            background: var(--e-global-color-2de3d7d);\n            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n            transform: translateY(-50%) scale(1.1);\n        }\n        \n        .nav-button:active {\n            transform: translateY(-50%) scale(0.95);\n        }\n        \n        .nav-button:hover:not(:disabled) {\n            background: var(--e-global-color-2de3d7d);\n            border-color: var(--e-global-color-2de3d7d);\n        }\n        \n        .nav-button:active {\n            transform: translateY(-50%) scale(0.95);\n        }\n        \n        .nav-button:disabled {\n            opacity: 0.3;\n            cursor: not-allowed;\n        }\n        \n        .nav-button:disabled:hover {\n            transform: translateY(-50%);\n        }\n        \n        .nav-button:focus {\n            outline: 2px solid var(--e-global-color-primary, #0066cc);\n            outline-offset: 2px;\n        }\n        \n        .nav-prev {\n            left: 10px;\n        }\n        \n        .nav-next {\n            right: 10px;\n        }\n        \n        /* Mostra pulsanti su desktop */\n        @media (min-width: 1024px) {\n            .elementor-scroller-wrapper:hover .nav-button:not(:disabled) {\n                display: flex;\n            }\n            \n            .elementor-scroller-wrapper:focus-within .nav-button:not(:disabled) {\n                display: flex;\n            }\n        }\n        \n        /* Progress bar sottile */\n        .scroll-progress {\n            position: absolute;\n            bottom: 0;\n            left: 0;\n            height: 3px;\n            background: var(--e-global-color-primary, #0066cc);\n            transition: width 0.2s ease, opacity 0.3s ease;\n            pointer-events: none;\n            z-index: 5;\n            opacity: 0;\n            border-radius: 0 3px 3px 0;\n        }\n        \n        /* Mostra progress bar su hover/focus */\n        .elementor-scroller-wrapper:hover .scroll-progress,\n        .elementor-scroller-wrapper:focus-within .scroll-progress {\n            opacity: 0.7;\n        }\n        \n        /* Non sovrascriviamo cursor - già impostato nel CSS esistente */\n        \n        /* Focus migliore - solo se non già presente */\n        .scrollable-container:focus-visible {\n            outline: 2px solid var(--e-global-color-primary, #0066cc);\n            outline-offset: 2px;\n        }\n        \n        /* Supporta la classe keyboard-scrolling esistente */\n        .scrollable-container.keyboard-scrolling {\n            scroll-behavior: smooth !important;\n        }\n        \n        /* Screen reader only */\n        .sr-only {\n            position: absolute;\n            width: 1px;\n            height: 1px;\n            padding: 0;\n            margin: -1px;\n            overflow: hidden;\n            clip: rect(0,0,0,0);\n            white-space: nowrap;\n            border: 0;\n        }\n        \n        /* Indicatori di pagina opzionali */\n        .scroll-indicators {\n            display: flex;\n            justify-content: center;\n            gap: 8px;\n            margin-top: 16px;\n            padding: 8px;\n        }\n        \n        .scroll-indicator {\n            width: 8px;\n            height: 8px;\n            border-radius: 50%;\n            background: #ddd;\n            transition: all 0.3s ease;\n            cursor: pointer;\n            border: none;\n            padding: 0;\n        }\n        \n        .scroll-indicator:hover {\n            background: #999;\n            transform: scale(1.2);\n        }\n        \n        .scroll-indicator.active {\n            background: var(--e-global-color-primary, #333);\n            width: 24px;\n            border-radius: 4px;\n        }\n        \n        /* Supporto reduced motion */\n        @media (prefers-reduced-motion: reduce) {\n            * {\n                animation-duration: 0.01ms !important;\n                animation-iteration-count: 1 !important;\n                transition-duration: 0.01ms !important;\n            }\n            \n            .scrollable-container {\n                scroll-behavior: auto !important;\n            }\n            \n            .nav-button {\n                transition: none !important;\n            }\n            \n            .scroll-progress {\n                transition: none !important;\n            }\n        }\n        \n        /* Migliora contrasto per accessibilità */\n        @media (prefers-contrast: high) {\n            .nav-button {\n                background: #fff;\n                border: 2px solid #000;\n            }\n            \n            .nav-button:hover:not(:disabled) {\n                background: #000;\n                color: #fff;\n            }\n            \n            .nav-button:hover:not(:disabled) svg {\n                color: #fff;\n            }\n            \n            .scroll-progress {\n                background: #000;\n            }\n        }\n        \n        /* Dark mode support */\n        @media (prefers-color-scheme: dark) {\n            .nav-button {\n                background: var(--e-global-color-primary);\n                border-color: var(--e-global-color-primary);\n            }\n            \n            .nav-button svg {\n                color: #fff;\n            }\n            \n            .nav-button:hover:not(:disabled) {\n                background: var(--e-global-color-2de3d7d);\n                border-color: var(--e-global-color-2de3d7d);\n            }\n            \n            .scroll-indicator {\n                background: #555;\n            }\n            \n            .scroll-indicator:hover {\n                background: #777;\n            }\n            \n            .scroll-indicator.active {\n                background: #fff;\n            }\n        }\n    </style>\n`;\n\n// Inizializzazione\nfunction initImprovedScrollers() {\n    // Inietta stili se non presenti\n    if (!document.getElementById('improved-scroller-styles')) {\n        document.head.insertAdjacentHTML('beforeend', improvedStyles);\n    }\n    \n    // Trova tutti i container scrollabili\n    const containers = document.querySelectorAll('.scrollable-container');\n    \n    containers.forEach(container => {\n        // Skip se già inizializzato\n        if (container.hasAttribute('data-improved-scroller')) return;\n        \n        // Inizializza solo se c'è overflow orizzontale\n        if (container.scrollWidth > container.clientWidth) {\n            new ImprovedElementorScroller(container);\n            container.setAttribute('data-improved-scroller', 'true');\n        }\n    });\n}\n\n// Inizializza quando DOM è pronto\nif (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', initImprovedScrollers);\n} else {\n    initImprovedScrollers();\n}\n\n// Hook per Elementor\nif (typeof jQuery !== 'undefined') {\n    jQuery(window).on('elementor/frontend/init', function() {\n        if (window.elementorFrontend && window.elementorFrontend.hooks) {\n            elementorFrontend.hooks.addAction('frontend/element_ready/widget', function() {\n                setTimeout(initImprovedScrollers, 100);\n            });\n        }\n    });\n} else {\n    // Fallback observer per contenuti dinamici\n    const observer = new MutationObserver(() => {\n        initImprovedScrollers();\n    });\n    \n    observer.observe(document.body, {\n        childList: true,\n        subtree: true\n    });\n}\n\n// Re-inizializza su resize\nlet resizeTimeout;\nwindow.addEventListener('resize', () => {\n    clearTimeout(resizeTimeout);\n    resizeTimeout = setTimeout(initImprovedScrollers, 250);\n});\n\nconsole.log('Improved Elementor Scroller v2.0 loaded');","originalFile":"/**\n * Slider Orizzontale Migliorato per Elementor\n * Versione 2.0 - Ottimizzato per Desktop con Accessibilità\n */\n\n// Classe principale per gestire lo slider\nclass ImprovedElementorScroller {\n    constructor(container) {\n        this.container = container;\n        this.wrapper = null;\n        this.isScrolling = false;\n        this.scrollTimeout = null;\n        \n        // Feature detection\n        this.supportsPassive = this.checkPassiveSupport();\n        this.supportsScrollBehavior = 'scrollBehavior' in document.documentElement.style;\n        \n        // Inizializza\n        this.init();\n    }\n    \n    // Check supporto passive listeners\n    checkPassiveSupport() {\n        let supportsPassive = false;\n        try {\n            const opts = Object.defineProperty({}, 'passive', {\n                get: () => { supportsPassive = true; }\n            });\n            window.addEventListener('testPassive', null, opts);\n            window.removeEventListener('testPassive', null, opts);\n        } catch (e) {}\n        return supportsPassive;\n    }\n    \n    init() {\n        // Crea wrapper per aggiungere controlli senza modificare HTML\n        this.wrapContainer();\n        \n        // Setup features\n        this.setupNavButtons();\n        this.setupKeyboard();\n        this.setupMouseWheel();\n        this.setupTouch();\n        this.setupScrollIndicator();\n        this.setupAccessibility();\n        \n        // Aggiorna stato iniziale\n        this.updateUI();\n    }\n    \n    // Wrap container esistente per aggiungere controlli\n    wrapContainer() {\n        // Se già wrappato, esci\n        if (this.container.parentElement.classList.contains('elementor-scroller-wrapper')) {\n            this.wrapper = this.container.parentElement;\n            return;\n        }\n        \n        // Crea wrapper\n        this.wrapper = document.createElement('div');\n        this.wrapper.className = 'elementor-scroller-wrapper';\n        this.wrapper.style.position = 'relative';\n        \n        // Inserisci wrapper\n        this.container.parentNode.insertBefore(this.wrapper, this.container);\n        this.wrapper.appendChild(this.container);\n    }\n    \n    // Setup pulsanti navigazione\n    setupNavButtons() {\n        // Crea pulsanti solo se non esistono\n        if (!this.wrapper.querySelector('.nav-button')) {\n            // Pulsante precedente\n            const prevButton = document.createElement('button');\n            prevButton.className = 'nav-button nav-prev';\n            prevButton.innerHTML = `\n                <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                    <path d=\"M15 18l-6-6 6-6\"/>\n                </svg>\n            `;\n            prevButton.setAttribute('aria-label', 'Scorri a sinistra');\n            prevButton.addEventListener('click', () => this.scrollPrev());\n            \n            // Pulsante successivo\n            const nextButton = document.createElement('button');\n            nextButton.className = 'nav-button nav-next';\n            nextButton.innerHTML = `\n                <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                    <path d=\"M9 18l6-6-6-6\"/>\n                </svg>\n            `;\n            nextButton.setAttribute('aria-label', 'Scorri a destra');\n            nextButton.addEventListener('click', () => this.scrollNext());\n            \n            // Aggiungi al wrapper\n            this.wrapper.appendChild(prevButton);\n            this.wrapper.appendChild(nextButton);\n            \n            // Store references\n            this.prevButton = prevButton;\n            this.nextButton = nextButton;\n        }\n    }\n    \n    // Setup tastiera migliorato\n    setupKeyboard() {\n        this.container.addEventListener('keydown', (e) => {\n            const scrollAmount = this.container.clientWidth * 0.8;\n            let handled = true;\n            \n            // Aggiungi classe per smooth scroll da tastiera\n            this.container.classList.add('keyboard-scrolling');\n            \n            switch(e.key) {\n                case 'ArrowLeft':\n                    this.smoothScroll(-scrollAmount);\n                    break;\n                case 'ArrowRight':\n                    this.smoothScroll(scrollAmount);\n                    break;\n                case 'Home':\n                    this.scrollToStart();\n                    break;\n                case 'End':\n                    this.scrollToEnd();\n                    break;\n                default:\n                    handled = false;\n            }\n            \n            if (handled) {\n                e.preventDefault();\n                // Rimuovi classe dopo animazione\n                setTimeout(() => {\n                    this.container.classList.remove('keyboard-scrolling');\n                }, 400);\n            } else {\n                this.container.classList.remove('keyboard-scrolling');\n            }\n        });\n    }\n    \n    // Setup mouse wheel - MIGLIORAMENTO CHIAVE\n    setupMouseWheel() {\n        let accumulatedDelta = 0;\n        let wheelTimeout;\n        \n        const wheelHandler = (e) => {\n            // Solo se container è in hover o focus\n            if (!this.container.matches(':hover, :focus-within')) return;\n            \n            e.preventDefault();\n            \n            // Accumula piccoli delta per scroll più fluido\n            accumulatedDelta += e.deltaY;\n            \n            clearTimeout(wheelTimeout);\n            wheelTimeout = setTimeout(() => {\n                if (Math.abs(accumulatedDelta) > 10) {\n                    // Normalizza e applica scroll\n                    const scrollAmount = Math.sign(accumulatedDelta) * Math.min(Math.abs(accumulatedDelta), 300);\n                    this.smoothScroll(scrollAmount);\n                }\n                accumulatedDelta = 0;\n            }, 50);\n        };\n        \n        // Aggiungi listener con passive false\n        this.container.addEventListener('wheel', wheelHandler, \n            this.supportsPassive ? { passive: false } : false\n        );\n    }\n    \n    // Setup touch con momentum migliorato\n    setupTouch() {\n        let startX = 0;\n        let scrollLeft = 0;\n        let isDragging = false;\n        let animationId = null;\n        let velocity = 0;\n        let lastX = 0;\n        let lastTime = 0;\n        \n        const startDragging = (pageX) => {\n            isDragging = true;\n            startX = pageX;\n            lastX = pageX;\n            scrollLeft = this.container.scrollLeft;\n            lastTime = Date.now();\n            velocity = 0;\n            \n            // Cancella animazioni\n            if (animationId) {\n                cancelAnimationFrame(animationId);\n            }\n            \n            // La classe 'active' è già nel CSS esistente per cursor grabbing\n            this.container.classList.add('active');\n        };\n        \n        const drag = (pageX) => {\n            if (!isDragging) return;\n            \n            const currentTime = Date.now();\n            const timeDelta = currentTime - lastTime;\n            const distance = pageX - lastX;\n            \n            // Calcola velocità\n            if (timeDelta > 0) {\n                velocity = distance / timeDelta * 16; // Normalizza a 60fps\n            }\n            \n            const walk = (pageX - startX) * 1.5;\n            this.container.scrollLeft = scrollLeft - walk;\n            \n            lastX = pageX;\n            lastTime = currentTime;\n        };\n        \n        const stopDragging = () => {\n            if (!isDragging) return;\n            \n            isDragging = false;\n            this.container.classList.remove('active');\n            \n            // Applica momentum se c'è velocità\n            if (Math.abs(velocity) > 2) {\n                const deceleration = 0.95;\n                \n                const animate = () => {\n                    if (Math.abs(velocity) > 0.5) {\n                        this.container.scrollLeft -= velocity;\n                        velocity *= deceleration;\n                        animationId = requestAnimationFrame(animate);\n                    } else {\n                        this.updateUI();\n                    }\n                };\n                \n                animate();\n            } else {\n                this.updateUI();\n            }\n        };\n        \n        // Mouse events\n        this.container.addEventListener('mousedown', (e) => {\n            startDragging(e.pageX);\n        });\n        \n        document.addEventListener('mousemove', (e) => {\n            drag(e.pageX);\n        });\n        \n        document.addEventListener('mouseup', stopDragging);\n        \n        // Touch events\n        this.container.addEventListener('touchstart', (e) => {\n            startDragging(e.touches[0].pageX);\n        }, this.supportsPassive ? { passive: true } : false);\n        \n        this.container.addEventListener('touchmove', (e) => {\n            drag(e.touches[0].pageX);\n        }, this.supportsPassive ? { passive: true } : false);\n        \n        this.container.addEventListener('touchend', stopDragging);\n        this.container.addEventListener('touchcancel', stopDragging);\n    }\n    \n    // Setup indicatore di scroll\n    setupScrollIndicator() {\n        // Crea progress bar solo se non nascosta da design\n        if (!this.wrapper.classList.contains('hide-progress')) {\n            const progressBar = document.createElement('div');\n            progressBar.className = 'scroll-progress';\n            progressBar.setAttribute('role', 'progressbar');\n            progressBar.setAttribute('aria-label', 'Progresso scroll');\n            progressBar.setAttribute('aria-valuemin', '0');\n            progressBar.setAttribute('aria-valuemax', '100');\n            \n            this.wrapper.appendChild(progressBar);\n            this.progressBar = progressBar;\n        }\n        \n        // Aggiorna su scroll\n        let ticking = false;\n        this.container.addEventListener('scroll', () => {\n            if (!ticking) {\n                requestAnimationFrame(() => {\n                    this.updateUI();\n                    ticking = false;\n                });\n                ticking = true;\n            }\n        }, this.supportsPassive ? { passive: true } : false);\n    }\n    \n    // Setup accessibilità\n    setupAccessibility() {\n        // ARIA labels\n        this.container.setAttribute('role', 'region');\n        this.container.setAttribute('aria-label', 'Contenuti scrollabili orizzontalmente');\n        \n        // Live region per annunci\n        const liveRegion = document.createElement('div');\n        liveRegion.className = 'sr-only';\n        liveRegion.setAttribute('role', 'status');\n        liveRegion.setAttribute('aria-live', 'polite');\n        liveRegion.setAttribute('aria-atomic', 'true');\n        liveRegion.style.cssText = `\n            position: absolute;\n            width: 1px;\n            height: 1px;\n            padding: 0;\n            margin: -1px;\n            overflow: hidden;\n            clip: rect(0,0,0,0);\n            white-space: nowrap;\n            border: 0;\n        `;\n        \n        this.wrapper.appendChild(liveRegion);\n        this.liveRegion = liveRegion;\n    }\n    \n    // Scroll fluido\n    smoothScroll(distance) {\n        if (this.supportsScrollBehavior) {\n            this.container.scrollBy({\n                left: distance,\n                behavior: 'smooth'\n            });\n        } else {\n            // Fallback animato\n            this.animateScroll(this.container.scrollLeft + distance);\n        }\n    }\n    \n    // Animazione scroll per fallback\n    animateScroll(target) {\n        const start = this.container.scrollLeft;\n        const distance = target - start;\n        const duration = 300;\n        let startTime = null;\n        \n        const animation = (currentTime) => {\n            if (!startTime) startTime = currentTime;\n            const elapsed = currentTime - startTime;\n            const progress = Math.min(elapsed / duration, 1);\n            \n            // Easing\n            const easeInOutQuad = progress < 0.5\n                ? 2 * progress * progress\n                : 1 - Math.pow(-2 * progress + 2, 2) / 2;\n            \n            this.container.scrollLeft = start + distance * easeInOutQuad;\n            \n            if (progress < 1) {\n                requestAnimationFrame(animation);\n            } else {\n                this.updateUI();\n            }\n        };\n        \n        requestAnimationFrame(animation);\n    }\n    \n    // Metodi di navigazione\n    scrollPrev() {\n        const scrollAmount = this.container.clientWidth * 0.8;\n        this.smoothScroll(-scrollAmount);\n        this.announce('Scorrimento a sinistra');\n    }\n    \n    scrollNext() {\n        const scrollAmount = this.container.clientWidth * 0.8;\n        this.smoothScroll(scrollAmount);\n        this.announce('Scorrimento a destra');\n    }\n    \n    scrollToStart() {\n        this.container.scrollTo({\n            left: 0,\n            behavior: this.supportsScrollBehavior ? 'smooth' : 'auto'\n        });\n        this.announce('Inizio dei contenuti');\n    }\n    \n    scrollToEnd() {\n        const maxScroll = this.container.scrollWidth - this.container.clientWidth;\n        this.container.scrollTo({\n            left: maxScroll,\n            behavior: this.supportsScrollBehavior ? 'smooth' : 'auto'\n        });\n        this.announce('Fine dei contenuti');\n    }\n    \n    // Aggiorna UI\n    updateUI() {\n        const scrollLeft = this.container.scrollLeft;\n        const maxScroll = this.container.scrollWidth - this.container.clientWidth;\n        \n        // Aggiorna pulsanti\n        if (this.prevButton && this.nextButton) {\n            this.prevButton.disabled = scrollLeft <= 0;\n            this.nextButton.disabled = scrollLeft >= maxScroll - 1;\n            \n            // Aggiorna ARIA\n            this.prevButton.setAttribute('aria-disabled', scrollLeft <= 0);\n            this.nextButton.setAttribute('aria-disabled', scrollLeft >= maxScroll - 1);\n        }\n        \n        // Aggiorna progress bar\n        if (this.progressBar && maxScroll > 0) {\n            const progress = (scrollLeft / maxScroll) * 100;\n            this.progressBar.style.width = `${progress}%`;\n            this.progressBar.setAttribute('aria-valuenow', Math.round(progress));\n        }\n    }\n    \n    // Annuncia a screen reader\n    announce(message) {\n        if (this.liveRegion) {\n            this.liveRegion.textContent = message;\n            // Reset dopo annuncio\n            setTimeout(() => {\n                this.liveRegion.textContent = '';\n            }, 1000);\n        }\n    }\n}\n\n// CSS da iniettare - Adattato per CSS Elementor esistente\nconst improvedStyles = `\n    <style id=\"improved-scroller-styles\">\n        /* Wrapper styles */\n        .elementor-scroller-wrapper {\n            position: relative;\n        }\n        \n        /* Nasconde scrollbar orizzontale su desktop mantenendo lo scroll */\n        .scrollable-container {\n            /* Firefox */\n            scrollbar-width: none;\n            \n            /* IE 10+ */\n            -ms-overflow-style: none;\n        }\n        \n        /* Chrome, Safari, Opera, Edge */\n        .scrollable-container::-webkit-scrollbar {\n            width: 0 !important;\n            height: 0 !important;\n            display: none;\n        }\n        \n        .scrollable-container::-webkit-scrollbar-track {\n            background: transparent;\n        }\n        \n        .scrollable-container::-webkit-scrollbar-thumb {\n            background: transparent;\n            border: none;\n        }\n        \n        /* Supporto per browser più vecchi */\n        @supports not (scrollbar-width: none) {\n            .scrollable-container {\n                margin-bottom: -17px;\n                padding-bottom: 17px;\n            }\n        }\n        \n        /* Pulsanti navigazione */\n        .nav-button {\n            position: absolute;\n            top: 50%;\n            transform: translateY(-50%);\n            width: 48px;\n            height: 48px;\n            background: rgba(255, 255, 255, 0.95);\n            border: 1px solid #ddd;\n            border-radius: 50%;\n            cursor: pointer;\n            display: none;\n            align-items: center;\n            justify-content: center;\n            z-index: 10;\n            transition: all 0.3s ease;\n            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n            \n            /* Assicura che sia sopra il contenuto */\n            pointer-events: auto;\n        }\n        \n        .nav-button {\n            background: var(--e-global-color-primary);\n        }\n        \n        .nav-button svg {\n            width: 24px;\n            height: 24px;\n            color: #fff;\n        }\n        \n        .nav-button:hover:not(:disabled) {\n            background: var(--e-global-color-2de3d7d);\n            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n            transform: translateY(-50%) scale(1.1);\n        }\n        \n        .nav-button:active {\n            transform: translateY(-50%) scale(0.95);\n        }\n        \n        .nav-button:hover:not(:disabled) {\n            background: var(--e-global-color-2de3d7d);\n            border-color: var(--e-global-color-2de3d7d);\n        }\n        \n        .nav-button:active {\n            transform: translateY(-50%) scale(0.95);\n        }\n        \n        .nav-button:disabled {\n            opacity: 0.3;\n            cursor: not-allowed;\n        }\n        \n        .nav-button:disabled:hover {\n            transform: translateY(-50%);\n        }\n        \n        .nav-button:focus {\n            outline: 2px solid var(--e-global-color-primary, #0066cc);\n            outline-offset: 2px;\n        }\n        \n        .nav-prev {\n            left: 10px;\n        }\n        \n        .nav-next {\n            right: 10px;\n        }\n        \n        /* Mostra pulsanti su desktop */\n        @media (min-width: 1024px) {\n            .elementor-scroller-wrapper:hover .nav-button:not(:disabled) {\n                display: flex;\n            }\n            \n            .elementor-scroller-wrapper:focus-within .nav-button:not(:disabled) {\n                display: flex;\n            }\n        }\n        \n        /* Progress bar sottile */\n        .scroll-progress {\n            position: absolute;\n            bottom: 0;\n            left: 0;\n            height: 3px;\n            background: var(--e-global-color-primary, #0066cc);\n            transition: width 0.2s ease, opacity 0.3s ease;\n            pointer-events: none;\n            z-index: 5;\n            opacity: 0;\n            border-radius: 0 3px 3px 0;\n        }\n        \n        /* Mostra progress bar su hover/focus */\n        .elementor-scroller-wrapper:hover .scroll-progress,\n        .elementor-scroller-wrapper:focus-within .scroll-progress {\n            opacity: 0.7;\n        }\n        \n        /* Non sovrascriviamo cursor - già impostato nel CSS esistente */\n        \n        /* Focus migliore - solo se non già presente */\n        .scrollable-container:focus-visible {\n            outline: 2px solid var(--e-global-color-primary, #0066cc);\n            outline-offset: 2px;\n        }\n        \n        /* Supporta la classe keyboard-scrolling esistente */\n        .scrollable-container.keyboard-scrolling {\n            scroll-behavior: smooth !important;\n        }\n        \n        /* Screen reader only */\n        .sr-only {\n            position: absolute;\n            width: 1px;\n            height: 1px;\n            padding: 0;\n            margin: -1px;\n            overflow: hidden;\n            clip: rect(0,0,0,0);\n            white-space: nowrap;\n            border: 0;\n        }\n        \n        /* Indicatori di pagina opzionali */\n        .scroll-indicators {\n            display: flex;\n            justify-content: center;\n            gap: 8px;\n            margin-top: 16px;\n            padding: 8px;\n        }\n        \n        .scroll-indicator {\n            width: 8px;\n            height: 8px;\n            border-radius: 50%;\n            background: #ddd;\n            transition: all 0.3s ease;\n            cursor: pointer;\n            border: none;\n            padding: 0;\n        }\n        \n        .scroll-indicator:hover {\n            background: #999;\n            transform: scale(1.2);\n        }\n        \n        .scroll-indicator.active {\n            background: var(--e-global-color-primary, #333);\n            width: 24px;\n            border-radius: 4px;\n        }\n        \n        /* Supporto reduced motion */\n        @media (prefers-reduced-motion: reduce) {\n            * {\n                animation-duration: 0.01ms !important;\n                animation-iteration-count: 1 !important;\n                transition-duration: 0.01ms !important;\n            }\n            \n            .scrollable-container {\n                scroll-behavior: auto !important;\n            }\n            \n            .nav-button {\n                transition: none !important;\n            }\n            \n            .scroll-progress {\n                transition: none !important;\n            }\n        }\n        \n        /* Migliora contrasto per accessibilità */\n        @media (prefers-contrast: high) {\n            .nav-button {\n                background: #fff;\n                border: 2px solid #000;\n            }\n            \n            .nav-button:hover:not(:disabled) {\n                background: #000;\n                color: #fff;\n            }\n            \n            .nav-button:hover:not(:disabled) svg {\n                color: #fff;\n            }\n            \n            .scroll-progress {\n                background: #000;\n            }\n        }\n        \n        /* Dark mode support */\n        @media (prefers-color-scheme: dark) {\n            .nav-button {\n                background: var(--e-global-color-primary);\n                border-color: var(--e-global-color-primary);\n            }\n            \n            .nav-button svg {\n                color: #fff;\n            }\n            \n            .nav-button:hover:not(:disabled) {\n                background: var(--e-global-color-2de3d7d);\n                border-color: var(--e-global-color-2de3d7d);\n            }\n            \n            .scroll-indicator {\n                background: #555;\n            }\n            \n            .scroll-indicator:hover {\n                background: #777;\n            }\n            \n            .scroll-indicator.active {\n                background: #fff;\n            }\n        }\n    </style>\n`;\n\n// Inizializzazione\nfunction initImprovedScrollers() {\n    // Inietta stili se non presenti\n    if (!document.getElementById('improved-scroller-styles')) {\n        document.head.insertAdjacentHTML('beforeend', improvedStyles);\n    }\n    \n    // Trova tutti i container scrollabili\n    const containers = document.querySelectorAll('.scrollable-container');\n    \n    containers.forEach(container => {\n        // Skip se già inizializzato\n        if (container.hasAttribute('data-improved-scroller')) return;\n        \n        // Inizializza solo se c'è overflow orizzontale\n        if (container.scrollWidth > container.clientWidth) {\n            new ImprovedElementorScroller(container);\n            container.setAttribute('data-improved-scroller', 'true');\n        }\n    });\n}\n\n// Inizializza quando DOM è pronto\nif (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', initImprovedScrollers);\n} else {\n    initImprovedScrollers();\n}\n\n// Hook per Elementor\nif (typeof jQuery !== 'undefined') {\n    jQuery(window).on('elementor/frontend/init', function() {\n        if (window.elementorFrontend && window.elementorFrontend.hooks) {\n            elementorFrontend.hooks.addAction('frontend/element_ready/widget', function() {\n                setTimeout(initImprovedScrollers, 100);\n            });\n        }\n    });\n} else {\n    // Fallback observer per contenuti dinamici\n    const observer = new MutationObserver(() => {\n        initImprovedScrollers();\n    });\n    \n    observer.observe(document.body, {\n        childList: true,\n        subtree: true\n    });\n}\n\n// Re-inizializza su resize\nlet resizeTimeout;\nwindow.addEventListener('resize', () => {\n    clearTimeout(resizeTimeout);\n    resizeTimeout = setTimeout(initImprovedScrollers, 250);\n});\n\nconsole.log('Improved Elementor Scroller v2.0 loaded');","structuredPatch":[{"oldStart":445,"oldLines":8,"newStart":445,"newLines":27,"lines":["             ","             /* IE 10+ */","             -ms-overflow-style: none;","+            ","+            /* Aggiunge spazio per l'ultima card */","+            padding-right: 30px;","+            box-sizing: content-box;","         }","         ","+        /* Compensa il padding per il primo elemento */","+        .scrollable-container > *:first-child {","+            margin-left: 20px;","+        }","+        ","+        /* Fix per Elementor - previeni che tagli il contenuto */","+        .elementor-widget-container {","+            overflow: visible !important;","+        }","+        ","+        /* Fix per container con gap CSS */","+        .scrollable-container[style*=\"gap\"] {","+            padding-right: 50px;","+        }","+        ","         /* Chrome, Safari, Opera, Edge */","         .scrollable-container::-webkit-scrollbar {","             width: 0 !important;"]}],"userModified":false,"replaceAll":false}}
{"parentUuid":"fc8ea9d4-7eae-4678-b74a-28a17df823cd","isSidechain":false,"userType":"external","cwd":"/Users/disconnesso/Sites/villastuart.it","sessionId":"6d59d7ee-cfab-4065-8105-2d5b96fcc40d","version":"1.0.61","gitBranch":"main","message":{"id":"msg_014Ji3K9YehyfERRhqkM4WVL","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01SR6Rc1YQx1uqGx5nY3xwSQ","name":"TodoWrite","input":{"todos":[{"id":"1","content":"Add CSS padding solution for last card visibility","status":"completed","priority":"high"},{"id":"2","content":"Improve updateUI method with better maxScroll calculation","status":"in_progress","priority":"high"},{"id":"3","content":"Add methods to check element visibility and ensure last card is visible","status":"pending","priority":"high"},{"id":"4","content":"Enhance scrollNext method with card-based navigation","status":"pending","priority":"high"},{"id":"5","content":"Add scroll spacer solution as fallback","status":"pending","priority":"medium"}]}}],"stop_reason":"tool_use","stop_sequence":null,"usage":{"input_tokens":0,"cache_creation_input_tokens":9664,"cache_read_input_tokens":48094,"output_tokens":223,"service_tier":"standard"}},"requestId":"req_011CRau1qEsfJt1afHAZgxYs","type":"assistant","uuid":"3da05219-b29b-49dd-87af-4c77f1e774b6","timestamp":"2025-07-29T07:14:51.626Z"}
{"parentUuid":"3da05219-b29b-49dd-87af-4c77f1e774b6","isSidechain":false,"userType":"external","cwd":"/Users/disconnesso/Sites/villastuart.it","sessionId":"6d59d7ee-cfab-4065-8105-2d5b96fcc40d","version":"1.0.61","gitBranch":"main","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01SR6Rc1YQx1uqGx5nY3xwSQ","type":"tool_result","content":"Todos have been modified successfully. Ensure that you continue to use the todo list to track your progress. Please proceed with the current tasks if applicable"}]},"uuid":"09a7a155-6fd2-4c5a-957c-bfc0a845e1b3","timestamp":"2025-07-29T07:14:51.653Z","toolUseResult":{"oldTodos":[{"content":"Add CSS padding solution for last card visibility","status":"in_progress","priority":"high","id":"1"},{"content":"Improve updateUI method with better maxScroll calculation","status":"pending","priority":"high","id":"2"},{"content":"Add methods to check element visibility and ensure last card is visible","status":"pending","priority":"high","id":"3"},{"content":"Enhance scrollNext method with card-based navigation","status":"pending","priority":"high","id":"4"},{"content":"Add scroll spacer solution as fallback","status":"pending","priority":"medium","id":"5"}],"newTodos":[{"content":"Add CSS padding solution for last card visibility","status":"completed","priority":"high","id":"1"},{"content":"Improve updateUI method with better maxScroll calculation","status":"in_progress","priority":"high","id":"2"},{"content":"Add methods to check element visibility and ensure last card is visible","status":"pending","priority":"high","id":"3"},{"content":"Enhance scrollNext method with card-based navigation","status":"pending","priority":"high","id":"4"},{"content":"Add scroll spacer solution as fallback","status":"pending","priority":"medium","id":"5"}]}}
{"parentUuid":"09a7a155-6fd2-4c5a-957c-bfc0a845e1b3","isSidechain":false,"userType":"external","cwd":"/Users/disconnesso/Sites/villastuart.it","sessionId":"6d59d7ee-cfab-4065-8105-2d5b96fcc40d","version":"1.0.61","gitBranch":"main","message":{"id":"msg_01HKVvi9GakanwUC4Z4FAXeb","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01TCbiPwtVr8dyZ44xG7E27J","name":"Edit","input":{"file_path":"/Users/disconnesso/Sites/villastuart.it/wp-content/themes/hello-villa-stuart/assets/js/improved-scroller.js","old_string":"    // Aggiorna UI\n    updateUI() {\n        const scrollLeft = this.container.scrollLeft;\n        const maxScroll = this.container.scrollWidth - this.container.clientWidth;\n        \n        // Aggiorna pulsanti\n        if (this.prevButton && this.nextButton) {\n            this.prevButton.disabled = scrollLeft <= 0;\n            this.nextButton.disabled = scrollLeft >= maxScroll - 1;\n            \n            // Aggiorna ARIA\n            this.prevButton.setAttribute('aria-disabled', scrollLeft <= 0);\n            this.nextButton.setAttribute('aria-disabled', scrollLeft >= maxScroll - 1);\n        }\n        \n        // Aggiorna progress bar\n        if (this.progressBar && maxScroll > 0) {\n            const progress = (scrollLeft / maxScroll) * 100;\n            this.progressBar.style.width = `${progress}%`;\n            this.progressBar.setAttribute('aria-valuenow', Math.round(progress));\n        }\n    }","new_string":"    // Aggiorna UI\n    updateUI() {\n        const scrollLeft = this.container.scrollLeft;\n        \n        // Calcola il gap tra le card (se usi gap in CSS)\n        const computedStyle = window.getComputedStyle(this.container);\n        const gap = parseFloat(computedStyle.gap) || 0;\n        \n        // Trova l'ultima card\n        const lastChild = this.container.lastElementChild;\n        const lastChildWidth = lastChild ? lastChild.offsetWidth : 0;\n        \n        // Calcola il maxScroll considerando l'ultima card e il padding\n        const maxScroll = this.container.scrollWidth - this.container.clientWidth;\n        const adjustedMaxScroll = Math.max(0, maxScroll - gap);\n        \n        // Aggiorna pulsanti con tolleranza\n        if (this.prevButton && this.nextButton) {\n            const tolerance = 5;\n            this.prevButton.disabled = scrollLeft <= tolerance;\n            this.nextButton.disabled = scrollLeft >= adjustedMaxScroll - tolerance;\n            \n            // Aggiorna ARIA\n            this.prevButton.setAttribute('aria-disabled', scrollLeft <= tolerance);\n            this.nextButton.setAttribute('aria-disabled', scrollLeft >= adjustedMaxScroll - tolerance);\n        }\n        \n        // Aggiorna progress bar\n        if (this.progressBar && adjustedMaxScroll > 0) {\n            const progress = Math.min(100, (scrollLeft / adjustedMaxScroll) * 100);\n            this.progressBar.style.width = `${progress}%`;\n            this.progressBar.setAttribute('aria-valuenow', Math.round(progress));\n        }\n    }"}}],"stop_reason":"tool_use","stop_sequence":null,"usage":{"input_tokens":0,"cache_creation_input_tokens":493,"cache_read_input_tokens":57758,"output_tokens":797,"service_tier":"standard"}},"requestId":"req_011CRau2gFASzMZcsDygAf5B","type":"assistant","uuid":"a3e985f4-d4f3-4672-9360-15f9259a33bd","timestamp":"2025-07-29T07:15:04.212Z"}
{"parentUuid":"a3e985f4-d4f3-4672-9360-15f9259a33bd","isSidechain":false,"userType":"external","cwd":"/Users/disconnesso/Sites/villastuart.it","sessionId":"6d59d7ee-cfab-4065-8105-2d5b96fcc40d","version":"1.0.61","gitBranch":"main","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01TCbiPwtVr8dyZ44xG7E27J","type":"tool_result","content":"The file /Users/disconnesso/Sites/villastuart.it/wp-content/themes/hello-villa-stuart/assets/js/improved-scroller.js has been updated. Here's the result of running `cat -n` on a snippet of the edited file:\n     1→/**\n     2→ * Slider Orizzontale Migliorato per Elementor\n     3→ * Versione 2.0 - Ottimizzato per Desktop con Accessibilità\n     4→ */\n     5→\n     6→// Classe principale per gestire lo slider\n     7→class ImprovedElementorScroller {\n     8→    constructor(container) {\n     9→        this.container = container;\n    10→        this.wrapper = null;\n    11→        this.isScrolling = false;\n    12→        this.scrollTimeout = null;\n    13→        \n    14→        // Feature detection\n    15→        this.supportsPassive = this.checkPassiveSupport();\n    16→        this.supportsScrollBehavior = 'scrollBehavior' in document.documentElement.style;\n    17→        \n    18→        // Inizializza\n    19→        this.init();\n    20→    }\n    21→    \n    22→    // Check supporto passive listeners\n    23→    checkPassiveSupport() {\n    24→        let supportsPassive = false;\n    25→        try {\n    26→            const opts = Object.defineProperty({}, 'passive', {\n    27→                get: () => { supportsPassive = true; }\n    28→            });\n    29→            window.addEventListener('testPassive', null, opts);\n    30→            window.removeEventListener('testPassive', null, opts);\n    31→        } catch (e) {}\n    32→        return supportsPassive;\n    33→    }\n    34→    \n    35→    init() {\n    36→        // Crea wrapper per aggiungere controlli senza modificare HTML\n    37→        this.wrapContainer();\n    38→        \n    39→        // Setup features\n    40→        this.setupNavButtons();\n    41→        this.setupKeyboard();\n    42→        this.setupMouseWheel();\n    43→        this.setupTouch();\n    44→        this.setupScrollIndicator();\n    45→        this.setupAccessibility();\n    46→        \n    47→        // Aggiorna stato iniziale\n    48→        this.updateUI();\n    49→    }\n    50→    \n    51→    // Wrap container esistente per aggiungere controlli\n    52→    wrapContainer() {\n    53→        // Se già wrappato, esci\n    54→        if (this.container.parentElement.classList.contains('elementor-scroller-wrapper')) {\n    55→            this.wrapper = this.container.parentElement;\n    56→            return;\n    57→        }\n    58→        \n    59→        // Crea wrapper\n    60→        this.wrapper = document.createElement('div');\n    61→        this.wrapper.className = 'elementor-scroller-wrapper';\n    62→        this.wrapper.style.position = 'relative';\n    63→        \n    64→        // Inserisci wrapper\n    65→        this.container.parentNode.insertBefore(this.wrapper, this.container);\n    66→        this.wrapper.appendChild(this.container);\n    67→    }\n    68→    \n    69→    // Setup pulsanti navigazione\n    70→    setupNavButtons() {\n    71→        // Crea pulsanti solo se non esistono\n    72→        if (!this.wrapper.querySelector('.nav-button')) {\n    73→            // Pulsante precedente\n    74→            const prevButton = document.createElement('button');\n    75→            prevButton.className = 'nav-button nav-prev';\n    76→            prevButton.innerHTML = `\n    77→                <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n    78→                    <path d=\"M15 18l-6-6 6-6\"/>\n    79→                </svg>\n    80→            `;\n    81→            prevButton.setAttribute('aria-label', 'Scorri a sinistra');\n    82→            prevButton.addEventListener('click', () => this.scrollPrev());\n    83→            \n    84→            // Pulsante successivo\n    85→            const nextButton = document.createElement('button');\n    86→            nextButton.className = 'nav-button nav-next';\n    87→            nextButton.innerHTML = `\n    88→                <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n    89→                    <path d=\"M9 18l6-6-6-6\"/>\n    90→                </svg>\n    91→            `;\n    92→            nextButton.setAttribute('aria-label', 'Scorri a destra');\n    93→            nextButton.addEventListener('click', () => this.scrollNext());\n    94→            \n    95→            // Aggiungi al wrapper\n    96→            this.wrapper.appendChild(prevButton);\n    97→            this.wrapper.appendChild(nextButton);\n    98→            \n    99→            // Store references\n   100→            this.prevButton = prevButton;\n   101→            this.nextButton = nextButton;\n   102→        }\n   103→    }\n   104→    \n   105→    // Setup tastiera migliorato\n   106→    setupKeyboard() {\n   107→        this.container.addEventListener('keydown', (e) => {\n   108→            const scrollAmount = this.container.clientWidth * 0.8;\n   109→            let handled = true;\n   110→            \n   111→            // Aggiungi classe per smooth scroll da tastiera\n   112→            this.container.classList.add('keyboard-scrolling');\n   113→            \n   114→            switch(e.key) {\n   115→                case 'ArrowLeft':\n   116→                    this.smoothScroll(-scrollAmount);\n   117→                    break;\n   118→                case 'ArrowRight':\n   119→                    this.smoothScroll(scrollAmount);\n   120→                    break;\n   121→                case 'Home':\n   122→                    this.scrollToStart();\n   123→                    break;\n   124→                case 'End':\n   125→                    this.scrollToEnd();\n   126→                    break;\n   127→                default:\n   128→                    handled = false;\n   129→            }\n   130→            \n   131→            if (handled) {\n   132→                e.preventDefault();\n   133→                // Rimuovi classe dopo animazione\n   134→                setTimeout(() => {\n   135→                    this.container.classList.remove('keyboard-scrolling');\n   136→                }, 400);\n   137→            } else {\n   138→                this.container.classList.remove('keyboard-scrolling');\n   139→            }\n   140→        });\n   141→    }\n   142→    \n   143→    // Setup mouse wheel - MIGLIORAMENTO CHIAVE\n   144→    setupMouseWheel() {\n   145→        let accumulatedDelta = 0;\n   146→        let wheelTimeout;\n   147→        \n   148→        const wheelHandler = (e) => {\n   149→            // Solo se container è in hover o focus\n   150→            if (!this.container.matches(':hover, :focus-within')) return;\n   151→            \n   152→            e.preventDefault();\n   153→            \n   154→            // Accumula piccoli delta per scroll più fluido\n   155→            accumulatedDelta += e.deltaY;\n   156→            \n   157→            clearTimeout(wheelTimeout);\n   158→            wheelTimeout = setTimeout(() => {\n   159→                if (Math.abs(accumulatedDelta) > 10) {\n   160→                    // Normalizza e applica scroll\n   161→                    const scrollAmount = Math.sign(accumulatedDelta) * Math.min(Math.abs(accumulatedDelta), 300);\n   162→                    this.smoothScroll(scrollAmount);\n   163→                }\n   164→                accumulatedDelta = 0;\n   165→            }, 50);\n   166→        };\n   167→        \n   168→        // Aggiungi listener con passive false\n   169→        this.container.addEventListener('wheel', wheelHandler, \n   170→            this.supportsPassive ? { passive: false } : false\n   171→        );\n   172→    }\n   173→    \n   174→    // Setup touch con momentum migliorato\n   175→    setupTouch() {\n   176→        let startX = 0;\n   177→        let scrollLeft = 0;\n   178→        let isDragging = false;\n   179→        let animationId = null;\n   180→        let velocity = 0;\n   181→        let lastX = 0;\n   182→        let lastTime = 0;\n   183→        \n   184→        const startDragging = (pageX) => {\n   185→            isDragging = true;\n   186→            startX = pageX;\n   187→            lastX = pageX;\n   188→            scrollLeft = this.container.scrollLeft;\n   189→            lastTime = Date.now();\n   190→            velocity = 0;\n   191→            \n   192→            // Cancella animazioni\n   193→            if (animationId) {\n   194→                cancelAnimationFrame(animationId);\n   195→            }\n   196→            \n   197→            // La classe 'active' è già nel CSS esistente per cursor grabbing\n   198→            this.container.classList.add('active');\n   199→        };\n   200→        \n   201→        const drag = (pageX) => {\n   202→            if (!isDragging) return;\n   203→            \n   204→            const currentTime = Date.now();\n   205→            const timeDelta = currentTime - lastTime;\n   206→            const distance = pageX - lastX;\n   207→            \n   208→            // Calcola velocità\n   209→            if (timeDelta > 0) {\n   210→                velocity = distance / timeDelta * 16; // Normalizza a 60fps\n   211→            }\n   212→            \n   213→            const walk = (pageX - startX) * 1.5;\n   214→            this.container.scrollLeft = scrollLeft - walk;\n   215→            \n   216→            lastX = pageX;\n   217→            lastTime = currentTime;\n   218→        };\n   219→        \n   220→        const stopDragging = () => {\n   221→            if (!isDragging) return;\n   222→            \n   223→            isDragging = false;\n   224→            this.container.classList.remove('active');\n   225→            \n   226→            // Applica momentum se c'è velocità\n   227→            if (Math.abs(velocity) > 2) {\n   228→                const deceleration = 0.95;\n   229→                \n   230→                const animate = () => {\n   231→                    if (Math.abs(velocity) > 0.5) {\n   232→                        this.container.scrollLeft -= velocity;\n   233→                        velocity *= deceleration;\n   234→                        animationId = requestAnimationFrame(animate);\n   235→                    } else {\n   236→                        this.updateUI();\n   237→                    }\n   238→                };\n   239→                \n   240→                animate();\n   241→            } else {\n   242→                this.updateUI();\n   243→            }\n   244→        };\n   245→        \n   246→        // Mouse events\n   247→        this.container.addEventListener('mousedown', (e) => {\n   248→            startDragging(e.pageX);\n   249→        });\n   250→        \n   251→        document.addEventListener('mousemove', (e) => {\n   252→            drag(e.pageX);\n   253→        });\n   254→        \n   255→        document.addEventListener('mouseup', stopDragging);\n   256→        \n   257→        // Touch events\n   258→        this.container.addEventListener('touchstart', (e) => {\n   259→            startDragging(e.touches[0].pageX);\n   260→        }, this.supportsPassive ? { passive: true } : false);\n   261→        \n   262→        this.container.addEventListener('touchmove', (e) => {\n   263→            drag(e.touches[0].pageX);\n   264→        }, this.supportsPassive ? { passive: true } : false);\n   265→        \n   266→        this.container.addEventListener('touchend', stopDragging);\n   267→        this.container.addEventListener('touchcancel', stopDragging);\n   268→    }\n   269→    \n   270→    // Setup indicatore di scroll\n   271→    setupScrollIndicator() {\n   272→        // Crea progress bar solo se non nascosta da design\n   273→        if (!this.wrapper.classList.contains('hide-progress')) {\n   274→            const progressBar = document.createElement('div');\n   275→            progressBar.className = 'scroll-progress';\n   276→            progressBar.setAttribute('role', 'progressbar');\n   277→            progressBar.setAttribute('aria-label', 'Progresso scroll');\n   278→            progressBar.setAttribute('aria-valuemin', '0');\n   279→            progressBar.setAttribute('aria-valuemax', '100');\n   280→            \n   281→            this.wrapper.appendChild(progressBar);\n   282→            this.progressBar = progressBar;\n   283→        }\n   284→        \n   285→        // Aggiorna su scroll\n   286→        let ticking = false;\n   287→        this.container.addEventListener('scroll', () => {\n   288→            if (!ticking) {\n   289→                requestAnimationFrame(() => {\n   290→                    this.updateUI();\n   291→                    ticking = false;\n   292→                });\n   293→                ticking = true;\n   294→            }\n   295→        }, this.supportsPassive ? { passive: true } : false);\n   296→    }\n   297→    \n   298→    // Setup accessibilità\n   299→    setupAccessibility() {\n   300→        // ARIA labels\n   301→        this.container.setAttribute('role', 'region');\n   302→        this.container.setAttribute('aria-label', 'Contenuti scrollabili orizzontalmente');\n   303→        \n   304→        // Live region per annunci\n   305→        const liveRegion = document.createElement('div');\n   306→        liveRegion.className = 'sr-only';\n   307→        liveRegion.setAttribute('role', 'status');\n   308→        liveRegion.setAttribute('aria-live', 'polite');\n   309→        liveRegion.setAttribute('aria-atomic', 'true');\n   310→        liveRegion.style.cssText = `\n   311→            position: absolute;\n   312→            width: 1px;\n   313→            height: 1px;\n   314→            padding: 0;\n   315→            margin: -1px;\n   316→            overflow: hidden;\n   317→            clip: rect(0,0,0,0);\n   318→            white-space: nowrap;\n   319→            border: 0;\n   320→        `;\n   321→        \n   322→        this.wrapper.appendChild(liveRegion);\n   323→        this.liveRegion = liveRegion;\n   324→    }\n   325→    \n   326→    // Scroll fluido\n   327→    smoothScroll(distance) {\n   328→        if (this.supportsScrollBehavior) {\n   329→            this.container.scrollBy({\n   330→                left: distance,\n   331→                behavior: 'smooth'\n   332→            });\n   333→        } else {\n   334→            // Fallback animato\n   335→            this.animateScroll(this.container.scrollLeft + distance);\n   336→        }\n   337→    }\n   338→    \n   339→    // Animazione scroll per fallback\n   340→    animateScroll(target) {\n   341→        const start = this.container.scrollLeft;\n   342→        const distance = target - start;\n   343→        const duration = 300;\n   344→        let startTime = null;\n   345→        \n   346→        const animation = (currentTime) => {\n   347→            if (!startTime) startTime = currentTime;\n   348→            const elapsed = currentTime - startTime;\n   349→            const progress = Math.min(elapsed / duration, 1);\n   350→            \n   351→            // Easing\n   352→            const easeInOutQuad = progress < 0.5\n   353→                ? 2 * progress * progress\n   354→                : 1 - Math.pow(-2 * progress + 2, 2) / 2;\n   355→            \n   356→            this.container.scrollLeft = start + distance * easeInOutQuad;\n   357→            \n   358→            if (progress < 1) {\n   359→                requestAnimationFrame(animation);\n   360→            } else {\n   361→                this.updateUI();\n   362→            }\n   363→        };\n   364→        \n   365→        requestAnimationFrame(animation);\n   366→    }\n   367→    \n   368→    // Metodi di navigazione\n   369→    scrollPrev() {\n   370→        const scrollAmount = this.container.clientWidth * 0.8;\n   371→        this.smoothScroll(-scrollAmount);\n   372→        this.announce('Scorrimento a sinistra');\n   373→    }\n   374→    \n   375→    scrollNext() {\n   376→        const scrollAmount = this.container.clientWidth * 0.8;\n   377→        this.smoothScroll(scrollAmount);\n   378→        this.announce('Scorrimento a destra');\n   379→    }\n   380→    \n   381→    scrollToStart() {\n   382→        this.container.scrollTo({\n   383→            left: 0,\n   384→            behavior: this.supportsScrollBehavior ? 'smooth' : 'auto'\n   385→        });\n   386→        this.announce('Inizio dei contenuti');\n   387→    }\n   388→    \n   389→    scrollToEnd() {\n   390→        const maxScroll = this.container.scrollWidth - this.container.clientWidth;\n   391→        this.container.scrollTo({\n   392→            left: maxScroll,\n   393→            behavior: this.supportsScrollBehavior ? 'smooth' : 'auto'\n   394→        });\n   395→        this.announce('Fine dei contenuti');\n   396→    }\n   397→    \n   398→    // Aggiorna UI\n   399→    updateUI() {\n   400→        const scrollLeft = this.container.scrollLeft;\n   401→        \n   402→        // Calcola il gap tra le card (se usi gap in CSS)\n   403→        const computedStyle = window.getComputedStyle(this.container);\n   404→        const gap = parseFloat(computedStyle.gap) || 0;\n   405→        \n   406→        // Trova l'ultima card\n   407→        const lastChild = this.container.lastElementChild;\n   408→        const lastChildWidth = lastChild ? lastChild.offsetWidth : 0;\n   409→        \n   410→        // Calcola il maxScroll considerando l'ultima card e il padding\n   411→        const maxScroll = this.container.scrollWidth - this.container.clientWidth;\n   412→        const adjustedMaxScroll = Math.max(0, maxScroll - gap);\n   413→        \n   414→        // Aggiorna pulsanti con tolleranza\n   415→        if (this.prevButton && this.nextButton) {\n   416→            const tolerance = 5;\n   417→            this.prevButton.disabled = scrollLeft <= tolerance;\n   418→            this.nextButton.disabled = scrollLeft >= adjustedMaxScroll - tolerance;\n   419→            \n   420→            // Aggiorna ARIA\n   421→            this.prevButton.setAttribute('aria-disabled', scrollLeft <= tolerance);\n   422→            this.nextButton.setAttribute('aria-disabled', scrollLeft >= adjustedMaxScroll - tolerance);\n   423→        }\n   424→        \n   425→        // Aggiorna progress bar\n   426→        if (this.progressBar && adjustedMaxScroll > 0) {\n   427→            const progress = Math.min(100, (scrollLeft / adjustedMaxScroll) * 100);\n   428→            this.progressBar.style.width = `${progress}%`;\n   429→            this.progressBar.setAttribute('aria-valuenow', Math.round(progress));\n   430→        }\n   431→    }\n   432→    \n   433→    // Annuncia a screen reader\n   434→    announce(message) {\n   435→        if (this.liveRegion) {\n   436→            this.liveRegion.textContent = message;\n   437→            // Reset dopo annuncio\n   438→            setTimeout(() => {\n   439→                this.liveRegion.textContent = '';\n   440→            }, 1000);\n   441→        }\n   442→    }\n   443→}\n   444→\n   445→// CSS da iniettare - Adattato per CSS Elementor esistente\n   446→const improvedStyles = `\n   447→    <style id=\"improved-scroller-styles\">\n   448→        /* Wrapper styles */\n   449→        .elementor-scroller-wrapper {\n   450→            position: relative;\n   451→        }\n   452→        \n   453→        /* Nasconde scrollbar orizzontale su desktop mantenendo lo scroll */\n   454→        .scrollable-container {\n   455→            /* Firefox */\n   456→            scrollbar-width: none;\n   457→            \n   458→            /* IE 10+ */\n   459→            -ms-overflow-style: none;\n   460→            \n   461→            /* Aggiunge spazio per l'ultima card */\n   462→            padding-right: 30px;\n   463→            box-sizing: content-box;\n   464→        }\n   465→        \n   466→        /* Compensa il padding per il primo elemento */\n   467→        .scrollable-container > *:first-child {\n   468→            margin-left: 20px;\n   469→        }\n   470→        \n   471→        /* Fix per Elementor - previeni che tagli il contenuto */\n   472→        .elementor-widget-container {\n   473→            overflow: visible !important;\n   474→        }\n   475→        \n   476→        /* Fix per container con gap CSS */\n   477→        .scrollable-container[style*=\"gap\"] {\n   478→            padding-right: 50px;\n   479→        }\n   480→        \n   481→        /* Chrome, Safari, Opera, Edge */\n   482→        .scrollable-container::-webkit-scrollbar {\n   483→            width: 0 !important;\n   484→            height: 0 !important;\n   485→            display: none;\n   486→        }\n   487→        \n   488→        .scrollable-container::-webkit-scrollbar-track {\n   489→            background: transparent;\n   490→        }\n   491→        \n   492→        .scrollable-container::-webkit-scrollbar-thumb {\n   493→            background: transparent;\n   494→            border: none;\n   495→        }\n   496→        \n   497→        /* Supporto per browser più vecchi */\n   498→        @supports not (scrollbar-width: none) {\n   499→            .scrollable-container {\n   500→                margin-bottom: -17px;\n   501→                padding-bottom: 17px;\n   502→            }\n   503→        }\n   504→        \n   505→        /* Pulsanti navigazione */\n   506→        .nav-button {\n   507→            position: absolute;\n   508→            top: 50%;\n   509→            transform: translateY(-50%);\n   510→            width: 48px;\n   511→            height: 48px;\n   512→            background: rgba(255, 255, 255, 0.95);\n   513→            border: 1px solid #ddd;\n   514→            border-radius: 50%;\n   515→            cursor: pointer;\n   516→            display: none;\n   517→            align-items: center;\n   518→            justify-content: center;\n   519→            z-index: 10;\n   520→            transition: all 0.3s ease;\n   521→            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n   522→            \n   523→            /* Assicura che sia sopra il contenuto */\n   524→            pointer-events: auto;\n   525→        }\n   526→        \n   527→        .nav-button {\n   528→            background: var(--e-global-color-primary);\n   529→        }\n   530→        \n   531→        .nav-button svg {\n   532→            width: 24px;\n   533→            height: 24px;\n   534→            color: #fff;\n   535→        }\n   536→        \n   537→        .nav-button:hover:not(:disabled) {\n   538→            background: var(--e-global-color-2de3d7d);\n   539→            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n   540→            transform: translateY(-50%) scale(1.1);\n   541→        }\n   542→        \n   543→        .nav-button:active {\n   544→            transform: translateY(-50%) scale(0.95);\n   545→        }\n   546→        \n   547→        .nav-button:hover:not(:disabled) {\n   548→            background: var(--e-global-color-2de3d7d);\n   549→            border-color: var(--e-global-color-2de3d7d);\n   550→        }\n   551→        \n   552→        .nav-button:active {\n   553→            transform: translateY(-50%) scale(0.95);\n   554→        }\n   555→        \n   556→        .nav-button:disabled {\n   557→            opacity: 0.3;\n   558→            cursor: not-allowed;\n   559→        }\n   560→        \n   561→        .nav-button:disabled:hover {\n   562→            transform: translateY(-50%);\n   563→        }\n   564→        \n   565→        .nav-button:focus {\n   566→            outline: 2px solid var(--e-global-color-primary, #0066cc);\n   567→            outline-offset: 2px;\n   568→        }\n   569→        \n   570→        .nav-prev {\n   571→            left: 10px;\n   572→        }\n   573→        \n   574→        .nav-next {\n   575→            right: 10px;\n   576→        }\n   577→        \n   578→        /* Mostra pulsanti su desktop */\n   579→        @media (min-width: 1024px) {\n   580→            .elementor-scroller-wrapper:hover .nav-button:not(:disabled) {\n   581→                display: flex;\n   582→            }\n   583→            \n   584→            .elementor-scroller-wrapper:focus-within .nav-button:not(:disabled) {\n   585→                display: flex;\n   586→            }\n   587→        }\n   588→        \n   589→        /* Progress bar sottile */\n   590→        .scroll-progress {\n   591→            position: absolute;\n   592→            bottom: 0;\n   593→            left: 0;\n   594→            height: 3px;\n   595→            background: var(--e-global-color-primary, #0066cc);\n   596→            transition: width 0.2s ease, opacity 0.3s ease;\n   597→            pointer-events: none;\n   598→            z-index: 5;\n   599→            opacity: 0;\n   600→            border-radius: 0 3px 3px 0;\n   601→        }\n   602→        \n   603→        /* Mostra progress bar su hover/focus */\n   604→        .elementor-scroller-wrapper:hover .scroll-progress,\n   605→        .elementor-scroller-wrapper:focus-within .scroll-progress {\n   606→            opacity: 0.7;\n   607→        }\n   608→        \n   609→        /* Non sovrascriviamo cursor - già impostato nel CSS esistente */\n   610→        \n   611→        /* Focus migliore - solo se non già presente */\n   612→        .scrollable-container:focus-visible {\n   613→            outline: 2px solid var(--e-global-color-primary, #0066cc);\n   614→            outline-offset: 2px;\n   615→        }\n   616→        \n   617→        /* Supporta la classe keyboard-scrolling esistente */\n   618→        .scrollable-container.keyboard-scrolling {\n   619→            scroll-behavior: smooth !important;\n   620→        }\n   621→        \n   622→        /* Screen reader only */\n   623→        .sr-only {\n   624→            position: absolute;\n   625→            width: 1px;\n   626→            height: 1px;\n   627→            padding: 0;\n   628→            margin: -1px;\n   629→            overflow: hidden;\n   630→            clip: rect(0,0,0,0);\n   631→            white-space: nowrap;\n   632→            border: 0;\n   633→        }\n   634→        \n   635→        /* Indicatori di pagina opzionali */\n   636→        .scroll-indicators {\n   637→            display: flex;\n   638→            justify-content: center;\n   639→            gap: 8px;\n   640→            margin-top: 16px;\n   641→            padding: 8px;\n   642→        }\n   643→        \n   644→        .scroll-indicator {\n   645→            width: 8px;\n   646→            height: 8px;\n   647→            border-radius: 50%;\n   648→            background: #ddd;\n   649→            transition: all 0.3s ease;\n   650→            cursor: pointer;\n   651→            border: none;\n   652→            padding: 0;\n   653→        }\n   654→        \n   655→        .scroll-indicator:hover {\n   656→            background: #999;\n   657→            transform: scale(1.2);\n   658→        }\n   659→        \n   660→        .scroll-indicator.active {\n   661→            background: var(--e-global-color-primary, #333);\n   662→            width: 24px;\n   663→            border-radius: 4px;\n   664→        }\n   665→        \n   666→        /* Supporto reduced motion */\n   667→        @media (prefers-reduced-motion: reduce) {\n   668→            * {\n   669→                animation-duration: 0.01ms !important;\n   670→                animation-iteration-count: 1 !important;\n   671→                transition-duration: 0.01ms !important;\n   672→            }\n   673→            \n   674→            .scrollable-container {\n   675→                scroll-behavior: auto !important;\n   676→            }\n   677→            \n   678→            .nav-button {\n   679→                transition: none !important;\n   680→            }\n   681→            \n   682→            .scroll-progress {\n   683→                transition: none !important;\n   684→            }\n   685→        }\n   686→        \n   687→        /* Migliora contrasto per accessibilità */\n   688→        @media (prefers-contrast: high) {\n   689→            .nav-button {\n   690→                background: #fff;\n   691→                border: 2px solid #000;\n   692→            }\n   693→            \n   694→            .nav-button:hover:not(:disabled) {\n   695→                background: #000;\n   696→                color: #fff;\n   697→            }\n   698→            \n   699→            .nav-button:hover:not(:disabled) svg {\n   700→                color: #fff;\n   701→            }\n   702→            \n   703→            .scroll-progress {\n   704→                background: #000;\n   705→            }\n   706→        }\n   707→        \n   708→        /* Dark mode support */\n   709→        @media (prefers-color-scheme: dark) {\n   710→            .nav-button {\n   711→                background: var(--e-global-color-primary);\n   712→                border-color: var(--e-global-color-primary);\n   713→            }\n   714→            \n   715→            .nav-button svg {\n   716→                color: #fff;\n   717→            }\n   718→            \n   719→            .nav-button:hover:not(:disabled) {\n   720→                background: var(--e-global-color-2de3d7d);\n   721→                border-color: var(--e-global-color-2de3d7d);\n   722→            }\n   723→            \n   724→            .scroll-indicator {\n   725→                background: #555;\n   726→            }\n   727→            \n   728→            .scroll-indicator:hover {\n   729→                background: #777;\n   730→            }\n   731→            \n   732→            .scroll-indicator.active {\n   733→                background: #fff;\n   734→            }\n   735→        }\n   736→    </style>\n   737→`;\n   738→\n   739→// Inizializzazione\n   740→function initImprovedScrollers() {\n   741→    // Inietta stili se non presenti\n   742→    if (!document.getElementById('improved-scroller-styles')) {\n   743→        document.head.insertAdjacentHTML('beforeend', improvedStyles);\n   744→    }\n   745→    \n   746→    // Trova tutti i container scrollabili\n   747→    const containers = document.querySelectorAll('.scrollable-container');\n   748→    \n   749→    containers.forEach(container => {\n   750→        // Skip se già inizializzato\n   751→        if (container.hasAttribute('data-improved-scroller')) return;\n   752→        \n   753→        // Inizializza solo se c'è overflow orizzontale\n   754→        if (container.scrollWidth > container.clientWidth) {\n   755→            new ImprovedElementorScroller(container);\n   756→            container.setAttribute('data-improved-scroller', 'true');\n   757→        }\n   758→    });\n   759→}\n   760→\n   761→// Inizializza quando DOM è pronto\n   762→if (document.readyState === 'loading') {\n   763→    document.addEventListener('DOMContentLoaded', initImprovedScrollers);\n   764→} else {\n   765→    initImprovedScrollers();\n   766→}\n   767→\n   768→// Hook per Elementor\n   769→if (typeof jQuery !== 'undefined') {\n   770→    jQuery(window).on('elementor/frontend/init', function() {\n   771→        if (window.elementorFrontend && window.elementorFrontend.hooks) {\n   772→            elementorFrontend.hooks.addAction('frontend/element_ready/widget', function() {\n   773→                setTimeout(initImprovedScrollers, 100);\n   774→            });\n   775→        }\n   776→    });\n   777→} else {\n   778→    // Fallback observer per contenuti dinamici\n   779→    const observer = new MutationObserver(() => {\n   780→        initImprovedScrollers();\n   781→    });\n   782→    \n   783→    observer.observe(document.body, {\n   784→        childList: true,\n   785→        subtree: true\n   786→    });\n   787→}\n   788→\n   789→// Re-inizializza su resize\n   790→let resizeTimeout;\n   791→window.addEventListener('resize', () => {\n   792→    clearTimeout(resizeTimeout);\n   793→    resizeTimeout = setTimeout(initImprovedScrollers, 250);\n   794→});\n   795→\n   796→console.log('Improved Elementor Scroller v2.0 loaded');"}]},"uuid":"2e9053a5-0bd0-4af6-a960-480ebcedd005","timestamp":"2025-07-29T07:15:07.945Z","toolUseResult":{"filePath":"/Users/disconnesso/Sites/villastuart.it/wp-content/themes/hello-villa-stuart/assets/js/improved-scroller.js","oldString":"/**\n * Slider Orizzontale Migliorato per Elementor\n * Versione 2.0 - Ottimizzato per Desktop con Accessibilità\n */\n\n// Classe principale per gestire lo slider\nclass ImprovedElementorScroller {\n    constructor(container) {\n        this.container = container;\n        this.wrapper = null;\n        this.isScrolling = false;\n        this.scrollTimeout = null;\n        \n        // Feature detection\n        this.supportsPassive = this.checkPassiveSupport();\n        this.supportsScrollBehavior = 'scrollBehavior' in document.documentElement.style;\n        \n        // Inizializza\n        this.init();\n    }\n    \n    // Check supporto passive listeners\n    checkPassiveSupport() {\n        let supportsPassive = false;\n        try {\n            const opts = Object.defineProperty({}, 'passive', {\n                get: () => { supportsPassive = true; }\n            });\n            window.addEventListener('testPassive', null, opts);\n            window.removeEventListener('testPassive', null, opts);\n        } catch (e) {}\n        return supportsPassive;\n    }\n    \n    init() {\n        // Crea wrapper per aggiungere controlli senza modificare HTML\n        this.wrapContainer();\n        \n        // Setup features\n        this.setupNavButtons();\n        this.setupKeyboard();\n        this.setupMouseWheel();\n        this.setupTouch();\n        this.setupScrollIndicator();\n        this.setupAccessibility();\n        \n        // Aggiorna stato iniziale\n        this.updateUI();\n    }\n    \n    // Wrap container esistente per aggiungere controlli\n    wrapContainer() {\n        // Se già wrappato, esci\n        if (this.container.parentElement.classList.contains('elementor-scroller-wrapper')) {\n            this.wrapper = this.container.parentElement;\n            return;\n        }\n        \n        // Crea wrapper\n        this.wrapper = document.createElement('div');\n        this.wrapper.className = 'elementor-scroller-wrapper';\n        this.wrapper.style.position = 'relative';\n        \n        // Inserisci wrapper\n        this.container.parentNode.insertBefore(this.wrapper, this.container);\n        this.wrapper.appendChild(this.container);\n    }\n    \n    // Setup pulsanti navigazione\n    setupNavButtons() {\n        // Crea pulsanti solo se non esistono\n        if (!this.wrapper.querySelector('.nav-button')) {\n            // Pulsante precedente\n            const prevButton = document.createElement('button');\n            prevButton.className = 'nav-button nav-prev';\n            prevButton.innerHTML = `\n                <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                    <path d=\"M15 18l-6-6 6-6\"/>\n                </svg>\n            `;\n            prevButton.setAttribute('aria-label', 'Scorri a sinistra');\n            prevButton.addEventListener('click', () => this.scrollPrev());\n            \n            // Pulsante successivo\n            const nextButton = document.createElement('button');\n            nextButton.className = 'nav-button nav-next';\n            nextButton.innerHTML = `\n                <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                    <path d=\"M9 18l6-6-6-6\"/>\n                </svg>\n            `;\n            nextButton.setAttribute('aria-label', 'Scorri a destra');\n            nextButton.addEventListener('click', () => this.scrollNext());\n            \n            // Aggiungi al wrapper\n            this.wrapper.appendChild(prevButton);\n            this.wrapper.appendChild(nextButton);\n            \n            // Store references\n            this.prevButton = prevButton;\n            this.nextButton = nextButton;\n        }\n    }\n    \n    // Setup tastiera migliorato\n    setupKeyboard() {\n        this.container.addEventListener('keydown', (e) => {\n            const scrollAmount = this.container.clientWidth * 0.8;\n            let handled = true;\n            \n            // Aggiungi classe per smooth scroll da tastiera\n            this.container.classList.add('keyboard-scrolling');\n            \n            switch(e.key) {\n                case 'ArrowLeft':\n                    this.smoothScroll(-scrollAmount);\n                    break;\n                case 'ArrowRight':\n                    this.smoothScroll(scrollAmount);\n                    break;\n                case 'Home':\n                    this.scrollToStart();\n                    break;\n                case 'End':\n                    this.scrollToEnd();\n                    break;\n                default:\n                    handled = false;\n            }\n            \n            if (handled) {\n                e.preventDefault();\n                // Rimuovi classe dopo animazione\n                setTimeout(() => {\n                    this.container.classList.remove('keyboard-scrolling');\n                }, 400);\n            } else {\n                this.container.classList.remove('keyboard-scrolling');\n            }\n        });\n    }\n    \n    // Setup mouse wheel - MIGLIORAMENTO CHIAVE\n    setupMouseWheel() {\n        let accumulatedDelta = 0;\n        let wheelTimeout;\n        \n        const wheelHandler = (e) => {\n            // Solo se container è in hover o focus\n            if (!this.container.matches(':hover, :focus-within')) return;\n            \n            e.preventDefault();\n            \n            // Accumula piccoli delta per scroll più fluido\n            accumulatedDelta += e.deltaY;\n            \n            clearTimeout(wheelTimeout);\n            wheelTimeout = setTimeout(() => {\n                if (Math.abs(accumulatedDelta) > 10) {\n                    // Normalizza e applica scroll\n                    const scrollAmount = Math.sign(accumulatedDelta) * Math.min(Math.abs(accumulatedDelta), 300);\n                    this.smoothScroll(scrollAmount);\n                }\n                accumulatedDelta = 0;\n            }, 50);\n        };\n        \n        // Aggiungi listener con passive false\n        this.container.addEventListener('wheel', wheelHandler, \n            this.supportsPassive ? { passive: false } : false\n        );\n    }\n    \n    // Setup touch con momentum migliorato\n    setupTouch() {\n        let startX = 0;\n        let scrollLeft = 0;\n        let isDragging = false;\n        let animationId = null;\n        let velocity = 0;\n        let lastX = 0;\n        let lastTime = 0;\n        \n        const startDragging = (pageX) => {\n            isDragging = true;\n            startX = pageX;\n            lastX = pageX;\n            scrollLeft = this.container.scrollLeft;\n            lastTime = Date.now();\n            velocity = 0;\n            \n            // Cancella animazioni\n            if (animationId) {\n                cancelAnimationFrame(animationId);\n            }\n            \n            // La classe 'active' è già nel CSS esistente per cursor grabbing\n            this.container.classList.add('active');\n        };\n        \n        const drag = (pageX) => {\n            if (!isDragging) return;\n            \n            const currentTime = Date.now();\n            const timeDelta = currentTime - lastTime;\n            const distance = pageX - lastX;\n            \n            // Calcola velocità\n            if (timeDelta > 0) {\n                velocity = distance / timeDelta * 16; // Normalizza a 60fps\n            }\n            \n            const walk = (pageX - startX) * 1.5;\n            this.container.scrollLeft = scrollLeft - walk;\n            \n            lastX = pageX;\n            lastTime = currentTime;\n        };\n        \n        const stopDragging = () => {\n            if (!isDragging) return;\n            \n            isDragging = false;\n            this.container.classList.remove('active');\n            \n            // Applica momentum se c'è velocità\n            if (Math.abs(velocity) > 2) {\n                const deceleration = 0.95;\n                \n                const animate = () => {\n                    if (Math.abs(velocity) > 0.5) {\n                        this.container.scrollLeft -= velocity;\n                        velocity *= deceleration;\n                        animationId = requestAnimationFrame(animate);\n                    } else {\n                        this.updateUI();\n                    }\n                };\n                \n                animate();\n            } else {\n                this.updateUI();\n            }\n        };\n        \n        // Mouse events\n        this.container.addEventListener('mousedown', (e) => {\n            startDragging(e.pageX);\n        });\n        \n        document.addEventListener('mousemove', (e) => {\n            drag(e.pageX);\n        });\n        \n        document.addEventListener('mouseup', stopDragging);\n        \n        // Touch events\n        this.container.addEventListener('touchstart', (e) => {\n            startDragging(e.touches[0].pageX);\n        }, this.supportsPassive ? { passive: true } : false);\n        \n        this.container.addEventListener('touchmove', (e) => {\n            drag(e.touches[0].pageX);\n        }, this.supportsPassive ? { passive: true } : false);\n        \n        this.container.addEventListener('touchend', stopDragging);\n        this.container.addEventListener('touchcancel', stopDragging);\n    }\n    \n    // Setup indicatore di scroll\n    setupScrollIndicator() {\n        // Crea progress bar solo se non nascosta da design\n        if (!this.wrapper.classList.contains('hide-progress')) {\n            const progressBar = document.createElement('div');\n            progressBar.className = 'scroll-progress';\n            progressBar.setAttribute('role', 'progressbar');\n            progressBar.setAttribute('aria-label', 'Progresso scroll');\n            progressBar.setAttribute('aria-valuemin', '0');\n            progressBar.setAttribute('aria-valuemax', '100');\n            \n            this.wrapper.appendChild(progressBar);\n            this.progressBar = progressBar;\n        }\n        \n        // Aggiorna su scroll\n        let ticking = false;\n        this.container.addEventListener('scroll', () => {\n            if (!ticking) {\n                requestAnimationFrame(() => {\n                    this.updateUI();\n                    ticking = false;\n                });\n                ticking = true;\n            }\n        }, this.supportsPassive ? { passive: true } : false);\n    }\n    \n    // Setup accessibilità\n    setupAccessibility() {\n        // ARIA labels\n        this.container.setAttribute('role', 'region');\n        this.container.setAttribute('aria-label', 'Contenuti scrollabili orizzontalmente');\n        \n        // Live region per annunci\n        const liveRegion = document.createElement('div');\n        liveRegion.className = 'sr-only';\n        liveRegion.setAttribute('role', 'status');\n        liveRegion.setAttribute('aria-live', 'polite');\n        liveRegion.setAttribute('aria-atomic', 'true');\n        liveRegion.style.cssText = `\n            position: absolute;\n            width: 1px;\n            height: 1px;\n            padding: 0;\n            margin: -1px;\n            overflow: hidden;\n            clip: rect(0,0,0,0);\n            white-space: nowrap;\n            border: 0;\n        `;\n        \n        this.wrapper.appendChild(liveRegion);\n        this.liveRegion = liveRegion;\n    }\n    \n    // Scroll fluido\n    smoothScroll(distance) {\n        if (this.supportsScrollBehavior) {\n            this.container.scrollBy({\n                left: distance,\n                behavior: 'smooth'\n            });\n        } else {\n            // Fallback animato\n            this.animateScroll(this.container.scrollLeft + distance);\n        }\n    }\n    \n    // Animazione scroll per fallback\n    animateScroll(target) {\n        const start = this.container.scrollLeft;\n        const distance = target - start;\n        const duration = 300;\n        let startTime = null;\n        \n        const animation = (currentTime) => {\n            if (!startTime) startTime = currentTime;\n            const elapsed = currentTime - startTime;\n            const progress = Math.min(elapsed / duration, 1);\n            \n            // Easing\n            const easeInOutQuad = progress < 0.5\n                ? 2 * progress * progress\n                : 1 - Math.pow(-2 * progress + 2, 2) / 2;\n            \n            this.container.scrollLeft = start + distance * easeInOutQuad;\n            \n            if (progress < 1) {\n                requestAnimationFrame(animation);\n            } else {\n                this.updateUI();\n            }\n        };\n        \n        requestAnimationFrame(animation);\n    }\n    \n    // Metodi di navigazione\n    scrollPrev() {\n        const scrollAmount = this.container.clientWidth * 0.8;\n        this.smoothScroll(-scrollAmount);\n        this.announce('Scorrimento a sinistra');\n    }\n    \n    scrollNext() {\n        const scrollAmount = this.container.clientWidth * 0.8;\n        this.smoothScroll(scrollAmount);\n        this.announce('Scorrimento a destra');\n    }\n    \n    scrollToStart() {\n        this.container.scrollTo({\n            left: 0,\n            behavior: this.supportsScrollBehavior ? 'smooth' : 'auto'\n        });\n        this.announce('Inizio dei contenuti');\n    }\n    \n    scrollToEnd() {\n        const maxScroll = this.container.scrollWidth - this.container.clientWidth;\n        this.container.scrollTo({\n            left: maxScroll,\n            behavior: this.supportsScrollBehavior ? 'smooth' : 'auto'\n        });\n        this.announce('Fine dei contenuti');\n    }\n    \n    // Aggiorna UI\n    updateUI() {\n        const scrollLeft = this.container.scrollLeft;\n        const maxScroll = this.container.scrollWidth - this.container.clientWidth;\n        \n        // Aggiorna pulsanti\n        if (this.prevButton && this.nextButton) {\n            this.prevButton.disabled = scrollLeft <= 0;\n            this.nextButton.disabled = scrollLeft >= maxScroll - 1;\n            \n            // Aggiorna ARIA\n            this.prevButton.setAttribute('aria-disabled', scrollLeft <= 0);\n            this.nextButton.setAttribute('aria-disabled', scrollLeft >= maxScroll - 1);\n        }\n        \n        // Aggiorna progress bar\n        if (this.progressBar && maxScroll > 0) {\n            const progress = (scrollLeft / maxScroll) * 100;\n            this.progressBar.style.width = `${progress}%`;\n            this.progressBar.setAttribute('aria-valuenow', Math.round(progress));\n        }\n    }\n    \n    // Annuncia a screen reader\n    announce(message) {\n        if (this.liveRegion) {\n            this.liveRegion.textContent = message;\n            // Reset dopo annuncio\n            setTimeout(() => {\n                this.liveRegion.textContent = '';\n            }, 1000);\n        }\n    }\n}\n\n// CSS da iniettare - Adattato per CSS Elementor esistente\nconst improvedStyles = `\n    <style id=\"improved-scroller-styles\">\n        /* Wrapper styles */\n        .elementor-scroller-wrapper {\n            position: relative;\n        }\n        \n        /* Nasconde scrollbar orizzontale su desktop mantenendo lo scroll */\n        .scrollable-container {\n            /* Firefox */\n            scrollbar-width: none;\n            \n            /* IE 10+ */\n            -ms-overflow-style: none;\n            \n            /* Aggiunge spazio per l'ultima card */\n            padding-right: 30px;\n            box-sizing: content-box;\n        }\n        \n        /* Compensa il padding per il primo elemento */\n        .scrollable-container > *:first-child {\n            margin-left: 20px;\n        }\n        \n        /* Fix per Elementor - previeni che tagli il contenuto */\n        .elementor-widget-container {\n            overflow: visible !important;\n        }\n        \n        /* Fix per container con gap CSS */\n        .scrollable-container[style*=\"gap\"] {\n            padding-right: 50px;\n        }\n        \n        /* Chrome, Safari, Opera, Edge */\n        .scrollable-container::-webkit-scrollbar {\n            width: 0 !important;\n            height: 0 !important;\n            display: none;\n        }\n        \n        .scrollable-container::-webkit-scrollbar-track {\n            background: transparent;\n        }\n        \n        .scrollable-container::-webkit-scrollbar-thumb {\n            background: transparent;\n            border: none;\n        }\n        \n        /* Supporto per browser più vecchi */\n        @supports not (scrollbar-width: none) {\n            .scrollable-container {\n                margin-bottom: -17px;\n                padding-bottom: 17px;\n            }\n        }\n        \n        /* Pulsanti navigazione */\n        .nav-button {\n            position: absolute;\n            top: 50%;\n            transform: translateY(-50%);\n            width: 48px;\n            height: 48px;\n            background: rgba(255, 255, 255, 0.95);\n            border: 1px solid #ddd;\n            border-radius: 50%;\n            cursor: pointer;\n            display: none;\n            align-items: center;\n            justify-content: center;\n            z-index: 10;\n            transition: all 0.3s ease;\n            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n            \n            /* Assicura che sia sopra il contenuto */\n            pointer-events: auto;\n        }\n        \n        .nav-button {\n            background: var(--e-global-color-primary);\n        }\n        \n        .nav-button svg {\n            width: 24px;\n            height: 24px;\n            color: #fff;\n        }\n        \n        .nav-button:hover:not(:disabled) {\n            background: var(--e-global-color-2de3d7d);\n            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n            transform: translateY(-50%) scale(1.1);\n        }\n        \n        .nav-button:active {\n            transform: translateY(-50%) scale(0.95);\n        }\n        \n        .nav-button:hover:not(:disabled) {\n            background: var(--e-global-color-2de3d7d);\n            border-color: var(--e-global-color-2de3d7d);\n        }\n        \n        .nav-button:active {\n            transform: translateY(-50%) scale(0.95);\n        }\n        \n        .nav-button:disabled {\n            opacity: 0.3;\n            cursor: not-allowed;\n        }\n        \n        .nav-button:disabled:hover {\n            transform: translateY(-50%);\n        }\n        \n        .nav-button:focus {\n            outline: 2px solid var(--e-global-color-primary, #0066cc);\n            outline-offset: 2px;\n        }\n        \n        .nav-prev {\n            left: 10px;\n        }\n        \n        .nav-next {\n            right: 10px;\n        }\n        \n        /* Mostra pulsanti su desktop */\n        @media (min-width: 1024px) {\n            .elementor-scroller-wrapper:hover .nav-button:not(:disabled) {\n                display: flex;\n            }\n            \n            .elementor-scroller-wrapper:focus-within .nav-button:not(:disabled) {\n                display: flex;\n            }\n        }\n        \n        /* Progress bar sottile */\n        .scroll-progress {\n            position: absolute;\n            bottom: 0;\n            left: 0;\n            height: 3px;\n            background: var(--e-global-color-primary, #0066cc);\n            transition: width 0.2s ease, opacity 0.3s ease;\n            pointer-events: none;\n            z-index: 5;\n            opacity: 0;\n            border-radius: 0 3px 3px 0;\n        }\n        \n        /* Mostra progress bar su hover/focus */\n        .elementor-scroller-wrapper:hover .scroll-progress,\n        .elementor-scroller-wrapper:focus-within .scroll-progress {\n            opacity: 0.7;\n        }\n        \n        /* Non sovrascriviamo cursor - già impostato nel CSS esistente */\n        \n        /* Focus migliore - solo se non già presente */\n        .scrollable-container:focus-visible {\n            outline: 2px solid var(--e-global-color-primary, #0066cc);\n            outline-offset: 2px;\n        }\n        \n        /* Supporta la classe keyboard-scrolling esistente */\n        .scrollable-container.keyboard-scrolling {\n            scroll-behavior: smooth !important;\n        }\n        \n        /* Screen reader only */\n        .sr-only {\n            position: absolute;\n            width: 1px;\n            height: 1px;\n            padding: 0;\n            margin: -1px;\n            overflow: hidden;\n            clip: rect(0,0,0,0);\n            white-space: nowrap;\n            border: 0;\n        }\n        \n        /* Indicatori di pagina opzionali */\n        .scroll-indicators {\n            display: flex;\n            justify-content: center;\n            gap: 8px;\n            margin-top: 16px;\n            padding: 8px;\n        }\n        \n        .scroll-indicator {\n            width: 8px;\n            height: 8px;\n            border-radius: 50%;\n            background: #ddd;\n            transition: all 0.3s ease;\n            cursor: pointer;\n            border: none;\n            padding: 0;\n        }\n        \n        .scroll-indicator:hover {\n            background: #999;\n            transform: scale(1.2);\n        }\n        \n        .scroll-indicator.active {\n            background: var(--e-global-color-primary, #333);\n            width: 24px;\n            border-radius: 4px;\n        }\n        \n        /* Supporto reduced motion */\n        @media (prefers-reduced-motion: reduce) {\n            * {\n                animation-duration: 0.01ms !important;\n                animation-iteration-count: 1 !important;\n                transition-duration: 0.01ms !important;\n            }\n            \n            .scrollable-container {\n                scroll-behavior: auto !important;\n            }\n            \n            .nav-button {\n                transition: none !important;\n            }\n            \n            .scroll-progress {\n                transition: none !important;\n            }\n        }\n        \n        /* Migliora contrasto per accessibilità */\n        @media (prefers-contrast: high) {\n            .nav-button {\n                background: #fff;\n                border: 2px solid #000;\n            }\n            \n            .nav-button:hover:not(:disabled) {\n                background: #000;\n                color: #fff;\n            }\n            \n            .nav-button:hover:not(:disabled) svg {\n                color: #fff;\n            }\n            \n            .scroll-progress {\n                background: #000;\n            }\n        }\n        \n        /* Dark mode support */\n        @media (prefers-color-scheme: dark) {\n            .nav-button {\n                background: var(--e-global-color-primary);\n                border-color: var(--e-global-color-primary);\n            }\n            \n            .nav-button svg {\n                color: #fff;\n            }\n            \n            .nav-button:hover:not(:disabled) {\n                background: var(--e-global-color-2de3d7d);\n                border-color: var(--e-global-color-2de3d7d);\n            }\n            \n            .scroll-indicator {\n                background: #555;\n            }\n            \n            .scroll-indicator:hover {\n                background: #777;\n            }\n            \n            .scroll-indicator.active {\n                background: #fff;\n            }\n        }\n    </style>\n`;\n\n// Inizializzazione\nfunction initImprovedScrollers() {\n    // Inietta stili se non presenti\n    if (!document.getElementById('improved-scroller-styles')) {\n        document.head.insertAdjacentHTML('beforeend', improvedStyles);\n    }\n    \n    // Trova tutti i container scrollabili\n    const containers = document.querySelectorAll('.scrollable-container');\n    \n    containers.forEach(container => {\n        // Skip se già inizializzato\n        if (container.hasAttribute('data-improved-scroller')) return;\n        \n        // Inizializza solo se c'è overflow orizzontale\n        if (container.scrollWidth > container.clientWidth) {\n            new ImprovedElementorScroller(container);\n            container.setAttribute('data-improved-scroller', 'true');\n        }\n    });\n}\n\n// Inizializza quando DOM è pronto\nif (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', initImprovedScrollers);\n} else {\n    initImprovedScrollers();\n}\n\n// Hook per Elementor\nif (typeof jQuery !== 'undefined') {\n    jQuery(window).on('elementor/frontend/init', function() {\n        if (window.elementorFrontend && window.elementorFrontend.hooks) {\n            elementorFrontend.hooks.addAction('frontend/element_ready/widget', function() {\n                setTimeout(initImprovedScrollers, 100);\n            });\n        }\n    });\n} else {\n    // Fallback observer per contenuti dinamici\n    const observer = new MutationObserver(() => {\n        initImprovedScrollers();\n    });\n    \n    observer.observe(document.body, {\n        childList: true,\n        subtree: true\n    });\n}\n\n// Re-inizializza su resize\nlet resizeTimeout;\nwindow.addEventListener('resize', () => {\n    clearTimeout(resizeTimeout);\n    resizeTimeout = setTimeout(initImprovedScrollers, 250);\n});\n\nconsole.log('Improved Elementor Scroller v2.0 loaded');","newString":"/**\n * Slider Orizzontale Migliorato per Elementor\n * Versione 2.0 - Ottimizzato per Desktop con Accessibilità\n */\n\n// Classe principale per gestire lo slider\nclass ImprovedElementorScroller {\n    constructor(container) {\n        this.container = container;\n        this.wrapper = null;\n        this.isScrolling = false;\n        this.scrollTimeout = null;\n        \n        // Feature detection\n        this.supportsPassive = this.checkPassiveSupport();\n        this.supportsScrollBehavior = 'scrollBehavior' in document.documentElement.style;\n        \n        // Inizializza\n        this.init();\n    }\n    \n    // Check supporto passive listeners\n    checkPassiveSupport() {\n        let supportsPassive = false;\n        try {\n            const opts = Object.defineProperty({}, 'passive', {\n                get: () => { supportsPassive = true; }\n            });\n            window.addEventListener('testPassive', null, opts);\n            window.removeEventListener('testPassive', null, opts);\n        } catch (e) {}\n        return supportsPassive;\n    }\n    \n    init() {\n        // Crea wrapper per aggiungere controlli senza modificare HTML\n        this.wrapContainer();\n        \n        // Setup features\n        this.setupNavButtons();\n        this.setupKeyboard();\n        this.setupMouseWheel();\n        this.setupTouch();\n        this.setupScrollIndicator();\n        this.setupAccessibility();\n        \n        // Aggiorna stato iniziale\n        this.updateUI();\n    }\n    \n    // Wrap container esistente per aggiungere controlli\n    wrapContainer() {\n        // Se già wrappato, esci\n        if (this.container.parentElement.classList.contains('elementor-scroller-wrapper')) {\n            this.wrapper = this.container.parentElement;\n            return;\n        }\n        \n        // Crea wrapper\n        this.wrapper = document.createElement('div');\n        this.wrapper.className = 'elementor-scroller-wrapper';\n        this.wrapper.style.position = 'relative';\n        \n        // Inserisci wrapper\n        this.container.parentNode.insertBefore(this.wrapper, this.container);\n        this.wrapper.appendChild(this.container);\n    }\n    \n    // Setup pulsanti navigazione\n    setupNavButtons() {\n        // Crea pulsanti solo se non esistono\n        if (!this.wrapper.querySelector('.nav-button')) {\n            // Pulsante precedente\n            const prevButton = document.createElement('button');\n            prevButton.className = 'nav-button nav-prev';\n            prevButton.innerHTML = `\n                <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                    <path d=\"M15 18l-6-6 6-6\"/>\n                </svg>\n            `;\n            prevButton.setAttribute('aria-label', 'Scorri a sinistra');\n            prevButton.addEventListener('click', () => this.scrollPrev());\n            \n            // Pulsante successivo\n            const nextButton = document.createElement('button');\n            nextButton.className = 'nav-button nav-next';\n            nextButton.innerHTML = `\n                <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                    <path d=\"M9 18l6-6-6-6\"/>\n                </svg>\n            `;\n            nextButton.setAttribute('aria-label', 'Scorri a destra');\n            nextButton.addEventListener('click', () => this.scrollNext());\n            \n            // Aggiungi al wrapper\n            this.wrapper.appendChild(prevButton);\n            this.wrapper.appendChild(nextButton);\n            \n            // Store references\n            this.prevButton = prevButton;\n            this.nextButton = nextButton;\n        }\n    }\n    \n    // Setup tastiera migliorato\n    setupKeyboard() {\n        this.container.addEventListener('keydown', (e) => {\n            const scrollAmount = this.container.clientWidth * 0.8;\n            let handled = true;\n            \n            // Aggiungi classe per smooth scroll da tastiera\n            this.container.classList.add('keyboard-scrolling');\n            \n            switch(e.key) {\n                case 'ArrowLeft':\n                    this.smoothScroll(-scrollAmount);\n                    break;\n                case 'ArrowRight':\n                    this.smoothScroll(scrollAmount);\n                    break;\n                case 'Home':\n                    this.scrollToStart();\n                    break;\n                case 'End':\n                    this.scrollToEnd();\n                    break;\n                default:\n                    handled = false;\n            }\n            \n            if (handled) {\n                e.preventDefault();\n                // Rimuovi classe dopo animazione\n                setTimeout(() => {\n                    this.container.classList.remove('keyboard-scrolling');\n                }, 400);\n            } else {\n                this.container.classList.remove('keyboard-scrolling');\n            }\n        });\n    }\n    \n    // Setup mouse wheel - MIGLIORAMENTO CHIAVE\n    setupMouseWheel() {\n        let accumulatedDelta = 0;\n        let wheelTimeout;\n        \n        const wheelHandler = (e) => {\n            // Solo se container è in hover o focus\n            if (!this.container.matches(':hover, :focus-within')) return;\n            \n            e.preventDefault();\n            \n            // Accumula piccoli delta per scroll più fluido\n            accumulatedDelta += e.deltaY;\n            \n            clearTimeout(wheelTimeout);\n            wheelTimeout = setTimeout(() => {\n                if (Math.abs(accumulatedDelta) > 10) {\n                    // Normalizza e applica scroll\n                    const scrollAmount = Math.sign(accumulatedDelta) * Math.min(Math.abs(accumulatedDelta), 300);\n                    this.smoothScroll(scrollAmount);\n                }\n                accumulatedDelta = 0;\n            }, 50);\n        };\n        \n        // Aggiungi listener con passive false\n        this.container.addEventListener('wheel', wheelHandler, \n            this.supportsPassive ? { passive: false } : false\n        );\n    }\n    \n    // Setup touch con momentum migliorato\n    setupTouch() {\n        let startX = 0;\n        let scrollLeft = 0;\n        let isDragging = false;\n        let animationId = null;\n        let velocity = 0;\n        let lastX = 0;\n        let lastTime = 0;\n        \n        const startDragging = (pageX) => {\n            isDragging = true;\n            startX = pageX;\n            lastX = pageX;\n            scrollLeft = this.container.scrollLeft;\n            lastTime = Date.now();\n            velocity = 0;\n            \n            // Cancella animazioni\n            if (animationId) {\n                cancelAnimationFrame(animationId);\n            }\n            \n            // La classe 'active' è già nel CSS esistente per cursor grabbing\n            this.container.classList.add('active');\n        };\n        \n        const drag = (pageX) => {\n            if (!isDragging) return;\n            \n            const currentTime = Date.now();\n            const timeDelta = currentTime - lastTime;\n            const distance = pageX - lastX;\n            \n            // Calcola velocità\n            if (timeDelta > 0) {\n                velocity = distance / timeDelta * 16; // Normalizza a 60fps\n            }\n            \n            const walk = (pageX - startX) * 1.5;\n            this.container.scrollLeft = scrollLeft - walk;\n            \n            lastX = pageX;\n            lastTime = currentTime;\n        };\n        \n        const stopDragging = () => {\n            if (!isDragging) return;\n            \n            isDragging = false;\n            this.container.classList.remove('active');\n            \n            // Applica momentum se c'è velocità\n            if (Math.abs(velocity) > 2) {\n                const deceleration = 0.95;\n                \n                const animate = () => {\n                    if (Math.abs(velocity) > 0.5) {\n                        this.container.scrollLeft -= velocity;\n                        velocity *= deceleration;\n                        animationId = requestAnimationFrame(animate);\n                    } else {\n                        this.updateUI();\n                    }\n                };\n                \n                animate();\n            } else {\n                this.updateUI();\n            }\n        };\n        \n        // Mouse events\n        this.container.addEventListener('mousedown', (e) => {\n            startDragging(e.pageX);\n        });\n        \n        document.addEventListener('mousemove', (e) => {\n            drag(e.pageX);\n        });\n        \n        document.addEventListener('mouseup', stopDragging);\n        \n        // Touch events\n        this.container.addEventListener('touchstart', (e) => {\n            startDragging(e.touches[0].pageX);\n        }, this.supportsPassive ? { passive: true } : false);\n        \n        this.container.addEventListener('touchmove', (e) => {\n            drag(e.touches[0].pageX);\n        }, this.supportsPassive ? { passive: true } : false);\n        \n        this.container.addEventListener('touchend', stopDragging);\n        this.container.addEventListener('touchcancel', stopDragging);\n    }\n    \n    // Setup indicatore di scroll\n    setupScrollIndicator() {\n        // Crea progress bar solo se non nascosta da design\n        if (!this.wrapper.classList.contains('hide-progress')) {\n            const progressBar = document.createElement('div');\n            progressBar.className = 'scroll-progress';\n            progressBar.setAttribute('role', 'progressbar');\n            progressBar.setAttribute('aria-label', 'Progresso scroll');\n            progressBar.setAttribute('aria-valuemin', '0');\n            progressBar.setAttribute('aria-valuemax', '100');\n            \n            this.wrapper.appendChild(progressBar);\n            this.progressBar = progressBar;\n        }\n        \n        // Aggiorna su scroll\n        let ticking = false;\n        this.container.addEventListener('scroll', () => {\n            if (!ticking) {\n                requestAnimationFrame(() => {\n                    this.updateUI();\n                    ticking = false;\n                });\n                ticking = true;\n            }\n        }, this.supportsPassive ? { passive: true } : false);\n    }\n    \n    // Setup accessibilità\n    setupAccessibility() {\n        // ARIA labels\n        this.container.setAttribute('role', 'region');\n        this.container.setAttribute('aria-label', 'Contenuti scrollabili orizzontalmente');\n        \n        // Live region per annunci\n        const liveRegion = document.createElement('div');\n        liveRegion.className = 'sr-only';\n        liveRegion.setAttribute('role', 'status');\n        liveRegion.setAttribute('aria-live', 'polite');\n        liveRegion.setAttribute('aria-atomic', 'true');\n        liveRegion.style.cssText = `\n            position: absolute;\n            width: 1px;\n            height: 1px;\n            padding: 0;\n            margin: -1px;\n            overflow: hidden;\n            clip: rect(0,0,0,0);\n            white-space: nowrap;\n            border: 0;\n        `;\n        \n        this.wrapper.appendChild(liveRegion);\n        this.liveRegion = liveRegion;\n    }\n    \n    // Scroll fluido\n    smoothScroll(distance) {\n        if (this.supportsScrollBehavior) {\n            this.container.scrollBy({\n                left: distance,\n                behavior: 'smooth'\n            });\n        } else {\n            // Fallback animato\n            this.animateScroll(this.container.scrollLeft + distance);\n        }\n    }\n    \n    // Animazione scroll per fallback\n    animateScroll(target) {\n        const start = this.container.scrollLeft;\n        const distance = target - start;\n        const duration = 300;\n        let startTime = null;\n        \n        const animation = (currentTime) => {\n            if (!startTime) startTime = currentTime;\n            const elapsed = currentTime - startTime;\n            const progress = Math.min(elapsed / duration, 1);\n            \n            // Easing\n            const easeInOutQuad = progress < 0.5\n                ? 2 * progress * progress\n                : 1 - Math.pow(-2 * progress + 2, 2) / 2;\n            \n            this.container.scrollLeft = start + distance * easeInOutQuad;\n            \n            if (progress < 1) {\n                requestAnimationFrame(animation);\n            } else {\n                this.updateUI();\n            }\n        };\n        \n        requestAnimationFrame(animation);\n    }\n    \n    // Metodi di navigazione\n    scrollPrev() {\n        const scrollAmount = this.container.clientWidth * 0.8;\n        this.smoothScroll(-scrollAmount);\n        this.announce('Scorrimento a sinistra');\n    }\n    \n    scrollNext() {\n        const scrollAmount = this.container.clientWidth * 0.8;\n        this.smoothScroll(scrollAmount);\n        this.announce('Scorrimento a destra');\n    }\n    \n    scrollToStart() {\n        this.container.scrollTo({\n            left: 0,\n            behavior: this.supportsScrollBehavior ? 'smooth' : 'auto'\n        });\n        this.announce('Inizio dei contenuti');\n    }\n    \n    scrollToEnd() {\n        const maxScroll = this.container.scrollWidth - this.container.clientWidth;\n        this.container.scrollTo({\n            left: maxScroll,\n            behavior: this.supportsScrollBehavior ? 'smooth' : 'auto'\n        });\n        this.announce('Fine dei contenuti');\n    }\n    \n    // Aggiorna UI\n    updateUI() {\n        const scrollLeft = this.container.scrollLeft;\n        \n        // Calcola il gap tra le card (se usi gap in CSS)\n        const computedStyle = window.getComputedStyle(this.container);\n        const gap = parseFloat(computedStyle.gap) || 0;\n        \n        // Trova l'ultima card\n        const lastChild = this.container.lastElementChild;\n        const lastChildWidth = lastChild ? lastChild.offsetWidth : 0;\n        \n        // Calcola il maxScroll considerando l'ultima card e il padding\n        const maxScroll = this.container.scrollWidth - this.container.clientWidth;\n        const adjustedMaxScroll = Math.max(0, maxScroll - gap);\n        \n        // Aggiorna pulsanti con tolleranza\n        if (this.prevButton && this.nextButton) {\n            const tolerance = 5;\n            this.prevButton.disabled = scrollLeft <= tolerance;\n            this.nextButton.disabled = scrollLeft >= adjustedMaxScroll - tolerance;\n            \n            // Aggiorna ARIA\n            this.prevButton.setAttribute('aria-disabled', scrollLeft <= tolerance);\n            this.nextButton.setAttribute('aria-disabled', scrollLeft >= adjustedMaxScroll - tolerance);\n        }\n        \n        // Aggiorna progress bar\n        if (this.progressBar && adjustedMaxScroll > 0) {\n            const progress = Math.min(100, (scrollLeft / adjustedMaxScroll) * 100);\n            this.progressBar.style.width = `${progress}%`;\n            this.progressBar.setAttribute('aria-valuenow', Math.round(progress));\n        }\n    }\n    \n    // Annuncia a screen reader\n    announce(message) {\n        if (this.liveRegion) {\n            this.liveRegion.textContent = message;\n            // Reset dopo annuncio\n            setTimeout(() => {\n                this.liveRegion.textContent = '';\n            }, 1000);\n        }\n    }\n}\n\n// CSS da iniettare - Adattato per CSS Elementor esistente\nconst improvedStyles = `\n    <style id=\"improved-scroller-styles\">\n        /* Wrapper styles */\n        .elementor-scroller-wrapper {\n            position: relative;\n        }\n        \n        /* Nasconde scrollbar orizzontale su desktop mantenendo lo scroll */\n        .scrollable-container {\n            /* Firefox */\n            scrollbar-width: none;\n            \n            /* IE 10+ */\n            -ms-overflow-style: none;\n            \n            /* Aggiunge spazio per l'ultima card */\n            padding-right: 30px;\n            box-sizing: content-box;\n        }\n        \n        /* Compensa il padding per il primo elemento */\n        .scrollable-container > *:first-child {\n            margin-left: 20px;\n        }\n        \n        /* Fix per Elementor - previeni che tagli il contenuto */\n        .elementor-widget-container {\n            overflow: visible !important;\n        }\n        \n        /* Fix per container con gap CSS */\n        .scrollable-container[style*=\"gap\"] {\n            padding-right: 50px;\n        }\n        \n        /* Chrome, Safari, Opera, Edge */\n        .scrollable-container::-webkit-scrollbar {\n            width: 0 !important;\n            height: 0 !important;\n            display: none;\n        }\n        \n        .scrollable-container::-webkit-scrollbar-track {\n            background: transparent;\n        }\n        \n        .scrollable-container::-webkit-scrollbar-thumb {\n            background: transparent;\n            border: none;\n        }\n        \n        /* Supporto per browser più vecchi */\n        @supports not (scrollbar-width: none) {\n            .scrollable-container {\n                margin-bottom: -17px;\n                padding-bottom: 17px;\n            }\n        }\n        \n        /* Pulsanti navigazione */\n        .nav-button {\n            position: absolute;\n            top: 50%;\n            transform: translateY(-50%);\n            width: 48px;\n            height: 48px;\n            background: rgba(255, 255, 255, 0.95);\n            border: 1px solid #ddd;\n            border-radius: 50%;\n            cursor: pointer;\n            display: none;\n            align-items: center;\n            justify-content: center;\n            z-index: 10;\n            transition: all 0.3s ease;\n            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n            \n            /* Assicura che sia sopra il contenuto */\n            pointer-events: auto;\n        }\n        \n        .nav-button {\n            background: var(--e-global-color-primary);\n        }\n        \n        .nav-button svg {\n            width: 24px;\n            height: 24px;\n            color: #fff;\n        }\n        \n        .nav-button:hover:not(:disabled) {\n            background: var(--e-global-color-2de3d7d);\n            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n            transform: translateY(-50%) scale(1.1);\n        }\n        \n        .nav-button:active {\n            transform: translateY(-50%) scale(0.95);\n        }\n        \n        .nav-button:hover:not(:disabled) {\n            background: var(--e-global-color-2de3d7d);\n            border-color: var(--e-global-color-2de3d7d);\n        }\n        \n        .nav-button:active {\n            transform: translateY(-50%) scale(0.95);\n        }\n        \n        .nav-button:disabled {\n            opacity: 0.3;\n            cursor: not-allowed;\n        }\n        \n        .nav-button:disabled:hover {\n            transform: translateY(-50%);\n        }\n        \n        .nav-button:focus {\n            outline: 2px solid var(--e-global-color-primary, #0066cc);\n            outline-offset: 2px;\n        }\n        \n        .nav-prev {\n            left: 10px;\n        }\n        \n        .nav-next {\n            right: 10px;\n        }\n        \n        /* Mostra pulsanti su desktop */\n        @media (min-width: 1024px) {\n            .elementor-scroller-wrapper:hover .nav-button:not(:disabled) {\n                display: flex;\n            }\n            \n            .elementor-scroller-wrapper:focus-within .nav-button:not(:disabled) {\n                display: flex;\n            }\n        }\n        \n        /* Progress bar sottile */\n        .scroll-progress {\n            position: absolute;\n            bottom: 0;\n            left: 0;\n            height: 3px;\n            background: var(--e-global-color-primary, #0066cc);\n            transition: width 0.2s ease, opacity 0.3s ease;\n            pointer-events: none;\n            z-index: 5;\n            opacity: 0;\n            border-radius: 0 3px 3px 0;\n        }\n        \n        /* Mostra progress bar su hover/focus */\n        .elementor-scroller-wrapper:hover .scroll-progress,\n        .elementor-scroller-wrapper:focus-within .scroll-progress {\n            opacity: 0.7;\n        }\n        \n        /* Non sovrascriviamo cursor - già impostato nel CSS esistente */\n        \n        /* Focus migliore - solo se non già presente */\n        .scrollable-container:focus-visible {\n            outline: 2px solid var(--e-global-color-primary, #0066cc);\n            outline-offset: 2px;\n        }\n        \n        /* Supporta la classe keyboard-scrolling esistente */\n        .scrollable-container.keyboard-scrolling {\n            scroll-behavior: smooth !important;\n        }\n        \n        /* Screen reader only */\n        .sr-only {\n            position: absolute;\n            width: 1px;\n            height: 1px;\n            padding: 0;\n            margin: -1px;\n            overflow: hidden;\n            clip: rect(0,0,0,0);\n            white-space: nowrap;\n            border: 0;\n        }\n        \n        /* Indicatori di pagina opzionali */\n        .scroll-indicators {\n            display: flex;\n            justify-content: center;\n            gap: 8px;\n            margin-top: 16px;\n            padding: 8px;\n        }\n        \n        .scroll-indicator {\n            width: 8px;\n            height: 8px;\n            border-radius: 50%;\n            background: #ddd;\n            transition: all 0.3s ease;\n            cursor: pointer;\n            border: none;\n            padding: 0;\n        }\n        \n        .scroll-indicator:hover {\n            background: #999;\n            transform: scale(1.2);\n        }\n        \n        .scroll-indicator.active {\n            background: var(--e-global-color-primary, #333);\n            width: 24px;\n            border-radius: 4px;\n        }\n        \n        /* Supporto reduced motion */\n        @media (prefers-reduced-motion: reduce) {\n            * {\n                animation-duration: 0.01ms !important;\n                animation-iteration-count: 1 !important;\n                transition-duration: 0.01ms !important;\n            }\n            \n            .scrollable-container {\n                scroll-behavior: auto !important;\n            }\n            \n            .nav-button {\n                transition: none !important;\n            }\n            \n            .scroll-progress {\n                transition: none !important;\n            }\n        }\n        \n        /* Migliora contrasto per accessibilità */\n        @media (prefers-contrast: high) {\n            .nav-button {\n                background: #fff;\n                border: 2px solid #000;\n            }\n            \n            .nav-button:hover:not(:disabled) {\n                background: #000;\n                color: #fff;\n            }\n            \n            .nav-button:hover:not(:disabled) svg {\n                color: #fff;\n            }\n            \n            .scroll-progress {\n                background: #000;\n            }\n        }\n        \n        /* Dark mode support */\n        @media (prefers-color-scheme: dark) {\n            .nav-button {\n                background: var(--e-global-color-primary);\n                border-color: var(--e-global-color-primary);\n            }\n            \n            .nav-button svg {\n                color: #fff;\n            }\n            \n            .nav-button:hover:not(:disabled) {\n                background: var(--e-global-color-2de3d7d);\n                border-color: var(--e-global-color-2de3d7d);\n            }\n            \n            .scroll-indicator {\n                background: #555;\n            }\n            \n            .scroll-indicator:hover {\n                background: #777;\n            }\n            \n            .scroll-indicator.active {\n                background: #fff;\n            }\n        }\n    </style>\n`;\n\n// Inizializzazione\nfunction initImprovedScrollers() {\n    // Inietta stili se non presenti\n    if (!document.getElementById('improved-scroller-styles')) {\n        document.head.insertAdjacentHTML('beforeend', improvedStyles);\n    }\n    \n    // Trova tutti i container scrollabili\n    const containers = document.querySelectorAll('.scrollable-container');\n    \n    containers.forEach(container => {\n        // Skip se già inizializzato\n        if (container.hasAttribute('data-improved-scroller')) return;\n        \n        // Inizializza solo se c'è overflow orizzontale\n        if (container.scrollWidth > container.clientWidth) {\n            new ImprovedElementorScroller(container);\n            container.setAttribute('data-improved-scroller', 'true');\n        }\n    });\n}\n\n// Inizializza quando DOM è pronto\nif (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', initImprovedScrollers);\n} else {\n    initImprovedScrollers();\n}\n\n// Hook per Elementor\nif (typeof jQuery !== 'undefined') {\n    jQuery(window).on('elementor/frontend/init', function() {\n        if (window.elementorFrontend && window.elementorFrontend.hooks) {\n            elementorFrontend.hooks.addAction('frontend/element_ready/widget', function() {\n                setTimeout(initImprovedScrollers, 100);\n            });\n        }\n    });\n} else {\n    // Fallback observer per contenuti dinamici\n    const observer = new MutationObserver(() => {\n        initImprovedScrollers();\n    });\n    \n    observer.observe(document.body, {\n        childList: true,\n        subtree: true\n    });\n}\n\n// Re-inizializza su resize\nlet resizeTimeout;\nwindow.addEventListener('resize', () => {\n    clearTimeout(resizeTimeout);\n    resizeTimeout = setTimeout(initImprovedScrollers, 250);\n});\n\nconsole.log('Improved Elementor Scroller v2.0 loaded');","originalFile":"/**\n * Slider Orizzontale Migliorato per Elementor\n * Versione 2.0 - Ottimizzato per Desktop con Accessibilità\n */\n\n// Classe principale per gestire lo slider\nclass ImprovedElementorScroller {\n    constructor(container) {\n        this.container = container;\n        this.wrapper = null;\n        this.isScrolling = false;\n        this.scrollTimeout = null;\n        \n        // Feature detection\n        this.supportsPassive = this.checkPassiveSupport();\n        this.supportsScrollBehavior = 'scrollBehavior' in document.documentElement.style;\n        \n        // Inizializza\n        this.init();\n    }\n    \n    // Check supporto passive listeners\n    checkPassiveSupport() {\n        let supportsPassive = false;\n        try {\n            const opts = Object.defineProperty({}, 'passive', {\n                get: () => { supportsPassive = true; }\n            });\n            window.addEventListener('testPassive', null, opts);\n            window.removeEventListener('testPassive', null, opts);\n        } catch (e) {}\n        return supportsPassive;\n    }\n    \n    init() {\n        // Crea wrapper per aggiungere controlli senza modificare HTML\n        this.wrapContainer();\n        \n        // Setup features\n        this.setupNavButtons();\n        this.setupKeyboard();\n        this.setupMouseWheel();\n        this.setupTouch();\n        this.setupScrollIndicator();\n        this.setupAccessibility();\n        \n        // Aggiorna stato iniziale\n        this.updateUI();\n    }\n    \n    // Wrap container esistente per aggiungere controlli\n    wrapContainer() {\n        // Se già wrappato, esci\n        if (this.container.parentElement.classList.contains('elementor-scroller-wrapper')) {\n            this.wrapper = this.container.parentElement;\n            return;\n        }\n        \n        // Crea wrapper\n        this.wrapper = document.createElement('div');\n        this.wrapper.className = 'elementor-scroller-wrapper';\n        this.wrapper.style.position = 'relative';\n        \n        // Inserisci wrapper\n        this.container.parentNode.insertBefore(this.wrapper, this.container);\n        this.wrapper.appendChild(this.container);\n    }\n    \n    // Setup pulsanti navigazione\n    setupNavButtons() {\n        // Crea pulsanti solo se non esistono\n        if (!this.wrapper.querySelector('.nav-button')) {\n            // Pulsante precedente\n            const prevButton = document.createElement('button');\n            prevButton.className = 'nav-button nav-prev';\n            prevButton.innerHTML = `\n                <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                    <path d=\"M15 18l-6-6 6-6\"/>\n                </svg>\n            `;\n            prevButton.setAttribute('aria-label', 'Scorri a sinistra');\n            prevButton.addEventListener('click', () => this.scrollPrev());\n            \n            // Pulsante successivo\n            const nextButton = document.createElement('button');\n            nextButton.className = 'nav-button nav-next';\n            nextButton.innerHTML = `\n                <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                    <path d=\"M9 18l6-6-6-6\"/>\n                </svg>\n            `;\n            nextButton.setAttribute('aria-label', 'Scorri a destra');\n            nextButton.addEventListener('click', () => this.scrollNext());\n            \n            // Aggiungi al wrapper\n            this.wrapper.appendChild(prevButton);\n            this.wrapper.appendChild(nextButton);\n            \n            // Store references\n            this.prevButton = prevButton;\n            this.nextButton = nextButton;\n        }\n    }\n    \n    // Setup tastiera migliorato\n    setupKeyboard() {\n        this.container.addEventListener('keydown', (e) => {\n            const scrollAmount = this.container.clientWidth * 0.8;\n            let handled = true;\n            \n            // Aggiungi classe per smooth scroll da tastiera\n            this.container.classList.add('keyboard-scrolling');\n            \n            switch(e.key) {\n                case 'ArrowLeft':\n                    this.smoothScroll(-scrollAmount);\n                    break;\n                case 'ArrowRight':\n                    this.smoothScroll(scrollAmount);\n                    break;\n                case 'Home':\n                    this.scrollToStart();\n                    break;\n                case 'End':\n                    this.scrollToEnd();\n                    break;\n                default:\n                    handled = false;\n            }\n            \n            if (handled) {\n                e.preventDefault();\n                // Rimuovi classe dopo animazione\n                setTimeout(() => {\n                    this.container.classList.remove('keyboard-scrolling');\n                }, 400);\n            } else {\n                this.container.classList.remove('keyboard-scrolling');\n            }\n        });\n    }\n    \n    // Setup mouse wheel - MIGLIORAMENTO CHIAVE\n    setupMouseWheel() {\n        let accumulatedDelta = 0;\n        let wheelTimeout;\n        \n        const wheelHandler = (e) => {\n            // Solo se container è in hover o focus\n            if (!this.container.matches(':hover, :focus-within')) return;\n            \n            e.preventDefault();\n            \n            // Accumula piccoli delta per scroll più fluido\n            accumulatedDelta += e.deltaY;\n            \n            clearTimeout(wheelTimeout);\n            wheelTimeout = setTimeout(() => {\n                if (Math.abs(accumulatedDelta) > 10) {\n                    // Normalizza e applica scroll\n                    const scrollAmount = Math.sign(accumulatedDelta) * Math.min(Math.abs(accumulatedDelta), 300);\n                    this.smoothScroll(scrollAmount);\n                }\n                accumulatedDelta = 0;\n            }, 50);\n        };\n        \n        // Aggiungi listener con passive false\n        this.container.addEventListener('wheel', wheelHandler, \n            this.supportsPassive ? { passive: false } : false\n        );\n    }\n    \n    // Setup touch con momentum migliorato\n    setupTouch() {\n        let startX = 0;\n        let scrollLeft = 0;\n        let isDragging = false;\n        let animationId = null;\n        let velocity = 0;\n        let lastX = 0;\n        let lastTime = 0;\n        \n        const startDragging = (pageX) => {\n            isDragging = true;\n            startX = pageX;\n            lastX = pageX;\n            scrollLeft = this.container.scrollLeft;\n            lastTime = Date.now();\n            velocity = 0;\n            \n            // Cancella animazioni\n            if (animationId) {\n                cancelAnimationFrame(animationId);\n            }\n            \n            // La classe 'active' è già nel CSS esistente per cursor grabbing\n            this.container.classList.add('active');\n        };\n        \n        const drag = (pageX) => {\n            if (!isDragging) return;\n            \n            const currentTime = Date.now();\n            const timeDelta = currentTime - lastTime;\n            const distance = pageX - lastX;\n            \n            // Calcola velocità\n            if (timeDelta > 0) {\n                velocity = distance / timeDelta * 16; // Normalizza a 60fps\n            }\n            \n            const walk = (pageX - startX) * 1.5;\n            this.container.scrollLeft = scrollLeft - walk;\n            \n            lastX = pageX;\n            lastTime = currentTime;\n        };\n        \n        const stopDragging = () => {\n            if (!isDragging) return;\n            \n            isDragging = false;\n            this.container.classList.remove('active');\n            \n            // Applica momentum se c'è velocità\n            if (Math.abs(velocity) > 2) {\n                const deceleration = 0.95;\n                \n                const animate = () => {\n                    if (Math.abs(velocity) > 0.5) {\n                        this.container.scrollLeft -= velocity;\n                        velocity *= deceleration;\n                        animationId = requestAnimationFrame(animate);\n                    } else {\n                        this.updateUI();\n                    }\n                };\n                \n                animate();\n            } else {\n                this.updateUI();\n            }\n        };\n        \n        // Mouse events\n        this.container.addEventListener('mousedown', (e) => {\n            startDragging(e.pageX);\n        });\n        \n        document.addEventListener('mousemove', (e) => {\n            drag(e.pageX);\n        });\n        \n        document.addEventListener('mouseup', stopDragging);\n        \n        // Touch events\n        this.container.addEventListener('touchstart', (e) => {\n            startDragging(e.touches[0].pageX);\n        }, this.supportsPassive ? { passive: true } : false);\n        \n        this.container.addEventListener('touchmove', (e) => {\n            drag(e.touches[0].pageX);\n        }, this.supportsPassive ? { passive: true } : false);\n        \n        this.container.addEventListener('touchend', stopDragging);\n        this.container.addEventListener('touchcancel', stopDragging);\n    }\n    \n    // Setup indicatore di scroll\n    setupScrollIndicator() {\n        // Crea progress bar solo se non nascosta da design\n        if (!this.wrapper.classList.contains('hide-progress')) {\n            const progressBar = document.createElement('div');\n            progressBar.className = 'scroll-progress';\n            progressBar.setAttribute('role', 'progressbar');\n            progressBar.setAttribute('aria-label', 'Progresso scroll');\n            progressBar.setAttribute('aria-valuemin', '0');\n            progressBar.setAttribute('aria-valuemax', '100');\n            \n            this.wrapper.appendChild(progressBar);\n            this.progressBar = progressBar;\n        }\n        \n        // Aggiorna su scroll\n        let ticking = false;\n        this.container.addEventListener('scroll', () => {\n            if (!ticking) {\n                requestAnimationFrame(() => {\n                    this.updateUI();\n                    ticking = false;\n                });\n                ticking = true;\n            }\n        }, this.supportsPassive ? { passive: true } : false);\n    }\n    \n    // Setup accessibilità\n    setupAccessibility() {\n        // ARIA labels\n        this.container.setAttribute('role', 'region');\n        this.container.setAttribute('aria-label', 'Contenuti scrollabili orizzontalmente');\n        \n        // Live region per annunci\n        const liveRegion = document.createElement('div');\n        liveRegion.className = 'sr-only';\n        liveRegion.setAttribute('role', 'status');\n        liveRegion.setAttribute('aria-live', 'polite');\n        liveRegion.setAttribute('aria-atomic', 'true');\n        liveRegion.style.cssText = `\n            position: absolute;\n            width: 1px;\n            height: 1px;\n            padding: 0;\n            margin: -1px;\n            overflow: hidden;\n            clip: rect(0,0,0,0);\n            white-space: nowrap;\n            border: 0;\n        `;\n        \n        this.wrapper.appendChild(liveRegion);\n        this.liveRegion = liveRegion;\n    }\n    \n    // Scroll fluido\n    smoothScroll(distance) {\n        if (this.supportsScrollBehavior) {\n            this.container.scrollBy({\n                left: distance,\n                behavior: 'smooth'\n            });\n        } else {\n            // Fallback animato\n            this.animateScroll(this.container.scrollLeft + distance);\n        }\n    }\n    \n    // Animazione scroll per fallback\n    animateScroll(target) {\n        const start = this.container.scrollLeft;\n        const distance = target - start;\n        const duration = 300;\n        let startTime = null;\n        \n        const animation = (currentTime) => {\n            if (!startTime) startTime = currentTime;\n            const elapsed = currentTime - startTime;\n            const progress = Math.min(elapsed / duration, 1);\n            \n            // Easing\n            const easeInOutQuad = progress < 0.5\n                ? 2 * progress * progress\n                : 1 - Math.pow(-2 * progress + 2, 2) / 2;\n            \n            this.container.scrollLeft = start + distance * easeInOutQuad;\n            \n            if (progress < 1) {\n                requestAnimationFrame(animation);\n            } else {\n                this.updateUI();\n            }\n        };\n        \n        requestAnimationFrame(animation);\n    }\n    \n    // Metodi di navigazione\n    scrollPrev() {\n        const scrollAmount = this.container.clientWidth * 0.8;\n        this.smoothScroll(-scrollAmount);\n        this.announce('Scorrimento a sinistra');\n    }\n    \n    scrollNext() {\n        const scrollAmount = this.container.clientWidth * 0.8;\n        this.smoothScroll(scrollAmount);\n        this.announce('Scorrimento a destra');\n    }\n    \n    scrollToStart() {\n        this.container.scrollTo({\n            left: 0,\n            behavior: this.supportsScrollBehavior ? 'smooth' : 'auto'\n        });\n        this.announce('Inizio dei contenuti');\n    }\n    \n    scrollToEnd() {\n        const maxScroll = this.container.scrollWidth - this.container.clientWidth;\n        this.container.scrollTo({\n            left: maxScroll,\n            behavior: this.supportsScrollBehavior ? 'smooth' : 'auto'\n        });\n        this.announce('Fine dei contenuti');\n    }\n    \n    // Aggiorna UI\n    updateUI() {\n        const scrollLeft = this.container.scrollLeft;\n        const maxScroll = this.container.scrollWidth - this.container.clientWidth;\n        \n        // Aggiorna pulsanti\n        if (this.prevButton && this.nextButton) {\n            this.prevButton.disabled = scrollLeft <= 0;\n            this.nextButton.disabled = scrollLeft >= maxScroll - 1;\n            \n            // Aggiorna ARIA\n            this.prevButton.setAttribute('aria-disabled', scrollLeft <= 0);\n            this.nextButton.setAttribute('aria-disabled', scrollLeft >= maxScroll - 1);\n        }\n        \n        // Aggiorna progress bar\n        if (this.progressBar && maxScroll > 0) {\n            const progress = (scrollLeft / maxScroll) * 100;\n            this.progressBar.style.width = `${progress}%`;\n            this.progressBar.setAttribute('aria-valuenow', Math.round(progress));\n        }\n    }\n    \n    // Annuncia a screen reader\n    announce(message) {\n        if (this.liveRegion) {\n            this.liveRegion.textContent = message;\n            // Reset dopo annuncio\n            setTimeout(() => {\n                this.liveRegion.textContent = '';\n            }, 1000);\n        }\n    }\n}\n\n// CSS da iniettare - Adattato per CSS Elementor esistente\nconst improvedStyles = `\n    <style id=\"improved-scroller-styles\">\n        /* Wrapper styles */\n        .elementor-scroller-wrapper {\n            position: relative;\n        }\n        \n        /* Nasconde scrollbar orizzontale su desktop mantenendo lo scroll */\n        .scrollable-container {\n            /* Firefox */\n            scrollbar-width: none;\n            \n            /* IE 10+ */\n            -ms-overflow-style: none;\n            \n            /* Aggiunge spazio per l'ultima card */\n            padding-right: 30px;\n            box-sizing: content-box;\n        }\n        \n        /* Compensa il padding per il primo elemento */\n        .scrollable-container > *:first-child {\n            margin-left: 20px;\n        }\n        \n        /* Fix per Elementor - previeni che tagli il contenuto */\n        .elementor-widget-container {\n            overflow: visible !important;\n        }\n        \n        /* Fix per container con gap CSS */\n        .scrollable-container[style*=\"gap\"] {\n            padding-right: 50px;\n        }\n        \n        /* Chrome, Safari, Opera, Edge */\n        .scrollable-container::-webkit-scrollbar {\n            width: 0 !important;\n            height: 0 !important;\n            display: none;\n        }\n        \n        .scrollable-container::-webkit-scrollbar-track {\n            background: transparent;\n        }\n        \n        .scrollable-container::-webkit-scrollbar-thumb {\n            background: transparent;\n            border: none;\n        }\n        \n        /* Supporto per browser più vecchi */\n        @supports not (scrollbar-width: none) {\n            .scrollable-container {\n                margin-bottom: -17px;\n                padding-bottom: 17px;\n            }\n        }\n        \n        /* Pulsanti navigazione */\n        .nav-button {\n            position: absolute;\n            top: 50%;\n            transform: translateY(-50%);\n            width: 48px;\n            height: 48px;\n            background: rgba(255, 255, 255, 0.95);\n            border: 1px solid #ddd;\n            border-radius: 50%;\n            cursor: pointer;\n            display: none;\n            align-items: center;\n            justify-content: center;\n            z-index: 10;\n            transition: all 0.3s ease;\n            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n            \n            /* Assicura che sia sopra il contenuto */\n            pointer-events: auto;\n        }\n        \n        .nav-button {\n            background: var(--e-global-color-primary);\n        }\n        \n        .nav-button svg {\n            width: 24px;\n            height: 24px;\n            color: #fff;\n        }\n        \n        .nav-button:hover:not(:disabled) {\n            background: var(--e-global-color-2de3d7d);\n            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n            transform: translateY(-50%) scale(1.1);\n        }\n        \n        .nav-button:active {\n            transform: translateY(-50%) scale(0.95);\n        }\n        \n        .nav-button:hover:not(:disabled) {\n            background: var(--e-global-color-2de3d7d);\n            border-color: var(--e-global-color-2de3d7d);\n        }\n        \n        .nav-button:active {\n            transform: translateY(-50%) scale(0.95);\n        }\n        \n        .nav-button:disabled {\n            opacity: 0.3;\n            cursor: not-allowed;\n        }\n        \n        .nav-button:disabled:hover {\n            transform: translateY(-50%);\n        }\n        \n        .nav-button:focus {\n            outline: 2px solid var(--e-global-color-primary, #0066cc);\n            outline-offset: 2px;\n        }\n        \n        .nav-prev {\n            left: 10px;\n        }\n        \n        .nav-next {\n            right: 10px;\n        }\n        \n        /* Mostra pulsanti su desktop */\n        @media (min-width: 1024px) {\n            .elementor-scroller-wrapper:hover .nav-button:not(:disabled) {\n                display: flex;\n            }\n            \n            .elementor-scroller-wrapper:focus-within .nav-button:not(:disabled) {\n                display: flex;\n            }\n        }\n        \n        /* Progress bar sottile */\n        .scroll-progress {\n            position: absolute;\n            bottom: 0;\n            left: 0;\n            height: 3px;\n            background: var(--e-global-color-primary, #0066cc);\n            transition: width 0.2s ease, opacity 0.3s ease;\n            pointer-events: none;\n            z-index: 5;\n            opacity: 0;\n            border-radius: 0 3px 3px 0;\n        }\n        \n        /* Mostra progress bar su hover/focus */\n        .elementor-scroller-wrapper:hover .scroll-progress,\n        .elementor-scroller-wrapper:focus-within .scroll-progress {\n            opacity: 0.7;\n        }\n        \n        /* Non sovrascriviamo cursor - già impostato nel CSS esistente */\n        \n        /* Focus migliore - solo se non già presente */\n        .scrollable-container:focus-visible {\n            outline: 2px solid var(--e-global-color-primary, #0066cc);\n            outline-offset: 2px;\n        }\n        \n        /* Supporta la classe keyboard-scrolling esistente */\n        .scrollable-container.keyboard-scrolling {\n            scroll-behavior: smooth !important;\n        }\n        \n        /* Screen reader only */\n        .sr-only {\n            position: absolute;\n            width: 1px;\n            height: 1px;\n            padding: 0;\n            margin: -1px;\n            overflow: hidden;\n            clip: rect(0,0,0,0);\n            white-space: nowrap;\n            border: 0;\n        }\n        \n        /* Indicatori di pagina opzionali */\n        .scroll-indicators {\n            display: flex;\n            justify-content: center;\n            gap: 8px;\n            margin-top: 16px;\n            padding: 8px;\n        }\n        \n        .scroll-indicator {\n            width: 8px;\n            height: 8px;\n            border-radius: 50%;\n            background: #ddd;\n            transition: all 0.3s ease;\n            cursor: pointer;\n            border: none;\n            padding: 0;\n        }\n        \n        .scroll-indicator:hover {\n            background: #999;\n            transform: scale(1.2);\n        }\n        \n        .scroll-indicator.active {\n            background: var(--e-global-color-primary, #333);\n            width: 24px;\n            border-radius: 4px;\n        }\n        \n        /* Supporto reduced motion */\n        @media (prefers-reduced-motion: reduce) {\n            * {\n                animation-duration: 0.01ms !important;\n                animation-iteration-count: 1 !important;\n                transition-duration: 0.01ms !important;\n            }\n            \n            .scrollable-container {\n                scroll-behavior: auto !important;\n            }\n            \n            .nav-button {\n                transition: none !important;\n            }\n            \n            .scroll-progress {\n                transition: none !important;\n            }\n        }\n        \n        /* Migliora contrasto per accessibilità */\n        @media (prefers-contrast: high) {\n            .nav-button {\n                background: #fff;\n                border: 2px solid #000;\n            }\n            \n            .nav-button:hover:not(:disabled) {\n                background: #000;\n                color: #fff;\n            }\n            \n            .nav-button:hover:not(:disabled) svg {\n                color: #fff;\n            }\n            \n            .scroll-progress {\n                background: #000;\n            }\n        }\n        \n        /* Dark mode support */\n        @media (prefers-color-scheme: dark) {\n            .nav-button {\n                background: var(--e-global-color-primary);\n                border-color: var(--e-global-color-primary);\n            }\n            \n            .nav-button svg {\n                color: #fff;\n            }\n            \n            .nav-button:hover:not(:disabled) {\n                background: var(--e-global-color-2de3d7d);\n                border-color: var(--e-global-color-2de3d7d);\n            }\n            \n            .scroll-indicator {\n                background: #555;\n            }\n            \n            .scroll-indicator:hover {\n                background: #777;\n            }\n            \n            .scroll-indicator.active {\n                background: #fff;\n            }\n        }\n    </style>\n`;\n\n// Inizializzazione\nfunction initImprovedScrollers() {\n    // Inietta stili se non presenti\n    if (!document.getElementById('improved-scroller-styles')) {\n        document.head.insertAdjacentHTML('beforeend', improvedStyles);\n    }\n    \n    // Trova tutti i container scrollabili\n    const containers = document.querySelectorAll('.scrollable-container');\n    \n    containers.forEach(container => {\n        // Skip se già inizializzato\n        if (container.hasAttribute('data-improved-scroller')) return;\n        \n        // Inizializza solo se c'è overflow orizzontale\n        if (container.scrollWidth > container.clientWidth) {\n            new ImprovedElementorScroller(container);\n            container.setAttribute('data-improved-scroller', 'true');\n        }\n    });\n}\n\n// Inizializza quando DOM è pronto\nif (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', initImprovedScrollers);\n} else {\n    initImprovedScrollers();\n}\n\n// Hook per Elementor\nif (typeof jQuery !== 'undefined') {\n    jQuery(window).on('elementor/frontend/init', function() {\n        if (window.elementorFrontend && window.elementorFrontend.hooks) {\n            elementorFrontend.hooks.addAction('frontend/element_ready/widget', function() {\n                setTimeout(initImprovedScrollers, 100);\n            });\n        }\n    });\n} else {\n    // Fallback observer per contenuti dinamici\n    const observer = new MutationObserver(() => {\n        initImprovedScrollers();\n    });\n    \n    observer.observe(document.body, {\n        childList: true,\n        subtree: true\n    });\n}\n\n// Re-inizializza su resize\nlet resizeTimeout;\nwindow.addEventListener('resize', () => {\n    clearTimeout(resizeTimeout);\n    resizeTimeout = setTimeout(initImprovedScrollers, 250);\n});\n\nconsole.log('Improved Elementor Scroller v2.0 loaded');","structuredPatch":[{"oldStart":398,"oldLines":21,"newStart":398,"newLines":33,"lines":["     // Aggiorna UI","     updateUI() {","         const scrollLeft = this.container.scrollLeft;","+        ","+        // Calcola il gap tra le card (se usi gap in CSS)","+        const computedStyle = window.getComputedStyle(this.container);","+        const gap = parseFloat(computedStyle.gap) || 0;","+        ","+        // Trova l'ultima card","+        const lastChild = this.container.lastElementChild;","+        const lastChildWidth = lastChild ? lastChild.offsetWidth : 0;","+        ","+        // Calcola il maxScroll considerando l'ultima card e il padding","         const maxScroll = this.container.scrollWidth - this.container.clientWidth;","+        const adjustedMaxScroll = Math.max(0, maxScroll - gap);","         ","-        // Aggiorna pulsanti","+        // Aggiorna pulsanti con tolleranza","         if (this.prevButton && this.nextButton) {","-            this.prevButton.disabled = scrollLeft <= 0;","-            this.nextButton.disabled = scrollLeft >= maxScroll - 1;","+            const tolerance = 5;","+            this.prevButton.disabled = scrollLeft <= tolerance;","+            this.nextButton.disabled = scrollLeft >= adjustedMaxScroll - tolerance;","             ","             // Aggiorna ARIA","-            this.prevButton.setAttribute('aria-disabled', scrollLeft <= 0);","-            this.nextButton.setAttribute('aria-disabled', scrollLeft >= maxScroll - 1);","+            this.prevButton.setAttribute('aria-disabled', scrollLeft <= tolerance);","+            this.nextButton.setAttribute('aria-disabled', scrollLeft >= adjustedMaxScroll - tolerance);","         }","         ","         // Aggiorna progress bar","-        if (this.progressBar && maxScroll > 0) {","-            const progress = (scrollLeft / maxScroll) * 100;","+        if (this.progressBar && adjustedMaxScroll > 0) {","+            const progress = Math.min(100, (scrollLeft / adjustedMaxScroll) * 100);","             this.progressBar.style.width = `${progress}%`;","             this.progressBar.setAttribute('aria-valuenow', Math.round(progress));","         }"]}],"userModified":false,"replaceAll":false}}
{"parentUuid":"2e9053a5-0bd0-4af6-a960-480ebcedd005","isSidechain":false,"userType":"external","cwd":"/Users/disconnesso/Sites/villastuart.it","sessionId":"6d59d7ee-cfab-4065-8105-2d5b96fcc40d","version":"1.0.61","gitBranch":"main","message":{"id":"msg_01BfdjyD66msudRfobfTn3Df","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01WPuPs6vr2xMkDrrcpbPhix","name":"TodoWrite","input":{"todos":[{"id":"1","content":"Add CSS padding solution for last card visibility","status":"completed","priority":"high"},{"id":"2","content":"Improve updateUI method with better maxScroll calculation","status":"completed","priority":"high"},{"id":"3","content":"Add methods to check element visibility and ensure last card is visible","status":"in_progress","priority":"high"},{"id":"4","content":"Enhance scrollNext method with card-based navigation","status":"pending","priority":"high"},{"id":"5","content":"Add scroll spacer solution as fallback","status":"pending","priority":"medium"}]}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":0,"cache_creation_input_tokens":10610,"cache_read_input_tokens":58251,"output_tokens":223,"service_tier":"standard"}},"requestId":"req_011CRau3vGJFQD9xvaR8LWrx","type":"assistant","uuid":"9e1403ee-18f3-4b14-941b-6c32f7ec2d08","timestamp":"2025-07-29T07:15:16.783Z"}
{"parentUuid":"9e1403ee-18f3-4b14-941b-6c32f7ec2d08","isSidechain":false,"userType":"external","cwd":"/Users/disconnesso/Sites/villastuart.it","sessionId":"6d59d7ee-cfab-4065-8105-2d5b96fcc40d","version":"1.0.61","gitBranch":"main","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01WPuPs6vr2xMkDrrcpbPhix","type":"tool_result","content":"Todos have been modified successfully. Ensure that you continue to use the todo list to track your progress. Please proceed with the current tasks if applicable"}]},"uuid":"07bcd493-7291-40f3-86e6-a72aa363b990","timestamp":"2025-07-29T07:15:16.833Z","toolUseResult":{"oldTodos":[{"content":"Add CSS padding solution for last card visibility","status":"completed","priority":"high","id":"1"},{"content":"Improve updateUI method with better maxScroll calculation","status":"in_progress","priority":"high","id":"2"},{"content":"Add methods to check element visibility and ensure last card is visible","status":"pending","priority":"high","id":"3"},{"content":"Enhance scrollNext method with card-based navigation","status":"pending","priority":"high","id":"4"},{"content":"Add scroll spacer solution as fallback","status":"pending","priority":"medium","id":"5"}],"newTodos":[{"content":"Add CSS padding solution for last card visibility","status":"completed","priority":"high","id":"1"},{"content":"Improve updateUI method with better maxScroll calculation","status":"completed","priority":"high","id":"2"},{"content":"Add methods to check element visibility and ensure last card is visible","status":"in_progress","priority":"high","id":"3"},{"content":"Enhance scrollNext method with card-based navigation","status":"pending","priority":"high","id":"4"},{"content":"Add scroll spacer solution as fallback","status":"pending","priority":"medium","id":"5"}]}}
{"parentUuid":"07bcd493-7291-40f3-86e6-a72aa363b990","isSidechain":false,"userType":"external","cwd":"/Users/disconnesso/Sites/villastuart.it","sessionId":"6d59d7ee-cfab-4065-8105-2d5b96fcc40d","version":"1.0.61","gitBranch":"main","message":{"id":"msg_01VapKQWREYCnV4jK6bomy36","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_015pA9Uwe6yW1CHdxfXCzq4G","name":"Edit","input":{"file_path":"/Users/disconnesso/Sites/villastuart.it/wp-content/themes/hello-villa-stuart/assets/js/improved-scroller.js","old_string":"    // Annuncia a screen reader\n    announce(message) {\n        if (this.liveRegion) {\n            this.liveRegion.textContent = message;\n            // Reset dopo annuncio\n            setTimeout(() => {\n                this.liveRegion.textContent = '';\n            }, 1000);\n        }\n    }","new_string":"    // Verifica se un elemento è completamente visibile\n    isElementFullyVisible(element) {\n        const containerRect = this.container.getBoundingClientRect();\n        const elementRect = element.getBoundingClientRect();\n        \n        return elementRect.left >= containerRect.left && \n               elementRect.right <= containerRect.right;\n    }\n    \n    // Assicura che l'ultima card sia visibile dopo lo scroll\n    ensureLastCardVisible() {\n        const lastCard = this.container.lastElementChild;\n        if (!lastCard) return;\n        \n        if (!this.isElementFullyVisible(lastCard)) {\n            const containerRect = this.container.getBoundingClientRect();\n            const lastCardRect = lastCard.getBoundingClientRect();\n            const scrollAdjustment = lastCardRect.right - containerRect.right + 20;\n            \n            if (scrollAdjustment > 0) {\n                this.container.scrollLeft += scrollAdjustment;\n            }\n        }\n    }\n\n    // Annuncia a screen reader\n    announce(message) {\n        if (this.liveRegion) {\n            this.liveRegion.textContent = message;\n            // Reset dopo annuncio\n            setTimeout(() => {\n                this.liveRegion.textContent = '';\n            }, 1000);\n        }\n    }"}}],"stop_reason":"tool_use","stop_sequence":null,"usage":{"input_tokens":0,"cache_creation_input_tokens":493,"cache_read_input_tokens":68861,"output_tokens":540,"service_tier":"standard"}},"requestId":"req_011CRau4XrC2U2UET6xBg4hh","type":"assistant","uuid":"8a7456ec-11dc-4147-b9a4-bee67de9bddd","timestamp":"2025-07-29T07:15:25.388Z"}
{"parentUuid":"8a7456ec-11dc-4147-b9a4-bee67de9bddd","isSidechain":false,"userType":"external","cwd":"/Users/disconnesso/Sites/villastuart.it","sessionId":"6d59d7ee-cfab-4065-8105-2d5b96fcc40d","version":"1.0.61","gitBranch":"main","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_015pA9Uwe6yW1CHdxfXCzq4G","type":"tool_result","content":"The file /Users/disconnesso/Sites/villastuart.it/wp-content/themes/hello-villa-stuart/assets/js/improved-scroller.js has been updated. Here's the result of running `cat -n` on a snippet of the edited file:\n     1→/**\n     2→ * Slider Orizzontale Migliorato per Elementor\n     3→ * Versione 2.0 - Ottimizzato per Desktop con Accessibilità\n     4→ */\n     5→\n     6→// Classe principale per gestire lo slider\n     7→class ImprovedElementorScroller {\n     8→    constructor(container) {\n     9→        this.container = container;\n    10→        this.wrapper = null;\n    11→        this.isScrolling = false;\n    12→        this.scrollTimeout = null;\n    13→        \n    14→        // Feature detection\n    15→        this.supportsPassive = this.checkPassiveSupport();\n    16→        this.supportsScrollBehavior = 'scrollBehavior' in document.documentElement.style;\n    17→        \n    18→        // Inizializza\n    19→        this.init();\n    20→    }\n    21→    \n    22→    // Check supporto passive listeners\n    23→    checkPassiveSupport() {\n    24→        let supportsPassive = false;\n    25→        try {\n    26→            const opts = Object.defineProperty({}, 'passive', {\n    27→                get: () => { supportsPassive = true; }\n    28→            });\n    29→            window.addEventListener('testPassive', null, opts);\n    30→            window.removeEventListener('testPassive', null, opts);\n    31→        } catch (e) {}\n    32→        return supportsPassive;\n    33→    }\n    34→    \n    35→    init() {\n    36→        // Crea wrapper per aggiungere controlli senza modificare HTML\n    37→        this.wrapContainer();\n    38→        \n    39→        // Setup features\n    40→        this.setupNavButtons();\n    41→        this.setupKeyboard();\n    42→        this.setupMouseWheel();\n    43→        this.setupTouch();\n    44→        this.setupScrollIndicator();\n    45→        this.setupAccessibility();\n    46→        \n    47→        // Aggiorna stato iniziale\n    48→        this.updateUI();\n    49→    }\n    50→    \n    51→    // Wrap container esistente per aggiungere controlli\n    52→    wrapContainer() {\n    53→        // Se già wrappato, esci\n    54→        if (this.container.parentElement.classList.contains('elementor-scroller-wrapper')) {\n    55→            this.wrapper = this.container.parentElement;\n    56→            return;\n    57→        }\n    58→        \n    59→        // Crea wrapper\n    60→        this.wrapper = document.createElement('div');\n    61→        this.wrapper.className = 'elementor-scroller-wrapper';\n    62→        this.wrapper.style.position = 'relative';\n    63→        \n    64→        // Inserisci wrapper\n    65→        this.container.parentNode.insertBefore(this.wrapper, this.container);\n    66→        this.wrapper.appendChild(this.container);\n    67→    }\n    68→    \n    69→    // Setup pulsanti navigazione\n    70→    setupNavButtons() {\n    71→        // Crea pulsanti solo se non esistono\n    72→        if (!this.wrapper.querySelector('.nav-button')) {\n    73→            // Pulsante precedente\n    74→            const prevButton = document.createElement('button');\n    75→            prevButton.className = 'nav-button nav-prev';\n    76→            prevButton.innerHTML = `\n    77→                <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n    78→                    <path d=\"M15 18l-6-6 6-6\"/>\n    79→                </svg>\n    80→            `;\n    81→            prevButton.setAttribute('aria-label', 'Scorri a sinistra');\n    82→            prevButton.addEventListener('click', () => this.scrollPrev());\n    83→            \n    84→            // Pulsante successivo\n    85→            const nextButton = document.createElement('button');\n    86→            nextButton.className = 'nav-button nav-next';\n    87→            nextButton.innerHTML = `\n    88→                <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n    89→                    <path d=\"M9 18l6-6-6-6\"/>\n    90→                </svg>\n    91→            `;\n    92→            nextButton.setAttribute('aria-label', 'Scorri a destra');\n    93→            nextButton.addEventListener('click', () => this.scrollNext());\n    94→            \n    95→            // Aggiungi al wrapper\n    96→            this.wrapper.appendChild(prevButton);\n    97→            this.wrapper.appendChild(nextButton);\n    98→            \n    99→            // Store references\n   100→            this.prevButton = prevButton;\n   101→            this.nextButton = nextButton;\n   102→        }\n   103→    }\n   104→    \n   105→    // Setup tastiera migliorato\n   106→    setupKeyboard() {\n   107→        this.container.addEventListener('keydown', (e) => {\n   108→            const scrollAmount = this.container.clientWidth * 0.8;\n   109→            let handled = true;\n   110→            \n   111→            // Aggiungi classe per smooth scroll da tastiera\n   112→            this.container.classList.add('keyboard-scrolling');\n   113→            \n   114→            switch(e.key) {\n   115→                case 'ArrowLeft':\n   116→                    this.smoothScroll(-scrollAmount);\n   117→                    break;\n   118→                case 'ArrowRight':\n   119→                    this.smoothScroll(scrollAmount);\n   120→                    break;\n   121→                case 'Home':\n   122→                    this.scrollToStart();\n   123→                    break;\n   124→                case 'End':\n   125→                    this.scrollToEnd();\n   126→                    break;\n   127→                default:\n   128→                    handled = false;\n   129→            }\n   130→            \n   131→            if (handled) {\n   132→                e.preventDefault();\n   133→                // Rimuovi classe dopo animazione\n   134→                setTimeout(() => {\n   135→                    this.container.classList.remove('keyboard-scrolling');\n   136→                }, 400);\n   137→            } else {\n   138→                this.container.classList.remove('keyboard-scrolling');\n   139→            }\n   140→        });\n   141→    }\n   142→    \n   143→    // Setup mouse wheel - MIGLIORAMENTO CHIAVE\n   144→    setupMouseWheel() {\n   145→        let accumulatedDelta = 0;\n   146→        let wheelTimeout;\n   147→        \n   148→        const wheelHandler = (e) => {\n   149→            // Solo se container è in hover o focus\n   150→            if (!this.container.matches(':hover, :focus-within')) return;\n   151→            \n   152→            e.preventDefault();\n   153→            \n   154→            // Accumula piccoli delta per scroll più fluido\n   155→            accumulatedDelta += e.deltaY;\n   156→            \n   157→            clearTimeout(wheelTimeout);\n   158→            wheelTimeout = setTimeout(() => {\n   159→                if (Math.abs(accumulatedDelta) > 10) {\n   160→                    // Normalizza e applica scroll\n   161→                    const scrollAmount = Math.sign(accumulatedDelta) * Math.min(Math.abs(accumulatedDelta), 300);\n   162→                    this.smoothScroll(scrollAmount);\n   163→                }\n   164→                accumulatedDelta = 0;\n   165→            }, 50);\n   166→        };\n   167→        \n   168→        // Aggiungi listener con passive false\n   169→        this.container.addEventListener('wheel', wheelHandler, \n   170→            this.supportsPassive ? { passive: false } : false\n   171→        );\n   172→    }\n   173→    \n   174→    // Setup touch con momentum migliorato\n   175→    setupTouch() {\n   176→        let startX = 0;\n   177→        let scrollLeft = 0;\n   178→        let isDragging = false;\n   179→        let animationId = null;\n   180→        let velocity = 0;\n   181→        let lastX = 0;\n   182→        let lastTime = 0;\n   183→        \n   184→        const startDragging = (pageX) => {\n   185→            isDragging = true;\n   186→            startX = pageX;\n   187→            lastX = pageX;\n   188→            scrollLeft = this.container.scrollLeft;\n   189→            lastTime = Date.now();\n   190→            velocity = 0;\n   191→            \n   192→            // Cancella animazioni\n   193→            if (animationId) {\n   194→                cancelAnimationFrame(animationId);\n   195→            }\n   196→            \n   197→            // La classe 'active' è già nel CSS esistente per cursor grabbing\n   198→            this.container.classList.add('active');\n   199→        };\n   200→        \n   201→        const drag = (pageX) => {\n   202→            if (!isDragging) return;\n   203→            \n   204→            const currentTime = Date.now();\n   205→            const timeDelta = currentTime - lastTime;\n   206→            const distance = pageX - lastX;\n   207→            \n   208→            // Calcola velocità\n   209→            if (timeDelta > 0) {\n   210→                velocity = distance / timeDelta * 16; // Normalizza a 60fps\n   211→            }\n   212→            \n   213→            const walk = (pageX - startX) * 1.5;\n   214→            this.container.scrollLeft = scrollLeft - walk;\n   215→            \n   216→            lastX = pageX;\n   217→            lastTime = currentTime;\n   218→        };\n   219→        \n   220→        const stopDragging = () => {\n   221→            if (!isDragging) return;\n   222→            \n   223→            isDragging = false;\n   224→            this.container.classList.remove('active');\n   225→            \n   226→            // Applica momentum se c'è velocità\n   227→            if (Math.abs(velocity) > 2) {\n   228→                const deceleration = 0.95;\n   229→                \n   230→                const animate = () => {\n   231→                    if (Math.abs(velocity) > 0.5) {\n   232→                        this.container.scrollLeft -= velocity;\n   233→                        velocity *= deceleration;\n   234→                        animationId = requestAnimationFrame(animate);\n   235→                    } else {\n   236→                        this.updateUI();\n   237→                    }\n   238→                };\n   239→                \n   240→                animate();\n   241→            } else {\n   242→                this.updateUI();\n   243→            }\n   244→        };\n   245→        \n   246→        // Mouse events\n   247→        this.container.addEventListener('mousedown', (e) => {\n   248→            startDragging(e.pageX);\n   249→        });\n   250→        \n   251→        document.addEventListener('mousemove', (e) => {\n   252→            drag(e.pageX);\n   253→        });\n   254→        \n   255→        document.addEventListener('mouseup', stopDragging);\n   256→        \n   257→        // Touch events\n   258→        this.container.addEventListener('touchstart', (e) => {\n   259→            startDragging(e.touches[0].pageX);\n   260→        }, this.supportsPassive ? { passive: true } : false);\n   261→        \n   262→        this.container.addEventListener('touchmove', (e) => {\n   263→            drag(e.touches[0].pageX);\n   264→        }, this.supportsPassive ? { passive: true } : false);\n   265→        \n   266→        this.container.addEventListener('touchend', stopDragging);\n   267→        this.container.addEventListener('touchcancel', stopDragging);\n   268→    }\n   269→    \n   270→    // Setup indicatore di scroll\n   271→    setupScrollIndicator() {\n   272→        // Crea progress bar solo se non nascosta da design\n   273→        if (!this.wrapper.classList.contains('hide-progress')) {\n   274→            const progressBar = document.createElement('div');\n   275→            progressBar.className = 'scroll-progress';\n   276→            progressBar.setAttribute('role', 'progressbar');\n   277→            progressBar.setAttribute('aria-label', 'Progresso scroll');\n   278→            progressBar.setAttribute('aria-valuemin', '0');\n   279→            progressBar.setAttribute('aria-valuemax', '100');\n   280→            \n   281→            this.wrapper.appendChild(progressBar);\n   282→            this.progressBar = progressBar;\n   283→        }\n   284→        \n   285→        // Aggiorna su scroll\n   286→        let ticking = false;\n   287→        this.container.addEventListener('scroll', () => {\n   288→            if (!ticking) {\n   289→                requestAnimationFrame(() => {\n   290→                    this.updateUI();\n   291→                    ticking = false;\n   292→                });\n   293→                ticking = true;\n   294→            }\n   295→        }, this.supportsPassive ? { passive: true } : false);\n   296→    }\n   297→    \n   298→    // Setup accessibilità\n   299→    setupAccessibility() {\n   300→        // ARIA labels\n   301→        this.container.setAttribute('role', 'region');\n   302→        this.container.setAttribute('aria-label', 'Contenuti scrollabili orizzontalmente');\n   303→        \n   304→        // Live region per annunci\n   305→        const liveRegion = document.createElement('div');\n   306→        liveRegion.className = 'sr-only';\n   307→        liveRegion.setAttribute('role', 'status');\n   308→        liveRegion.setAttribute('aria-live', 'polite');\n   309→        liveRegion.setAttribute('aria-atomic', 'true');\n   310→        liveRegion.style.cssText = `\n   311→            position: absolute;\n   312→            width: 1px;\n   313→            height: 1px;\n   314→            padding: 0;\n   315→            margin: -1px;\n   316→            overflow: hidden;\n   317→            clip: rect(0,0,0,0);\n   318→            white-space: nowrap;\n   319→            border: 0;\n   320→        `;\n   321→        \n   322→        this.wrapper.appendChild(liveRegion);\n   323→        this.liveRegion = liveRegion;\n   324→    }\n   325→    \n   326→    // Scroll fluido\n   327→    smoothScroll(distance) {\n   328→        if (this.supportsScrollBehavior) {\n   329→            this.container.scrollBy({\n   330→                left: distance,\n   331→                behavior: 'smooth'\n   332→            });\n   333→        } else {\n   334→            // Fallback animato\n   335→            this.animateScroll(this.container.scrollLeft + distance);\n   336→        }\n   337→    }\n   338→    \n   339→    // Animazione scroll per fallback\n   340→    animateScroll(target) {\n   341→        const start = this.container.scrollLeft;\n   342→        const distance = target - start;\n   343→        const duration = 300;\n   344→        let startTime = null;\n   345→        \n   346→        const animation = (currentTime) => {\n   347→            if (!startTime) startTime = currentTime;\n   348→            const elapsed = currentTime - startTime;\n   349→            const progress = Math.min(elapsed / duration, 1);\n   350→            \n   351→            // Easing\n   352→            const easeInOutQuad = progress < 0.5\n   353→                ? 2 * progress * progress\n   354→                : 1 - Math.pow(-2 * progress + 2, 2) / 2;\n   355→            \n   356→            this.container.scrollLeft = start + distance * easeInOutQuad;\n   357→            \n   358→            if (progress < 1) {\n   359→                requestAnimationFrame(animation);\n   360→            } else {\n   361→                this.updateUI();\n   362→            }\n   363→        };\n   364→        \n   365→        requestAnimationFrame(animation);\n   366→    }\n   367→    \n   368→    // Metodi di navigazione\n   369→    scrollPrev() {\n   370→        const scrollAmount = this.container.clientWidth * 0.8;\n   371→        this.smoothScroll(-scrollAmount);\n   372→        this.announce('Scorrimento a sinistra');\n   373→    }\n   374→    \n   375→    scrollNext() {\n   376→        const scrollAmount = this.container.clientWidth * 0.8;\n   377→        this.smoothScroll(scrollAmount);\n   378→        this.announce('Scorrimento a destra');\n   379→    }\n   380→    \n   381→    scrollToStart() {\n   382→        this.container.scrollTo({\n   383→            left: 0,\n   384→            behavior: this.supportsScrollBehavior ? 'smooth' : 'auto'\n   385→        });\n   386→        this.announce('Inizio dei contenuti');\n   387→    }\n   388→    \n   389→    scrollToEnd() {\n   390→        const maxScroll = this.container.scrollWidth - this.container.clientWidth;\n   391→        this.container.scrollTo({\n   392→            left: maxScroll,\n   393→            behavior: this.supportsScrollBehavior ? 'smooth' : 'auto'\n   394→        });\n   395→        this.announce('Fine dei contenuti');\n   396→    }\n   397→    \n   398→    // Aggiorna UI\n   399→    updateUI() {\n   400→        const scrollLeft = this.container.scrollLeft;\n   401→        \n   402→        // Calcola il gap tra le card (se usi gap in CSS)\n   403→        const computedStyle = window.getComputedStyle(this.container);\n   404→        const gap = parseFloat(computedStyle.gap) || 0;\n   405→        \n   406→        // Trova l'ultima card\n   407→        const lastChild = this.container.lastElementChild;\n   408→        const lastChildWidth = lastChild ? lastChild.offsetWidth : 0;\n   409→        \n   410→        // Calcola il maxScroll considerando l'ultima card e il padding\n   411→        const maxScroll = this.container.scrollWidth - this.container.clientWidth;\n   412→        const adjustedMaxScroll = Math.max(0, maxScroll - gap);\n   413→        \n   414→        // Aggiorna pulsanti con tolleranza\n   415→        if (this.prevButton && this.nextButton) {\n   416→            const tolerance = 5;\n   417→            this.prevButton.disabled = scrollLeft <= tolerance;\n   418→            this.nextButton.disabled = scrollLeft >= adjustedMaxScroll - tolerance;\n   419→            \n   420→            // Aggiorna ARIA\n   421→            this.prevButton.setAttribute('aria-disabled', scrollLeft <= tolerance);\n   422→            this.nextButton.setAttribute('aria-disabled', scrollLeft >= adjustedMaxScroll - tolerance);\n   423→        }\n   424→        \n   425→        // Aggiorna progress bar\n   426→        if (this.progressBar && adjustedMaxScroll > 0) {\n   427→            const progress = Math.min(100, (scrollLeft / adjustedMaxScroll) * 100);\n   428→            this.progressBar.style.width = `${progress}%`;\n   429→            this.progressBar.setAttribute('aria-valuenow', Math.round(progress));\n   430→        }\n   431→    }\n   432→    \n   433→    // Verifica se un elemento è completamente visibile\n   434→    isElementFullyVisible(element) {\n   435→        const containerRect = this.container.getBoundingClientRect();\n   436→        const elementRect = element.getBoundingClientRect();\n   437→        \n   438→        return elementRect.left >= containerRect.left && \n   439→               elementRect.right <= containerRect.right;\n   440→    }\n   441→    \n   442→    // Assicura che l'ultima card sia visibile dopo lo scroll\n   443→    ensureLastCardVisible() {\n   444→        const lastCard = this.container.lastElementChild;\n   445→        if (!lastCard) return;\n   446→        \n   447→        if (!this.isElementFullyVisible(lastCard)) {\n   448→            const containerRect = this.container.getBoundingClientRect();\n   449→            const lastCardRect = lastCard.getBoundingClientRect();\n   450→            const scrollAdjustment = lastCardRect.right - containerRect.right + 20;\n   451→            \n   452→            if (scrollAdjustment > 0) {\n   453→                this.container.scrollLeft += scrollAdjustment;\n   454→            }\n   455→        }\n   456→    }\n   457→\n   458→    // Annuncia a screen reader\n   459→    announce(message) {\n   460→        if (this.liveRegion) {\n   461→            this.liveRegion.textContent = message;\n   462→            // Reset dopo annuncio\n   463→            setTimeout(() => {\n   464→                this.liveRegion.textContent = '';\n   465→            }, 1000);\n   466→        }\n   467→    }\n   468→}\n   469→\n   470→// CSS da iniettare - Adattato per CSS Elementor esistente\n   471→const improvedStyles = `\n   472→    <style id=\"improved-scroller-styles\">\n   473→        /* Wrapper styles */\n   474→        .elementor-scroller-wrapper {\n   475→            position: relative;\n   476→        }\n   477→        \n   478→        /* Nasconde scrollbar orizzontale su desktop mantenendo lo scroll */\n   479→        .scrollable-container {\n   480→            /* Firefox */\n   481→            scrollbar-width: none;\n   482→            \n   483→            /* IE 10+ */\n   484→            -ms-overflow-style: none;\n   485→            \n   486→            /* Aggiunge spazio per l'ultima card */\n   487→            padding-right: 30px;\n   488→            box-sizing: content-box;\n   489→        }\n   490→        \n   491→        /* Compensa il padding per il primo elemento */\n   492→        .scrollable-container > *:first-child {\n   493→            margin-left: 20px;\n   494→        }\n   495→        \n   496→        /* Fix per Elementor - previeni che tagli il contenuto */\n   497→        .elementor-widget-container {\n   498→            overflow: visible !important;\n   499→        }\n   500→        \n   501→        /* Fix per container con gap CSS */\n   502→        .scrollable-container[style*=\"gap\"] {\n   503→            padding-right: 50px;\n   504→        }\n   505→        \n   506→        /* Chrome, Safari, Opera, Edge */\n   507→        .scrollable-container::-webkit-scrollbar {\n   508→            width: 0 !important;\n   509→            height: 0 !important;\n   510→            display: none;\n   511→        }\n   512→        \n   513→        .scrollable-container::-webkit-scrollbar-track {\n   514→            background: transparent;\n   515→        }\n   516→        \n   517→        .scrollable-container::-webkit-scrollbar-thumb {\n   518→            background: transparent;\n   519→            border: none;\n   520→        }\n   521→        \n   522→        /* Supporto per browser più vecchi */\n   523→        @supports not (scrollbar-width: none) {\n   524→            .scrollable-container {\n   525→                margin-bottom: -17px;\n   526→                padding-bottom: 17px;\n   527→            }\n   528→        }\n   529→        \n   530→        /* Pulsanti navigazione */\n   531→        .nav-button {\n   532→            position: absolute;\n   533→            top: 50%;\n   534→            transform: translateY(-50%);\n   535→            width: 48px;\n   536→            height: 48px;\n   537→            background: rgba(255, 255, 255, 0.95);\n   538→            border: 1px solid #ddd;\n   539→            border-radius: 50%;\n   540→            cursor: pointer;\n   541→            display: none;\n   542→            align-items: center;\n   543→            justify-content: center;\n   544→            z-index: 10;\n   545→            transition: all 0.3s ease;\n   546→            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n   547→            \n   548→            /* Assicura che sia sopra il contenuto */\n   549→            pointer-events: auto;\n   550→        }\n   551→        \n   552→        .nav-button {\n   553→            background: var(--e-global-color-primary);\n   554→        }\n   555→        \n   556→        .nav-button svg {\n   557→            width: 24px;\n   558→            height: 24px;\n   559→            color: #fff;\n   560→        }\n   561→        \n   562→        .nav-button:hover:not(:disabled) {\n   563→            background: var(--e-global-color-2de3d7d);\n   564→            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n   565→            transform: translateY(-50%) scale(1.1);\n   566→        }\n   567→        \n   568→        .nav-button:active {\n   569→            transform: translateY(-50%) scale(0.95);\n   570→        }\n   571→        \n   572→        .nav-button:hover:not(:disabled) {\n   573→            background: var(--e-global-color-2de3d7d);\n   574→            border-color: var(--e-global-color-2de3d7d);\n   575→        }\n   576→        \n   577→        .nav-button:active {\n   578→            transform: translateY(-50%) scale(0.95);\n   579→        }\n   580→        \n   581→        .nav-button:disabled {\n   582→            opacity: 0.3;\n   583→            cursor: not-allowed;\n   584→        }\n   585→        \n   586→        .nav-button:disabled:hover {\n   587→            transform: translateY(-50%);\n   588→        }\n   589→        \n   590→        .nav-button:focus {\n   591→            outline: 2px solid var(--e-global-color-primary, #0066cc);\n   592→            outline-offset: 2px;\n   593→        }\n   594→        \n   595→        .nav-prev {\n   596→            left: 10px;\n   597→        }\n   598→        \n   599→        .nav-next {\n   600→            right: 10px;\n   601→        }\n   602→        \n   603→        /* Mostra pulsanti su desktop */\n   604→        @media (min-width: 1024px) {\n   605→            .elementor-scroller-wrapper:hover .nav-button:not(:disabled) {\n   606→                display: flex;\n   607→            }\n   608→            \n   609→            .elementor-scroller-wrapper:focus-within .nav-button:not(:disabled) {\n   610→                display: flex;\n   611→            }\n   612→        }\n   613→        \n   614→        /* Progress bar sottile */\n   615→        .scroll-progress {\n   616→            position: absolute;\n   617→            bottom: 0;\n   618→            left: 0;\n   619→            height: 3px;\n   620→            background: var(--e-global-color-primary, #0066cc);\n   621→            transition: width 0.2s ease, opacity 0.3s ease;\n   622→            pointer-events: none;\n   623→            z-index: 5;\n   624→            opacity: 0;\n   625→            border-radius: 0 3px 3px 0;\n   626→        }\n   627→        \n   628→        /* Mostra progress bar su hover/focus */\n   629→        .elementor-scroller-wrapper:hover .scroll-progress,\n   630→        .elementor-scroller-wrapper:focus-within .scroll-progress {\n   631→            opacity: 0.7;\n   632→        }\n   633→        \n   634→        /* Non sovrascriviamo cursor - già impostato nel CSS esistente */\n   635→        \n   636→        /* Focus migliore - solo se non già presente */\n   637→        .scrollable-container:focus-visible {\n   638→            outline: 2px solid var(--e-global-color-primary, #0066cc);\n   639→            outline-offset: 2px;\n   640→        }\n   641→        \n   642→        /* Supporta la classe keyboard-scrolling esistente */\n   643→        .scrollable-container.keyboard-scrolling {\n   644→            scroll-behavior: smooth !important;\n   645→        }\n   646→        \n   647→        /* Screen reader only */\n   648→        .sr-only {\n   649→            position: absolute;\n   650→            width: 1px;\n   651→            height: 1px;\n   652→            padding: 0;\n   653→            margin: -1px;\n   654→            overflow: hidden;\n   655→            clip: rect(0,0,0,0);\n   656→            white-space: nowrap;\n   657→            border: 0;\n   658→        }\n   659→        \n   660→        /* Indicatori di pagina opzionali */\n   661→        .scroll-indicators {\n   662→            display: flex;\n   663→            justify-content: center;\n   664→            gap: 8px;\n   665→            margin-top: 16px;\n   666→            padding: 8px;\n   667→        }\n   668→        \n   669→        .scroll-indicator {\n   670→            width: 8px;\n   671→            height: 8px;\n   672→            border-radius: 50%;\n   673→            background: #ddd;\n   674→            transition: all 0.3s ease;\n   675→            cursor: pointer;\n   676→            border: none;\n   677→            padding: 0;\n   678→        }\n   679→        \n   680→        .scroll-indicator:hover {\n   681→            background: #999;\n   682→            transform: scale(1.2);\n   683→        }\n   684→        \n   685→        .scroll-indicator.active {\n   686→            background: var(--e-global-color-primary, #333);\n   687→            width: 24px;\n   688→            border-radius: 4px;\n   689→        }\n   690→        \n   691→        /* Supporto reduced motion */\n   692→        @media (prefers-reduced-motion: reduce) {\n   693→            * {\n   694→                animation-duration: 0.01ms !important;\n   695→                animation-iteration-count: 1 !important;\n   696→                transition-duration: 0.01ms !important;\n   697→            }\n   698→            \n   699→            .scrollable-container {\n   700→                scroll-behavior: auto !important;\n   701→            }\n   702→            \n   703→            .nav-button {\n   704→                transition: none !important;\n   705→            }\n   706→            \n   707→            .scroll-progress {\n   708→                transition: none !important;\n   709→            }\n   710→        }\n   711→        \n   712→        /* Migliora contrasto per accessibilità */\n   713→        @media (prefers-contrast: high) {\n   714→            .nav-button {\n   715→                background: #fff;\n   716→                border: 2px solid #000;\n   717→            }\n   718→            \n   719→            .nav-button:hover:not(:disabled) {\n   720→                background: #000;\n   721→                color: #fff;\n   722→            }\n   723→            \n   724→            .nav-button:hover:not(:disabled) svg {\n   725→                color: #fff;\n   726→            }\n   727→            \n   728→            .scroll-progress {\n   729→                background: #000;\n   730→            }\n   731→        }\n   732→        \n   733→        /* Dark mode support */\n   734→        @media (prefers-color-scheme: dark) {\n   735→            .nav-button {\n   736→                background: var(--e-global-color-primary);\n   737→                border-color: var(--e-global-color-primary);\n   738→            }\n   739→            \n   740→            .nav-button svg {\n   741→                color: #fff;\n   742→            }\n   743→            \n   744→            .nav-button:hover:not(:disabled) {\n   745→                background: var(--e-global-color-2de3d7d);\n   746→                border-color: var(--e-global-color-2de3d7d);\n   747→            }\n   748→            \n   749→            .scroll-indicator {\n   750→                background: #555;\n   751→            }\n   752→            \n   753→            .scroll-indicator:hover {\n   754→                background: #777;\n   755→            }\n   756→            \n   757→            .scroll-indicator.active {\n   758→                background: #fff;\n   759→            }\n   760→        }\n   761→    </style>\n   762→`;\n   763→\n   764→// Inizializzazione\n   765→function initImprovedScrollers() {\n   766→    // Inietta stili se non presenti\n   767→    if (!document.getElementById('improved-scroller-styles')) {\n   768→        document.head.insertAdjacentHTML('beforeend', improvedStyles);\n   769→    }\n   770→    \n   771→    // Trova tutti i container scrollabili\n   772→    const containers = document.querySelectorAll('.scrollable-container');\n   773→    \n   774→    containers.forEach(container => {\n   775→        // Skip se già inizializzato\n   776→        if (container.hasAttribute('data-improved-scroller')) return;\n   777→        \n   778→        // Inizializza solo se c'è overflow orizzontale\n   779→        if (container.scrollWidth > container.clientWidth) {\n   780→            new ImprovedElementorScroller(container);\n   781→            container.setAttribute('data-improved-scroller', 'true');\n   782→        }\n   783→    });\n   784→}\n   785→\n   786→// Inizializza quando DOM è pronto\n   787→if (document.readyState === 'loading') {\n   788→    document.addEventListener('DOMContentLoaded', initImprovedScrollers);\n   789→} else {\n   790→    initImprovedScrollers();\n   791→}\n   792→\n   793→// Hook per Elementor\n   794→if (typeof jQuery !== 'undefined') {\n   795→    jQuery(window).on('elementor/frontend/init', function() {\n   796→        if (window.elementorFrontend && window.elementorFrontend.hooks) {\n   797→            elementorFrontend.hooks.addAction('frontend/element_ready/widget', function() {\n   798→                setTimeout(initImprovedScrollers, 100);\n   799→            });\n   800→        }\n   801→    });\n   802→} else {\n   803→    // Fallback observer per contenuti dinamici\n   804→    const observer = new MutationObserver(() => {\n   805→        initImprovedScrollers();\n   806→    });\n   807→    \n   808→    observer.observe(document.body, {\n   809→        childList: true,\n   810→        subtree: true\n   811→    });\n   812→}\n   813→\n   814→// Re-inizializza su resize\n   815→let resizeTimeout;\n   816→window.addEventListener('resize', () => {\n   817→    clearTimeout(resizeTimeout);\n   818→    resizeTimeout = setTimeout(initImprovedScrollers, 250);\n   819→});\n   820→\n   821→console.log('Improved Elementor Scroller v2.0 loaded');"}]},"uuid":"70d95b34-8cca-4d74-91f1-ec7aea00b338","timestamp":"2025-07-29T07:15:28.568Z","toolUseResult":{"filePath":"/Users/disconnesso/Sites/villastuart.it/wp-content/themes/hello-villa-stuart/assets/js/improved-scroller.js","oldString":"/**\n * Slider Orizzontale Migliorato per Elementor\n * Versione 2.0 - Ottimizzato per Desktop con Accessibilità\n */\n\n// Classe principale per gestire lo slider\nclass ImprovedElementorScroller {\n    constructor(container) {\n        this.container = container;\n        this.wrapper = null;\n        this.isScrolling = false;\n        this.scrollTimeout = null;\n        \n        // Feature detection\n        this.supportsPassive = this.checkPassiveSupport();\n        this.supportsScrollBehavior = 'scrollBehavior' in document.documentElement.style;\n        \n        // Inizializza\n        this.init();\n    }\n    \n    // Check supporto passive listeners\n    checkPassiveSupport() {\n        let supportsPassive = false;\n        try {\n            const opts = Object.defineProperty({}, 'passive', {\n                get: () => { supportsPassive = true; }\n            });\n            window.addEventListener('testPassive', null, opts);\n            window.removeEventListener('testPassive', null, opts);\n        } catch (e) {}\n        return supportsPassive;\n    }\n    \n    init() {\n        // Crea wrapper per aggiungere controlli senza modificare HTML\n        this.wrapContainer();\n        \n        // Setup features\n        this.setupNavButtons();\n        this.setupKeyboard();\n        this.setupMouseWheel();\n        this.setupTouch();\n        this.setupScrollIndicator();\n        this.setupAccessibility();\n        \n        // Aggiorna stato iniziale\n        this.updateUI();\n    }\n    \n    // Wrap container esistente per aggiungere controlli\n    wrapContainer() {\n        // Se già wrappato, esci\n        if (this.container.parentElement.classList.contains('elementor-scroller-wrapper')) {\n            this.wrapper = this.container.parentElement;\n            return;\n        }\n        \n        // Crea wrapper\n        this.wrapper = document.createElement('div');\n        this.wrapper.className = 'elementor-scroller-wrapper';\n        this.wrapper.style.position = 'relative';\n        \n        // Inserisci wrapper\n        this.container.parentNode.insertBefore(this.wrapper, this.container);\n        this.wrapper.appendChild(this.container);\n    }\n    \n    // Setup pulsanti navigazione\n    setupNavButtons() {\n        // Crea pulsanti solo se non esistono\n        if (!this.wrapper.querySelector('.nav-button')) {\n            // Pulsante precedente\n            const prevButton = document.createElement('button');\n            prevButton.className = 'nav-button nav-prev';\n            prevButton.innerHTML = `\n                <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                    <path d=\"M15 18l-6-6 6-6\"/>\n                </svg>\n            `;\n            prevButton.setAttribute('aria-label', 'Scorri a sinistra');\n            prevButton.addEventListener('click', () => this.scrollPrev());\n            \n            // Pulsante successivo\n            const nextButton = document.createElement('button');\n            nextButton.className = 'nav-button nav-next';\n            nextButton.innerHTML = `\n                <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                    <path d=\"M9 18l6-6-6-6\"/>\n                </svg>\n            `;\n            nextButton.setAttribute('aria-label', 'Scorri a destra');\n            nextButton.addEventListener('click', () => this.scrollNext());\n            \n            // Aggiungi al wrapper\n            this.wrapper.appendChild(prevButton);\n            this.wrapper.appendChild(nextButton);\n            \n            // Store references\n            this.prevButton = prevButton;\n            this.nextButton = nextButton;\n        }\n    }\n    \n    // Setup tastiera migliorato\n    setupKeyboard() {\n        this.container.addEventListener('keydown', (e) => {\n            const scrollAmount = this.container.clientWidth * 0.8;\n            let handled = true;\n            \n            // Aggiungi classe per smooth scroll da tastiera\n            this.container.classList.add('keyboard-scrolling');\n            \n            switch(e.key) {\n                case 'ArrowLeft':\n                    this.smoothScroll(-scrollAmount);\n                    break;\n                case 'ArrowRight':\n                    this.smoothScroll(scrollAmount);\n                    break;\n                case 'Home':\n                    this.scrollToStart();\n                    break;\n                case 'End':\n                    this.scrollToEnd();\n                    break;\n                default:\n                    handled = false;\n            }\n            \n            if (handled) {\n                e.preventDefault();\n                // Rimuovi classe dopo animazione\n                setTimeout(() => {\n                    this.container.classList.remove('keyboard-scrolling');\n                }, 400);\n            } else {\n                this.container.classList.remove('keyboard-scrolling');\n            }\n        });\n    }\n    \n    // Setup mouse wheel - MIGLIORAMENTO CHIAVE\n    setupMouseWheel() {\n        let accumulatedDelta = 0;\n        let wheelTimeout;\n        \n        const wheelHandler = (e) => {\n            // Solo se container è in hover o focus\n            if (!this.container.matches(':hover, :focus-within')) return;\n            \n            e.preventDefault();\n            \n            // Accumula piccoli delta per scroll più fluido\n            accumulatedDelta += e.deltaY;\n            \n            clearTimeout(wheelTimeout);\n            wheelTimeout = setTimeout(() => {\n                if (Math.abs(accumulatedDelta) > 10) {\n                    // Normalizza e applica scroll\n                    const scrollAmount = Math.sign(accumulatedDelta) * Math.min(Math.abs(accumulatedDelta), 300);\n                    this.smoothScroll(scrollAmount);\n                }\n                accumulatedDelta = 0;\n            }, 50);\n        };\n        \n        // Aggiungi listener con passive false\n        this.container.addEventListener('wheel', wheelHandler, \n            this.supportsPassive ? { passive: false } : false\n        );\n    }\n    \n    // Setup touch con momentum migliorato\n    setupTouch() {\n        let startX = 0;\n        let scrollLeft = 0;\n        let isDragging = false;\n        let animationId = null;\n        let velocity = 0;\n        let lastX = 0;\n        let lastTime = 0;\n        \n        const startDragging = (pageX) => {\n            isDragging = true;\n            startX = pageX;\n            lastX = pageX;\n            scrollLeft = this.container.scrollLeft;\n            lastTime = Date.now();\n            velocity = 0;\n            \n            // Cancella animazioni\n            if (animationId) {\n                cancelAnimationFrame(animationId);\n            }\n            \n            // La classe 'active' è già nel CSS esistente per cursor grabbing\n            this.container.classList.add('active');\n        };\n        \n        const drag = (pageX) => {\n            if (!isDragging) return;\n            \n            const currentTime = Date.now();\n            const timeDelta = currentTime - lastTime;\n            const distance = pageX - lastX;\n            \n            // Calcola velocità\n            if (timeDelta > 0) {\n                velocity = distance / timeDelta * 16; // Normalizza a 60fps\n            }\n            \n            const walk = (pageX - startX) * 1.5;\n            this.container.scrollLeft = scrollLeft - walk;\n            \n            lastX = pageX;\n            lastTime = currentTime;\n        };\n        \n        const stopDragging = () => {\n            if (!isDragging) return;\n            \n            isDragging = false;\n            this.container.classList.remove('active');\n            \n            // Applica momentum se c'è velocità\n            if (Math.abs(velocity) > 2) {\n                const deceleration = 0.95;\n                \n                const animate = () => {\n                    if (Math.abs(velocity) > 0.5) {\n                        this.container.scrollLeft -= velocity;\n                        velocity *= deceleration;\n                        animationId = requestAnimationFrame(animate);\n                    } else {\n                        this.updateUI();\n                    }\n                };\n                \n                animate();\n            } else {\n                this.updateUI();\n            }\n        };\n        \n        // Mouse events\n        this.container.addEventListener('mousedown', (e) => {\n            startDragging(e.pageX);\n        });\n        \n        document.addEventListener('mousemove', (e) => {\n            drag(e.pageX);\n        });\n        \n        document.addEventListener('mouseup', stopDragging);\n        \n        // Touch events\n        this.container.addEventListener('touchstart', (e) => {\n            startDragging(e.touches[0].pageX);\n        }, this.supportsPassive ? { passive: true } : false);\n        \n        this.container.addEventListener('touchmove', (e) => {\n            drag(e.touches[0].pageX);\n        }, this.supportsPassive ? { passive: true } : false);\n        \n        this.container.addEventListener('touchend', stopDragging);\n        this.container.addEventListener('touchcancel', stopDragging);\n    }\n    \n    // Setup indicatore di scroll\n    setupScrollIndicator() {\n        // Crea progress bar solo se non nascosta da design\n        if (!this.wrapper.classList.contains('hide-progress')) {\n            const progressBar = document.createElement('div');\n            progressBar.className = 'scroll-progress';\n            progressBar.setAttribute('role', 'progressbar');\n            progressBar.setAttribute('aria-label', 'Progresso scroll');\n            progressBar.setAttribute('aria-valuemin', '0');\n            progressBar.setAttribute('aria-valuemax', '100');\n            \n            this.wrapper.appendChild(progressBar);\n            this.progressBar = progressBar;\n        }\n        \n        // Aggiorna su scroll\n        let ticking = false;\n        this.container.addEventListener('scroll', () => {\n            if (!ticking) {\n                requestAnimationFrame(() => {\n                    this.updateUI();\n                    ticking = false;\n                });\n                ticking = true;\n            }\n        }, this.supportsPassive ? { passive: true } : false);\n    }\n    \n    // Setup accessibilità\n    setupAccessibility() {\n        // ARIA labels\n        this.container.setAttribute('role', 'region');\n        this.container.setAttribute('aria-label', 'Contenuti scrollabili orizzontalmente');\n        \n        // Live region per annunci\n        const liveRegion = document.createElement('div');\n        liveRegion.className = 'sr-only';\n        liveRegion.setAttribute('role', 'status');\n        liveRegion.setAttribute('aria-live', 'polite');\n        liveRegion.setAttribute('aria-atomic', 'true');\n        liveRegion.style.cssText = `\n            position: absolute;\n            width: 1px;\n            height: 1px;\n            padding: 0;\n            margin: -1px;\n            overflow: hidden;\n            clip: rect(0,0,0,0);\n            white-space: nowrap;\n            border: 0;\n        `;\n        \n        this.wrapper.appendChild(liveRegion);\n        this.liveRegion = liveRegion;\n    }\n    \n    // Scroll fluido\n    smoothScroll(distance) {\n        if (this.supportsScrollBehavior) {\n            this.container.scrollBy({\n                left: distance,\n                behavior: 'smooth'\n            });\n        } else {\n            // Fallback animato\n            this.animateScroll(this.container.scrollLeft + distance);\n        }\n    }\n    \n    // Animazione scroll per fallback\n    animateScroll(target) {\n        const start = this.container.scrollLeft;\n        const distance = target - start;\n        const duration = 300;\n        let startTime = null;\n        \n        const animation = (currentTime) => {\n            if (!startTime) startTime = currentTime;\n            const elapsed = currentTime - startTime;\n            const progress = Math.min(elapsed / duration, 1);\n            \n            // Easing\n            const easeInOutQuad = progress < 0.5\n                ? 2 * progress * progress\n                : 1 - Math.pow(-2 * progress + 2, 2) / 2;\n            \n            this.container.scrollLeft = start + distance * easeInOutQuad;\n            \n            if (progress < 1) {\n                requestAnimationFrame(animation);\n            } else {\n                this.updateUI();\n            }\n        };\n        \n        requestAnimationFrame(animation);\n    }\n    \n    // Metodi di navigazione\n    scrollPrev() {\n        const scrollAmount = this.container.clientWidth * 0.8;\n        this.smoothScroll(-scrollAmount);\n        this.announce('Scorrimento a sinistra');\n    }\n    \n    scrollNext() {\n        const scrollAmount = this.container.clientWidth * 0.8;\n        this.smoothScroll(scrollAmount);\n        this.announce('Scorrimento a destra');\n    }\n    \n    scrollToStart() {\n        this.container.scrollTo({\n            left: 0,\n            behavior: this.supportsScrollBehavior ? 'smooth' : 'auto'\n        });\n        this.announce('Inizio dei contenuti');\n    }\n    \n    scrollToEnd() {\n        const maxScroll = this.container.scrollWidth - this.container.clientWidth;\n        this.container.scrollTo({\n            left: maxScroll,\n            behavior: this.supportsScrollBehavior ? 'smooth' : 'auto'\n        });\n        this.announce('Fine dei contenuti');\n    }\n    \n    // Aggiorna UI\n    updateUI() {\n        const scrollLeft = this.container.scrollLeft;\n        \n        // Calcola il gap tra le card (se usi gap in CSS)\n        const computedStyle = window.getComputedStyle(this.container);\n        const gap = parseFloat(computedStyle.gap) || 0;\n        \n        // Trova l'ultima card\n        const lastChild = this.container.lastElementChild;\n        const lastChildWidth = lastChild ? lastChild.offsetWidth : 0;\n        \n        // Calcola il maxScroll considerando l'ultima card e il padding\n        const maxScroll = this.container.scrollWidth - this.container.clientWidth;\n        const adjustedMaxScroll = Math.max(0, maxScroll - gap);\n        \n        // Aggiorna pulsanti con tolleranza\n        if (this.prevButton && this.nextButton) {\n            const tolerance = 5;\n            this.prevButton.disabled = scrollLeft <= tolerance;\n            this.nextButton.disabled = scrollLeft >= adjustedMaxScroll - tolerance;\n            \n            // Aggiorna ARIA\n            this.prevButton.setAttribute('aria-disabled', scrollLeft <= tolerance);\n            this.nextButton.setAttribute('aria-disabled', scrollLeft >= adjustedMaxScroll - tolerance);\n        }\n        \n        // Aggiorna progress bar\n        if (this.progressBar && adjustedMaxScroll > 0) {\n            const progress = Math.min(100, (scrollLeft / adjustedMaxScroll) * 100);\n            this.progressBar.style.width = `${progress}%`;\n            this.progressBar.setAttribute('aria-valuenow', Math.round(progress));\n        }\n    }\n    \n    // Annuncia a screen reader\n    announce(message) {\n        if (this.liveRegion) {\n            this.liveRegion.textContent = message;\n            // Reset dopo annuncio\n            setTimeout(() => {\n                this.liveRegion.textContent = '';\n            }, 1000);\n        }\n    }\n}\n\n// CSS da iniettare - Adattato per CSS Elementor esistente\nconst improvedStyles = `\n    <style id=\"improved-scroller-styles\">\n        /* Wrapper styles */\n        .elementor-scroller-wrapper {\n            position: relative;\n        }\n        \n        /* Nasconde scrollbar orizzontale su desktop mantenendo lo scroll */\n        .scrollable-container {\n            /* Firefox */\n            scrollbar-width: none;\n            \n            /* IE 10+ */\n            -ms-overflow-style: none;\n            \n            /* Aggiunge spazio per l'ultima card */\n            padding-right: 30px;\n            box-sizing: content-box;\n        }\n        \n        /* Compensa il padding per il primo elemento */\n        .scrollable-container > *:first-child {\n            margin-left: 20px;\n        }\n        \n        /* Fix per Elementor - previeni che tagli il contenuto */\n        .elementor-widget-container {\n            overflow: visible !important;\n        }\n        \n        /* Fix per container con gap CSS */\n        .scrollable-container[style*=\"gap\"] {\n            padding-right: 50px;\n        }\n        \n        /* Chrome, Safari, Opera, Edge */\n        .scrollable-container::-webkit-scrollbar {\n            width: 0 !important;\n            height: 0 !important;\n            display: none;\n        }\n        \n        .scrollable-container::-webkit-scrollbar-track {\n            background: transparent;\n        }\n        \n        .scrollable-container::-webkit-scrollbar-thumb {\n            background: transparent;\n            border: none;\n        }\n        \n        /* Supporto per browser più vecchi */\n        @supports not (scrollbar-width: none) {\n            .scrollable-container {\n                margin-bottom: -17px;\n                padding-bottom: 17px;\n            }\n        }\n        \n        /* Pulsanti navigazione */\n        .nav-button {\n            position: absolute;\n            top: 50%;\n            transform: translateY(-50%);\n            width: 48px;\n            height: 48px;\n            background: rgba(255, 255, 255, 0.95);\n            border: 1px solid #ddd;\n            border-radius: 50%;\n            cursor: pointer;\n            display: none;\n            align-items: center;\n            justify-content: center;\n            z-index: 10;\n            transition: all 0.3s ease;\n            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n            \n            /* Assicura che sia sopra il contenuto */\n            pointer-events: auto;\n        }\n        \n        .nav-button {\n            background: var(--e-global-color-primary);\n        }\n        \n        .nav-button svg {\n            width: 24px;\n            height: 24px;\n            color: #fff;\n        }\n        \n        .nav-button:hover:not(:disabled) {\n            background: var(--e-global-color-2de3d7d);\n            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n            transform: translateY(-50%) scale(1.1);\n        }\n        \n        .nav-button:active {\n            transform: translateY(-50%) scale(0.95);\n        }\n        \n        .nav-button:hover:not(:disabled) {\n            background: var(--e-global-color-2de3d7d);\n            border-color: var(--e-global-color-2de3d7d);\n        }\n        \n        .nav-button:active {\n            transform: translateY(-50%) scale(0.95);\n        }\n        \n        .nav-button:disabled {\n            opacity: 0.3;\n            cursor: not-allowed;\n        }\n        \n        .nav-button:disabled:hover {\n            transform: translateY(-50%);\n        }\n        \n        .nav-button:focus {\n            outline: 2px solid var(--e-global-color-primary, #0066cc);\n            outline-offset: 2px;\n        }\n        \n        .nav-prev {\n            left: 10px;\n        }\n        \n        .nav-next {\n            right: 10px;\n        }\n        \n        /* Mostra pulsanti su desktop */\n        @media (min-width: 1024px) {\n            .elementor-scroller-wrapper:hover .nav-button:not(:disabled) {\n                display: flex;\n            }\n            \n            .elementor-scroller-wrapper:focus-within .nav-button:not(:disabled) {\n                display: flex;\n            }\n        }\n        \n        /* Progress bar sottile */\n        .scroll-progress {\n            position: absolute;\n            bottom: 0;\n            left: 0;\n            height: 3px;\n            background: var(--e-global-color-primary, #0066cc);\n            transition: width 0.2s ease, opacity 0.3s ease;\n            pointer-events: none;\n            z-index: 5;\n            opacity: 0;\n            border-radius: 0 3px 3px 0;\n        }\n        \n        /* Mostra progress bar su hover/focus */\n        .elementor-scroller-wrapper:hover .scroll-progress,\n        .elementor-scroller-wrapper:focus-within .scroll-progress {\n            opacity: 0.7;\n        }\n        \n        /* Non sovrascriviamo cursor - già impostato nel CSS esistente */\n        \n        /* Focus migliore - solo se non già presente */\n        .scrollable-container:focus-visible {\n            outline: 2px solid var(--e-global-color-primary, #0066cc);\n            outline-offset: 2px;\n        }\n        \n        /* Supporta la classe keyboard-scrolling esistente */\n        .scrollable-container.keyboard-scrolling {\n            scroll-behavior: smooth !important;\n        }\n        \n        /* Screen reader only */\n        .sr-only {\n            position: absolute;\n            width: 1px;\n            height: 1px;\n            padding: 0;\n            margin: -1px;\n            overflow: hidden;\n            clip: rect(0,0,0,0);\n            white-space: nowrap;\n            border: 0;\n        }\n        \n        /* Indicatori di pagina opzionali */\n        .scroll-indicators {\n            display: flex;\n            justify-content: center;\n            gap: 8px;\n            margin-top: 16px;\n            padding: 8px;\n        }\n        \n        .scroll-indicator {\n            width: 8px;\n            height: 8px;\n            border-radius: 50%;\n            background: #ddd;\n            transition: all 0.3s ease;\n            cursor: pointer;\n            border: none;\n            padding: 0;\n        }\n        \n        .scroll-indicator:hover {\n            background: #999;\n            transform: scale(1.2);\n        }\n        \n        .scroll-indicator.active {\n            background: var(--e-global-color-primary, #333);\n            width: 24px;\n            border-radius: 4px;\n        }\n        \n        /* Supporto reduced motion */\n        @media (prefers-reduced-motion: reduce) {\n            * {\n                animation-duration: 0.01ms !important;\n                animation-iteration-count: 1 !important;\n                transition-duration: 0.01ms !important;\n            }\n            \n            .scrollable-container {\n                scroll-behavior: auto !important;\n            }\n            \n            .nav-button {\n                transition: none !important;\n            }\n            \n            .scroll-progress {\n                transition: none !important;\n            }\n        }\n        \n        /* Migliora contrasto per accessibilità */\n        @media (prefers-contrast: high) {\n            .nav-button {\n                background: #fff;\n                border: 2px solid #000;\n            }\n            \n            .nav-button:hover:not(:disabled) {\n                background: #000;\n                color: #fff;\n            }\n            \n            .nav-button:hover:not(:disabled) svg {\n                color: #fff;\n            }\n            \n            .scroll-progress {\n                background: #000;\n            }\n        }\n        \n        /* Dark mode support */\n        @media (prefers-color-scheme: dark) {\n            .nav-button {\n                background: var(--e-global-color-primary);\n                border-color: var(--e-global-color-primary);\n            }\n            \n            .nav-button svg {\n                color: #fff;\n            }\n            \n            .nav-button:hover:not(:disabled) {\n                background: var(--e-global-color-2de3d7d);\n                border-color: var(--e-global-color-2de3d7d);\n            }\n            \n            .scroll-indicator {\n                background: #555;\n            }\n            \n            .scroll-indicator:hover {\n                background: #777;\n            }\n            \n            .scroll-indicator.active {\n                background: #fff;\n            }\n        }\n    </style>\n`;\n\n// Inizializzazione\nfunction initImprovedScrollers() {\n    // Inietta stili se non presenti\n    if (!document.getElementById('improved-scroller-styles')) {\n        document.head.insertAdjacentHTML('beforeend', improvedStyles);\n    }\n    \n    // Trova tutti i container scrollabili\n    const containers = document.querySelectorAll('.scrollable-container');\n    \n    containers.forEach(container => {\n        // Skip se già inizializzato\n        if (container.hasAttribute('data-improved-scroller')) return;\n        \n        // Inizializza solo se c'è overflow orizzontale\n        if (container.scrollWidth > container.clientWidth) {\n            new ImprovedElementorScroller(container);\n            container.setAttribute('data-improved-scroller', 'true');\n        }\n    });\n}\n\n// Inizializza quando DOM è pronto\nif (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', initImprovedScrollers);\n} else {\n    initImprovedScrollers();\n}\n\n// Hook per Elementor\nif (typeof jQuery !== 'undefined') {\n    jQuery(window).on('elementor/frontend/init', function() {\n        if (window.elementorFrontend && window.elementorFrontend.hooks) {\n            elementorFrontend.hooks.addAction('frontend/element_ready/widget', function() {\n                setTimeout(initImprovedScrollers, 100);\n            });\n        }\n    });\n} else {\n    // Fallback observer per contenuti dinamici\n    const observer = new MutationObserver(() => {\n        initImprovedScrollers();\n    });\n    \n    observer.observe(document.body, {\n        childList: true,\n        subtree: true\n    });\n}\n\n// Re-inizializza su resize\nlet resizeTimeout;\nwindow.addEventListener('resize', () => {\n    clearTimeout(resizeTimeout);\n    resizeTimeout = setTimeout(initImprovedScrollers, 250);\n});\n\nconsole.log('Improved Elementor Scroller v2.0 loaded');","newString":"/**\n * Slider Orizzontale Migliorato per Elementor\n * Versione 2.0 - Ottimizzato per Desktop con Accessibilità\n */\n\n// Classe principale per gestire lo slider\nclass ImprovedElementorScroller {\n    constructor(container) {\n        this.container = container;\n        this.wrapper = null;\n        this.isScrolling = false;\n        this.scrollTimeout = null;\n        \n        // Feature detection\n        this.supportsPassive = this.checkPassiveSupport();\n        this.supportsScrollBehavior = 'scrollBehavior' in document.documentElement.style;\n        \n        // Inizializza\n        this.init();\n    }\n    \n    // Check supporto passive listeners\n    checkPassiveSupport() {\n        let supportsPassive = false;\n        try {\n            const opts = Object.defineProperty({}, 'passive', {\n                get: () => { supportsPassive = true; }\n            });\n            window.addEventListener('testPassive', null, opts);\n            window.removeEventListener('testPassive', null, opts);\n        } catch (e) {}\n        return supportsPassive;\n    }\n    \n    init() {\n        // Crea wrapper per aggiungere controlli senza modificare HTML\n        this.wrapContainer();\n        \n        // Setup features\n        this.setupNavButtons();\n        this.setupKeyboard();\n        this.setupMouseWheel();\n        this.setupTouch();\n        this.setupScrollIndicator();\n        this.setupAccessibility();\n        \n        // Aggiorna stato iniziale\n        this.updateUI();\n    }\n    \n    // Wrap container esistente per aggiungere controlli\n    wrapContainer() {\n        // Se già wrappato, esci\n        if (this.container.parentElement.classList.contains('elementor-scroller-wrapper')) {\n            this.wrapper = this.container.parentElement;\n            return;\n        }\n        \n        // Crea wrapper\n        this.wrapper = document.createElement('div');\n        this.wrapper.className = 'elementor-scroller-wrapper';\n        this.wrapper.style.position = 'relative';\n        \n        // Inserisci wrapper\n        this.container.parentNode.insertBefore(this.wrapper, this.container);\n        this.wrapper.appendChild(this.container);\n    }\n    \n    // Setup pulsanti navigazione\n    setupNavButtons() {\n        // Crea pulsanti solo se non esistono\n        if (!this.wrapper.querySelector('.nav-button')) {\n            // Pulsante precedente\n            const prevButton = document.createElement('button');\n            prevButton.className = 'nav-button nav-prev';\n            prevButton.innerHTML = `\n                <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                    <path d=\"M15 18l-6-6 6-6\"/>\n                </svg>\n            `;\n            prevButton.setAttribute('aria-label', 'Scorri a sinistra');\n            prevButton.addEventListener('click', () => this.scrollPrev());\n            \n            // Pulsante successivo\n            const nextButton = document.createElement('button');\n            nextButton.className = 'nav-button nav-next';\n            nextButton.innerHTML = `\n                <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                    <path d=\"M9 18l6-6-6-6\"/>\n                </svg>\n            `;\n            nextButton.setAttribute('aria-label', 'Scorri a destra');\n            nextButton.addEventListener('click', () => this.scrollNext());\n            \n            // Aggiungi al wrapper\n            this.wrapper.appendChild(prevButton);\n            this.wrapper.appendChild(nextButton);\n            \n            // Store references\n            this.prevButton = prevButton;\n            this.nextButton = nextButton;\n        }\n    }\n    \n    // Setup tastiera migliorato\n    setupKeyboard() {\n        this.container.addEventListener('keydown', (e) => {\n            const scrollAmount = this.container.clientWidth * 0.8;\n            let handled = true;\n            \n            // Aggiungi classe per smooth scroll da tastiera\n            this.container.classList.add('keyboard-scrolling');\n            \n            switch(e.key) {\n                case 'ArrowLeft':\n                    this.smoothScroll(-scrollAmount);\n                    break;\n                case 'ArrowRight':\n                    this.smoothScroll(scrollAmount);\n                    break;\n                case 'Home':\n                    this.scrollToStart();\n                    break;\n                case 'End':\n                    this.scrollToEnd();\n                    break;\n                default:\n                    handled = false;\n            }\n            \n            if (handled) {\n                e.preventDefault();\n                // Rimuovi classe dopo animazione\n                setTimeout(() => {\n                    this.container.classList.remove('keyboard-scrolling');\n                }, 400);\n            } else {\n                this.container.classList.remove('keyboard-scrolling');\n            }\n        });\n    }\n    \n    // Setup mouse wheel - MIGLIORAMENTO CHIAVE\n    setupMouseWheel() {\n        let accumulatedDelta = 0;\n        let wheelTimeout;\n        \n        const wheelHandler = (e) => {\n            // Solo se container è in hover o focus\n            if (!this.container.matches(':hover, :focus-within')) return;\n            \n            e.preventDefault();\n            \n            // Accumula piccoli delta per scroll più fluido\n            accumulatedDelta += e.deltaY;\n            \n            clearTimeout(wheelTimeout);\n            wheelTimeout = setTimeout(() => {\n                if (Math.abs(accumulatedDelta) > 10) {\n                    // Normalizza e applica scroll\n                    const scrollAmount = Math.sign(accumulatedDelta) * Math.min(Math.abs(accumulatedDelta), 300);\n                    this.smoothScroll(scrollAmount);\n                }\n                accumulatedDelta = 0;\n            }, 50);\n        };\n        \n        // Aggiungi listener con passive false\n        this.container.addEventListener('wheel', wheelHandler, \n            this.supportsPassive ? { passive: false } : false\n        );\n    }\n    \n    // Setup touch con momentum migliorato\n    setupTouch() {\n        let startX = 0;\n        let scrollLeft = 0;\n        let isDragging = false;\n        let animationId = null;\n        let velocity = 0;\n        let lastX = 0;\n        let lastTime = 0;\n        \n        const startDragging = (pageX) => {\n            isDragging = true;\n            startX = pageX;\n            lastX = pageX;\n            scrollLeft = this.container.scrollLeft;\n            lastTime = Date.now();\n            velocity = 0;\n            \n            // Cancella animazioni\n            if (animationId) {\n                cancelAnimationFrame(animationId);\n            }\n            \n            // La classe 'active' è già nel CSS esistente per cursor grabbing\n            this.container.classList.add('active');\n        };\n        \n        const drag = (pageX) => {\n            if (!isDragging) return;\n            \n            const currentTime = Date.now();\n            const timeDelta = currentTime - lastTime;\n            const distance = pageX - lastX;\n            \n            // Calcola velocità\n            if (timeDelta > 0) {\n                velocity = distance / timeDelta * 16; // Normalizza a 60fps\n            }\n            \n            const walk = (pageX - startX) * 1.5;\n            this.container.scrollLeft = scrollLeft - walk;\n            \n            lastX = pageX;\n            lastTime = currentTime;\n        };\n        \n        const stopDragging = () => {\n            if (!isDragging) return;\n            \n            isDragging = false;\n            this.container.classList.remove('active');\n            \n            // Applica momentum se c'è velocità\n            if (Math.abs(velocity) > 2) {\n                const deceleration = 0.95;\n                \n                const animate = () => {\n                    if (Math.abs(velocity) > 0.5) {\n                        this.container.scrollLeft -= velocity;\n                        velocity *= deceleration;\n                        animationId = requestAnimationFrame(animate);\n                    } else {\n                        this.updateUI();\n                    }\n                };\n                \n                animate();\n            } else {\n                this.updateUI();\n            }\n        };\n        \n        // Mouse events\n        this.container.addEventListener('mousedown', (e) => {\n            startDragging(e.pageX);\n        });\n        \n        document.addEventListener('mousemove', (e) => {\n            drag(e.pageX);\n        });\n        \n        document.addEventListener('mouseup', stopDragging);\n        \n        // Touch events\n        this.container.addEventListener('touchstart', (e) => {\n            startDragging(e.touches[0].pageX);\n        }, this.supportsPassive ? { passive: true } : false);\n        \n        this.container.addEventListener('touchmove', (e) => {\n            drag(e.touches[0].pageX);\n        }, this.supportsPassive ? { passive: true } : false);\n        \n        this.container.addEventListener('touchend', stopDragging);\n        this.container.addEventListener('touchcancel', stopDragging);\n    }\n    \n    // Setup indicatore di scroll\n    setupScrollIndicator() {\n        // Crea progress bar solo se non nascosta da design\n        if (!this.wrapper.classList.contains('hide-progress')) {\n            const progressBar = document.createElement('div');\n            progressBar.className = 'scroll-progress';\n            progressBar.setAttribute('role', 'progressbar');\n            progressBar.setAttribute('aria-label', 'Progresso scroll');\n            progressBar.setAttribute('aria-valuemin', '0');\n            progressBar.setAttribute('aria-valuemax', '100');\n            \n            this.wrapper.appendChild(progressBar);\n            this.progressBar = progressBar;\n        }\n        \n        // Aggiorna su scroll\n        let ticking = false;\n        this.container.addEventListener('scroll', () => {\n            if (!ticking) {\n                requestAnimationFrame(() => {\n                    this.updateUI();\n                    ticking = false;\n                });\n                ticking = true;\n            }\n        }, this.supportsPassive ? { passive: true } : false);\n    }\n    \n    // Setup accessibilità\n    setupAccessibility() {\n        // ARIA labels\n        this.container.setAttribute('role', 'region');\n        this.container.setAttribute('aria-label', 'Contenuti scrollabili orizzontalmente');\n        \n        // Live region per annunci\n        const liveRegion = document.createElement('div');\n        liveRegion.className = 'sr-only';\n        liveRegion.setAttribute('role', 'status');\n        liveRegion.setAttribute('aria-live', 'polite');\n        liveRegion.setAttribute('aria-atomic', 'true');\n        liveRegion.style.cssText = `\n            position: absolute;\n            width: 1px;\n            height: 1px;\n            padding: 0;\n            margin: -1px;\n            overflow: hidden;\n            clip: rect(0,0,0,0);\n            white-space: nowrap;\n            border: 0;\n        `;\n        \n        this.wrapper.appendChild(liveRegion);\n        this.liveRegion = liveRegion;\n    }\n    \n    // Scroll fluido\n    smoothScroll(distance) {\n        if (this.supportsScrollBehavior) {\n            this.container.scrollBy({\n                left: distance,\n                behavior: 'smooth'\n            });\n        } else {\n            // Fallback animato\n            this.animateScroll(this.container.scrollLeft + distance);\n        }\n    }\n    \n    // Animazione scroll per fallback\n    animateScroll(target) {\n        const start = this.container.scrollLeft;\n        const distance = target - start;\n        const duration = 300;\n        let startTime = null;\n        \n        const animation = (currentTime) => {\n            if (!startTime) startTime = currentTime;\n            const elapsed = currentTime - startTime;\n            const progress = Math.min(elapsed / duration, 1);\n            \n            // Easing\n            const easeInOutQuad = progress < 0.5\n                ? 2 * progress * progress\n                : 1 - Math.pow(-2 * progress + 2, 2) / 2;\n            \n            this.container.scrollLeft = start + distance * easeInOutQuad;\n            \n            if (progress < 1) {\n                requestAnimationFrame(animation);\n            } else {\n                this.updateUI();\n            }\n        };\n        \n        requestAnimationFrame(animation);\n    }\n    \n    // Metodi di navigazione\n    scrollPrev() {\n        const scrollAmount = this.container.clientWidth * 0.8;\n        this.smoothScroll(-scrollAmount);\n        this.announce('Scorrimento a sinistra');\n    }\n    \n    scrollNext() {\n        const scrollAmount = this.container.clientWidth * 0.8;\n        this.smoothScroll(scrollAmount);\n        this.announce('Scorrimento a destra');\n    }\n    \n    scrollToStart() {\n        this.container.scrollTo({\n            left: 0,\n            behavior: this.supportsScrollBehavior ? 'smooth' : 'auto'\n        });\n        this.announce('Inizio dei contenuti');\n    }\n    \n    scrollToEnd() {\n        const maxScroll = this.container.scrollWidth - this.container.clientWidth;\n        this.container.scrollTo({\n            left: maxScroll,\n            behavior: this.supportsScrollBehavior ? 'smooth' : 'auto'\n        });\n        this.announce('Fine dei contenuti');\n    }\n    \n    // Aggiorna UI\n    updateUI() {\n        const scrollLeft = this.container.scrollLeft;\n        \n        // Calcola il gap tra le card (se usi gap in CSS)\n        const computedStyle = window.getComputedStyle(this.container);\n        const gap = parseFloat(computedStyle.gap) || 0;\n        \n        // Trova l'ultima card\n        const lastChild = this.container.lastElementChild;\n        const lastChildWidth = lastChild ? lastChild.offsetWidth : 0;\n        \n        // Calcola il maxScroll considerando l'ultima card e il padding\n        const maxScroll = this.container.scrollWidth - this.container.clientWidth;\n        const adjustedMaxScroll = Math.max(0, maxScroll - gap);\n        \n        // Aggiorna pulsanti con tolleranza\n        if (this.prevButton && this.nextButton) {\n            const tolerance = 5;\n            this.prevButton.disabled = scrollLeft <= tolerance;\n            this.nextButton.disabled = scrollLeft >= adjustedMaxScroll - tolerance;\n            \n            // Aggiorna ARIA\n            this.prevButton.setAttribute('aria-disabled', scrollLeft <= tolerance);\n            this.nextButton.setAttribute('aria-disabled', scrollLeft >= adjustedMaxScroll - tolerance);\n        }\n        \n        // Aggiorna progress bar\n        if (this.progressBar && adjustedMaxScroll > 0) {\n            const progress = Math.min(100, (scrollLeft / adjustedMaxScroll) * 100);\n            this.progressBar.style.width = `${progress}%`;\n            this.progressBar.setAttribute('aria-valuenow', Math.round(progress));\n        }\n    }\n    \n    // Verifica se un elemento è completamente visibile\n    isElementFullyVisible(element) {\n        const containerRect = this.container.getBoundingClientRect();\n        const elementRect = element.getBoundingClientRect();\n        \n        return elementRect.left >= containerRect.left && \n               elementRect.right <= containerRect.right;\n    }\n    \n    // Assicura che l'ultima card sia visibile dopo lo scroll\n    ensureLastCardVisible() {\n        const lastCard = this.container.lastElementChild;\n        if (!lastCard) return;\n        \n        if (!this.isElementFullyVisible(lastCard)) {\n            const containerRect = this.container.getBoundingClientRect();\n            const lastCardRect = lastCard.getBoundingClientRect();\n            const scrollAdjustment = lastCardRect.right - containerRect.right + 20;\n            \n            if (scrollAdjustment > 0) {\n                this.container.scrollLeft += scrollAdjustment;\n            }\n        }\n    }\n\n    // Annuncia a screen reader\n    announce(message) {\n        if (this.liveRegion) {\n            this.liveRegion.textContent = message;\n            // Reset dopo annuncio\n            setTimeout(() => {\n                this.liveRegion.textContent = '';\n            }, 1000);\n        }\n    }\n}\n\n// CSS da iniettare - Adattato per CSS Elementor esistente\nconst improvedStyles = `\n    <style id=\"improved-scroller-styles\">\n        /* Wrapper styles */\n        .elementor-scroller-wrapper {\n            position: relative;\n        }\n        \n        /* Nasconde scrollbar orizzontale su desktop mantenendo lo scroll */\n        .scrollable-container {\n            /* Firefox */\n            scrollbar-width: none;\n            \n            /* IE 10+ */\n            -ms-overflow-style: none;\n            \n            /* Aggiunge spazio per l'ultima card */\n            padding-right: 30px;\n            box-sizing: content-box;\n        }\n        \n        /* Compensa il padding per il primo elemento */\n        .scrollable-container > *:first-child {\n            margin-left: 20px;\n        }\n        \n        /* Fix per Elementor - previeni che tagli il contenuto */\n        .elementor-widget-container {\n            overflow: visible !important;\n        }\n        \n        /* Fix per container con gap CSS */\n        .scrollable-container[style*=\"gap\"] {\n            padding-right: 50px;\n        }\n        \n        /* Chrome, Safari, Opera, Edge */\n        .scrollable-container::-webkit-scrollbar {\n            width: 0 !important;\n            height: 0 !important;\n            display: none;\n        }\n        \n        .scrollable-container::-webkit-scrollbar-track {\n            background: transparent;\n        }\n        \n        .scrollable-container::-webkit-scrollbar-thumb {\n            background: transparent;\n            border: none;\n        }\n        \n        /* Supporto per browser più vecchi */\n        @supports not (scrollbar-width: none) {\n            .scrollable-container {\n                margin-bottom: -17px;\n                padding-bottom: 17px;\n            }\n        }\n        \n        /* Pulsanti navigazione */\n        .nav-button {\n            position: absolute;\n            top: 50%;\n            transform: translateY(-50%);\n            width: 48px;\n            height: 48px;\n            background: rgba(255, 255, 255, 0.95);\n            border: 1px solid #ddd;\n            border-radius: 50%;\n            cursor: pointer;\n            display: none;\n            align-items: center;\n            justify-content: center;\n            z-index: 10;\n            transition: all 0.3s ease;\n            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n            \n            /* Assicura che sia sopra il contenuto */\n            pointer-events: auto;\n        }\n        \n        .nav-button {\n            background: var(--e-global-color-primary);\n        }\n        \n        .nav-button svg {\n            width: 24px;\n            height: 24px;\n            color: #fff;\n        }\n        \n        .nav-button:hover:not(:disabled) {\n            background: var(--e-global-color-2de3d7d);\n            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n            transform: translateY(-50%) scale(1.1);\n        }\n        \n        .nav-button:active {\n            transform: translateY(-50%) scale(0.95);\n        }\n        \n        .nav-button:hover:not(:disabled) {\n            background: var(--e-global-color-2de3d7d);\n            border-color: var(--e-global-color-2de3d7d);\n        }\n        \n        .nav-button:active {\n            transform: translateY(-50%) scale(0.95);\n        }\n        \n        .nav-button:disabled {\n            opacity: 0.3;\n            cursor: not-allowed;\n        }\n        \n        .nav-button:disabled:hover {\n            transform: translateY(-50%);\n        }\n        \n        .nav-button:focus {\n            outline: 2px solid var(--e-global-color-primary, #0066cc);\n            outline-offset: 2px;\n        }\n        \n        .nav-prev {\n            left: 10px;\n        }\n        \n        .nav-next {\n            right: 10px;\n        }\n        \n        /* Mostra pulsanti su desktop */\n        @media (min-width: 1024px) {\n            .elementor-scroller-wrapper:hover .nav-button:not(:disabled) {\n                display: flex;\n            }\n            \n            .elementor-scroller-wrapper:focus-within .nav-button:not(:disabled) {\n                display: flex;\n            }\n        }\n        \n        /* Progress bar sottile */\n        .scroll-progress {\n            position: absolute;\n            bottom: 0;\n            left: 0;\n            height: 3px;\n            background: var(--e-global-color-primary, #0066cc);\n            transition: width 0.2s ease, opacity 0.3s ease;\n            pointer-events: none;\n            z-index: 5;\n            opacity: 0;\n            border-radius: 0 3px 3px 0;\n        }\n        \n        /* Mostra progress bar su hover/focus */\n        .elementor-scroller-wrapper:hover .scroll-progress,\n        .elementor-scroller-wrapper:focus-within .scroll-progress {\n            opacity: 0.7;\n        }\n        \n        /* Non sovrascriviamo cursor - già impostato nel CSS esistente */\n        \n        /* Focus migliore - solo se non già presente */\n        .scrollable-container:focus-visible {\n            outline: 2px solid var(--e-global-color-primary, #0066cc);\n            outline-offset: 2px;\n        }\n        \n        /* Supporta la classe keyboard-scrolling esistente */\n        .scrollable-container.keyboard-scrolling {\n            scroll-behavior: smooth !important;\n        }\n        \n        /* Screen reader only */\n        .sr-only {\n            position: absolute;\n            width: 1px;\n            height: 1px;\n            padding: 0;\n            margin: -1px;\n            overflow: hidden;\n            clip: rect(0,0,0,0);\n            white-space: nowrap;\n            border: 0;\n        }\n        \n        /* Indicatori di pagina opzionali */\n        .scroll-indicators {\n            display: flex;\n            justify-content: center;\n            gap: 8px;\n            margin-top: 16px;\n            padding: 8px;\n        }\n        \n        .scroll-indicator {\n            width: 8px;\n            height: 8px;\n            border-radius: 50%;\n            background: #ddd;\n            transition: all 0.3s ease;\n            cursor: pointer;\n            border: none;\n            padding: 0;\n        }\n        \n        .scroll-indicator:hover {\n            background: #999;\n            transform: scale(1.2);\n        }\n        \n        .scroll-indicator.active {\n            background: var(--e-global-color-primary, #333);\n            width: 24px;\n            border-radius: 4px;\n        }\n        \n        /* Supporto reduced motion */\n        @media (prefers-reduced-motion: reduce) {\n            * {\n                animation-duration: 0.01ms !important;\n                animation-iteration-count: 1 !important;\n                transition-duration: 0.01ms !important;\n            }\n            \n            .scrollable-container {\n                scroll-behavior: auto !important;\n            }\n            \n            .nav-button {\n                transition: none !important;\n            }\n            \n            .scroll-progress {\n                transition: none !important;\n            }\n        }\n        \n        /* Migliora contrasto per accessibilità */\n        @media (prefers-contrast: high) {\n            .nav-button {\n                background: #fff;\n                border: 2px solid #000;\n            }\n            \n            .nav-button:hover:not(:disabled) {\n                background: #000;\n                color: #fff;\n            }\n            \n            .nav-button:hover:not(:disabled) svg {\n                color: #fff;\n            }\n            \n            .scroll-progress {\n                background: #000;\n            }\n        }\n        \n        /* Dark mode support */\n        @media (prefers-color-scheme: dark) {\n            .nav-button {\n                background: var(--e-global-color-primary);\n                border-color: var(--e-global-color-primary);\n            }\n            \n            .nav-button svg {\n                color: #fff;\n            }\n            \n            .nav-button:hover:not(:disabled) {\n                background: var(--e-global-color-2de3d7d);\n                border-color: var(--e-global-color-2de3d7d);\n            }\n            \n            .scroll-indicator {\n                background: #555;\n            }\n            \n            .scroll-indicator:hover {\n                background: #777;\n            }\n            \n            .scroll-indicator.active {\n                background: #fff;\n            }\n        }\n    </style>\n`;\n\n// Inizializzazione\nfunction initImprovedScrollers() {\n    // Inietta stili se non presenti\n    if (!document.getElementById('improved-scroller-styles')) {\n        document.head.insertAdjacentHTML('beforeend', improvedStyles);\n    }\n    \n    // Trova tutti i container scrollabili\n    const containers = document.querySelectorAll('.scrollable-container');\n    \n    containers.forEach(container => {\n        // Skip se già inizializzato\n        if (container.hasAttribute('data-improved-scroller')) return;\n        \n        // Inizializza solo se c'è overflow orizzontale\n        if (container.scrollWidth > container.clientWidth) {\n            new ImprovedElementorScroller(container);\n            container.setAttribute('data-improved-scroller', 'true');\n        }\n    });\n}\n\n// Inizializza quando DOM è pronto\nif (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', initImprovedScrollers);\n} else {\n    initImprovedScrollers();\n}\n\n// Hook per Elementor\nif (typeof jQuery !== 'undefined') {\n    jQuery(window).on('elementor/frontend/init', function() {\n        if (window.elementorFrontend && window.elementorFrontend.hooks) {\n            elementorFrontend.hooks.addAction('frontend/element_ready/widget', function() {\n                setTimeout(initImprovedScrollers, 100);\n            });\n        }\n    });\n} else {\n    // Fallback observer per contenuti dinamici\n    const observer = new MutationObserver(() => {\n        initImprovedScrollers();\n    });\n    \n    observer.observe(document.body, {\n        childList: true,\n        subtree: true\n    });\n}\n\n// Re-inizializza su resize\nlet resizeTimeout;\nwindow.addEventListener('resize', () => {\n    clearTimeout(resizeTimeout);\n    resizeTimeout = setTimeout(initImprovedScrollers, 250);\n});\n\nconsole.log('Improved Elementor Scroller v2.0 loaded');","originalFile":"/**\n * Slider Orizzontale Migliorato per Elementor\n * Versione 2.0 - Ottimizzato per Desktop con Accessibilità\n */\n\n// Classe principale per gestire lo slider\nclass ImprovedElementorScroller {\n    constructor(container) {\n        this.container = container;\n        this.wrapper = null;\n        this.isScrolling = false;\n        this.scrollTimeout = null;\n        \n        // Feature detection\n        this.supportsPassive = this.checkPassiveSupport();\n        this.supportsScrollBehavior = 'scrollBehavior' in document.documentElement.style;\n        \n        // Inizializza\n        this.init();\n    }\n    \n    // Check supporto passive listeners\n    checkPassiveSupport() {\n        let supportsPassive = false;\n        try {\n            const opts = Object.defineProperty({}, 'passive', {\n                get: () => { supportsPassive = true; }\n            });\n            window.addEventListener('testPassive', null, opts);\n            window.removeEventListener('testPassive', null, opts);\n        } catch (e) {}\n        return supportsPassive;\n    }\n    \n    init() {\n        // Crea wrapper per aggiungere controlli senza modificare HTML\n        this.wrapContainer();\n        \n        // Setup features\n        this.setupNavButtons();\n        this.setupKeyboard();\n        this.setupMouseWheel();\n        this.setupTouch();\n        this.setupScrollIndicator();\n        this.setupAccessibility();\n        \n        // Aggiorna stato iniziale\n        this.updateUI();\n    }\n    \n    // Wrap container esistente per aggiungere controlli\n    wrapContainer() {\n        // Se già wrappato, esci\n        if (this.container.parentElement.classList.contains('elementor-scroller-wrapper')) {\n            this.wrapper = this.container.parentElement;\n            return;\n        }\n        \n        // Crea wrapper\n        this.wrapper = document.createElement('div');\n        this.wrapper.className = 'elementor-scroller-wrapper';\n        this.wrapper.style.position = 'relative';\n        \n        // Inserisci wrapper\n        this.container.parentNode.insertBefore(this.wrapper, this.container);\n        this.wrapper.appendChild(this.container);\n    }\n    \n    // Setup pulsanti navigazione\n    setupNavButtons() {\n        // Crea pulsanti solo se non esistono\n        if (!this.wrapper.querySelector('.nav-button')) {\n            // Pulsante precedente\n            const prevButton = document.createElement('button');\n            prevButton.className = 'nav-button nav-prev';\n            prevButton.innerHTML = `\n                <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                    <path d=\"M15 18l-6-6 6-6\"/>\n                </svg>\n            `;\n            prevButton.setAttribute('aria-label', 'Scorri a sinistra');\n            prevButton.addEventListener('click', () => this.scrollPrev());\n            \n            // Pulsante successivo\n            const nextButton = document.createElement('button');\n            nextButton.className = 'nav-button nav-next';\n            nextButton.innerHTML = `\n                <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                    <path d=\"M9 18l6-6-6-6\"/>\n                </svg>\n            `;\n            nextButton.setAttribute('aria-label', 'Scorri a destra');\n            nextButton.addEventListener('click', () => this.scrollNext());\n            \n            // Aggiungi al wrapper\n            this.wrapper.appendChild(prevButton);\n            this.wrapper.appendChild(nextButton);\n            \n            // Store references\n            this.prevButton = prevButton;\n            this.nextButton = nextButton;\n        }\n    }\n    \n    // Setup tastiera migliorato\n    setupKeyboard() {\n        this.container.addEventListener('keydown', (e) => {\n            const scrollAmount = this.container.clientWidth * 0.8;\n            let handled = true;\n            \n            // Aggiungi classe per smooth scroll da tastiera\n            this.container.classList.add('keyboard-scrolling');\n            \n            switch(e.key) {\n                case 'ArrowLeft':\n                    this.smoothScroll(-scrollAmount);\n                    break;\n                case 'ArrowRight':\n                    this.smoothScroll(scrollAmount);\n                    break;\n                case 'Home':\n                    this.scrollToStart();\n                    break;\n                case 'End':\n                    this.scrollToEnd();\n                    break;\n                default:\n                    handled = false;\n            }\n            \n            if (handled) {\n                e.preventDefault();\n                // Rimuovi classe dopo animazione\n                setTimeout(() => {\n                    this.container.classList.remove('keyboard-scrolling');\n                }, 400);\n            } else {\n                this.container.classList.remove('keyboard-scrolling');\n            }\n        });\n    }\n    \n    // Setup mouse wheel - MIGLIORAMENTO CHIAVE\n    setupMouseWheel() {\n        let accumulatedDelta = 0;\n        let wheelTimeout;\n        \n        const wheelHandler = (e) => {\n            // Solo se container è in hover o focus\n            if (!this.container.matches(':hover, :focus-within')) return;\n            \n            e.preventDefault();\n            \n            // Accumula piccoli delta per scroll più fluido\n            accumulatedDelta += e.deltaY;\n            \n            clearTimeout(wheelTimeout);\n            wheelTimeout = setTimeout(() => {\n                if (Math.abs(accumulatedDelta) > 10) {\n                    // Normalizza e applica scroll\n                    const scrollAmount = Math.sign(accumulatedDelta) * Math.min(Math.abs(accumulatedDelta), 300);\n                    this.smoothScroll(scrollAmount);\n                }\n                accumulatedDelta = 0;\n            }, 50);\n        };\n        \n        // Aggiungi listener con passive false\n        this.container.addEventListener('wheel', wheelHandler, \n            this.supportsPassive ? { passive: false } : false\n        );\n    }\n    \n    // Setup touch con momentum migliorato\n    setupTouch() {\n        let startX = 0;\n        let scrollLeft = 0;\n        let isDragging = false;\n        let animationId = null;\n        let velocity = 0;\n        let lastX = 0;\n        let lastTime = 0;\n        \n        const startDragging = (pageX) => {\n            isDragging = true;\n            startX = pageX;\n            lastX = pageX;\n            scrollLeft = this.container.scrollLeft;\n            lastTime = Date.now();\n            velocity = 0;\n            \n            // Cancella animazioni\n            if (animationId) {\n                cancelAnimationFrame(animationId);\n            }\n            \n            // La classe 'active' è già nel CSS esistente per cursor grabbing\n            this.container.classList.add('active');\n        };\n        \n        const drag = (pageX) => {\n            if (!isDragging) return;\n            \n            const currentTime = Date.now();\n            const timeDelta = currentTime - lastTime;\n            const distance = pageX - lastX;\n            \n            // Calcola velocità\n            if (timeDelta > 0) {\n                velocity = distance / timeDelta * 16; // Normalizza a 60fps\n            }\n            \n            const walk = (pageX - startX) * 1.5;\n            this.container.scrollLeft = scrollLeft - walk;\n            \n            lastX = pageX;\n            lastTime = currentTime;\n        };\n        \n        const stopDragging = () => {\n            if (!isDragging) return;\n            \n            isDragging = false;\n            this.container.classList.remove('active');\n            \n            // Applica momentum se c'è velocità\n            if (Math.abs(velocity) > 2) {\n                const deceleration = 0.95;\n                \n                const animate = () => {\n                    if (Math.abs(velocity) > 0.5) {\n                        this.container.scrollLeft -= velocity;\n                        velocity *= deceleration;\n                        animationId = requestAnimationFrame(animate);\n                    } else {\n                        this.updateUI();\n                    }\n                };\n                \n                animate();\n            } else {\n                this.updateUI();\n            }\n        };\n        \n        // Mouse events\n        this.container.addEventListener('mousedown', (e) => {\n            startDragging(e.pageX);\n        });\n        \n        document.addEventListener('mousemove', (e) => {\n            drag(e.pageX);\n        });\n        \n        document.addEventListener('mouseup', stopDragging);\n        \n        // Touch events\n        this.container.addEventListener('touchstart', (e) => {\n            startDragging(e.touches[0].pageX);\n        }, this.supportsPassive ? { passive: true } : false);\n        \n        this.container.addEventListener('touchmove', (e) => {\n            drag(e.touches[0].pageX);\n        }, this.supportsPassive ? { passive: true } : false);\n        \n        this.container.addEventListener('touchend', stopDragging);\n        this.container.addEventListener('touchcancel', stopDragging);\n    }\n    \n    // Setup indicatore di scroll\n    setupScrollIndicator() {\n        // Crea progress bar solo se non nascosta da design\n        if (!this.wrapper.classList.contains('hide-progress')) {\n            const progressBar = document.createElement('div');\n            progressBar.className = 'scroll-progress';\n            progressBar.setAttribute('role', 'progressbar');\n            progressBar.setAttribute('aria-label', 'Progresso scroll');\n            progressBar.setAttribute('aria-valuemin', '0');\n            progressBar.setAttribute('aria-valuemax', '100');\n            \n            this.wrapper.appendChild(progressBar);\n            this.progressBar = progressBar;\n        }\n        \n        // Aggiorna su scroll\n        let ticking = false;\n        this.container.addEventListener('scroll', () => {\n            if (!ticking) {\n                requestAnimationFrame(() => {\n                    this.updateUI();\n                    ticking = false;\n                });\n                ticking = true;\n            }\n        }, this.supportsPassive ? { passive: true } : false);\n    }\n    \n    // Setup accessibilità\n    setupAccessibility() {\n        // ARIA labels\n        this.container.setAttribute('role', 'region');\n        this.container.setAttribute('aria-label', 'Contenuti scrollabili orizzontalmente');\n        \n        // Live region per annunci\n        const liveRegion = document.createElement('div');\n        liveRegion.className = 'sr-only';\n        liveRegion.setAttribute('role', 'status');\n        liveRegion.setAttribute('aria-live', 'polite');\n        liveRegion.setAttribute('aria-atomic', 'true');\n        liveRegion.style.cssText = `\n            position: absolute;\n            width: 1px;\n            height: 1px;\n            padding: 0;\n            margin: -1px;\n            overflow: hidden;\n            clip: rect(0,0,0,0);\n            white-space: nowrap;\n            border: 0;\n        `;\n        \n        this.wrapper.appendChild(liveRegion);\n        this.liveRegion = liveRegion;\n    }\n    \n    // Scroll fluido\n    smoothScroll(distance) {\n        if (this.supportsScrollBehavior) {\n            this.container.scrollBy({\n                left: distance,\n                behavior: 'smooth'\n            });\n        } else {\n            // Fallback animato\n            this.animateScroll(this.container.scrollLeft + distance);\n        }\n    }\n    \n    // Animazione scroll per fallback\n    animateScroll(target) {\n        const start = this.container.scrollLeft;\n        const distance = target - start;\n        const duration = 300;\n        let startTime = null;\n        \n        const animation = (currentTime) => {\n            if (!startTime) startTime = currentTime;\n            const elapsed = currentTime - startTime;\n            const progress = Math.min(elapsed / duration, 1);\n            \n            // Easing\n            const easeInOutQuad = progress < 0.5\n                ? 2 * progress * progress\n                : 1 - Math.pow(-2 * progress + 2, 2) / 2;\n            \n            this.container.scrollLeft = start + distance * easeInOutQuad;\n            \n            if (progress < 1) {\n                requestAnimationFrame(animation);\n            } else {\n                this.updateUI();\n            }\n        };\n        \n        requestAnimationFrame(animation);\n    }\n    \n    // Metodi di navigazione\n    scrollPrev() {\n        const scrollAmount = this.container.clientWidth * 0.8;\n        this.smoothScroll(-scrollAmount);\n        this.announce('Scorrimento a sinistra');\n    }\n    \n    scrollNext() {\n        const scrollAmount = this.container.clientWidth * 0.8;\n        this.smoothScroll(scrollAmount);\n        this.announce('Scorrimento a destra');\n    }\n    \n    scrollToStart() {\n        this.container.scrollTo({\n            left: 0,\n            behavior: this.supportsScrollBehavior ? 'smooth' : 'auto'\n        });\n        this.announce('Inizio dei contenuti');\n    }\n    \n    scrollToEnd() {\n        const maxScroll = this.container.scrollWidth - this.container.clientWidth;\n        this.container.scrollTo({\n            left: maxScroll,\n            behavior: this.supportsScrollBehavior ? 'smooth' : 'auto'\n        });\n        this.announce('Fine dei contenuti');\n    }\n    \n    // Aggiorna UI\n    updateUI() {\n        const scrollLeft = this.container.scrollLeft;\n        \n        // Calcola il gap tra le card (se usi gap in CSS)\n        const computedStyle = window.getComputedStyle(this.container);\n        const gap = parseFloat(computedStyle.gap) || 0;\n        \n        // Trova l'ultima card\n        const lastChild = this.container.lastElementChild;\n        const lastChildWidth = lastChild ? lastChild.offsetWidth : 0;\n        \n        // Calcola il maxScroll considerando l'ultima card e il padding\n        const maxScroll = this.container.scrollWidth - this.container.clientWidth;\n        const adjustedMaxScroll = Math.max(0, maxScroll - gap);\n        \n        // Aggiorna pulsanti con tolleranza\n        if (this.prevButton && this.nextButton) {\n            const tolerance = 5;\n            this.prevButton.disabled = scrollLeft <= tolerance;\n            this.nextButton.disabled = scrollLeft >= adjustedMaxScroll - tolerance;\n            \n            // Aggiorna ARIA\n            this.prevButton.setAttribute('aria-disabled', scrollLeft <= tolerance);\n            this.nextButton.setAttribute('aria-disabled', scrollLeft >= adjustedMaxScroll - tolerance);\n        }\n        \n        // Aggiorna progress bar\n        if (this.progressBar && adjustedMaxScroll > 0) {\n            const progress = Math.min(100, (scrollLeft / adjustedMaxScroll) * 100);\n            this.progressBar.style.width = `${progress}%`;\n            this.progressBar.setAttribute('aria-valuenow', Math.round(progress));\n        }\n    }\n    \n    // Annuncia a screen reader\n    announce(message) {\n        if (this.liveRegion) {\n            this.liveRegion.textContent = message;\n            // Reset dopo annuncio\n            setTimeout(() => {\n                this.liveRegion.textContent = '';\n            }, 1000);\n        }\n    }\n}\n\n// CSS da iniettare - Adattato per CSS Elementor esistente\nconst improvedStyles = `\n    <style id=\"improved-scroller-styles\">\n        /* Wrapper styles */\n        .elementor-scroller-wrapper {\n            position: relative;\n        }\n        \n        /* Nasconde scrollbar orizzontale su desktop mantenendo lo scroll */\n        .scrollable-container {\n            /* Firefox */\n            scrollbar-width: none;\n            \n            /* IE 10+ */\n            -ms-overflow-style: none;\n            \n            /* Aggiunge spazio per l'ultima card */\n            padding-right: 30px;\n            box-sizing: content-box;\n        }\n        \n        /* Compensa il padding per il primo elemento */\n        .scrollable-container > *:first-child {\n            margin-left: 20px;\n        }\n        \n        /* Fix per Elementor - previeni che tagli il contenuto */\n        .elementor-widget-container {\n            overflow: visible !important;\n        }\n        \n        /* Fix per container con gap CSS */\n        .scrollable-container[style*=\"gap\"] {\n            padding-right: 50px;\n        }\n        \n        /* Chrome, Safari, Opera, Edge */\n        .scrollable-container::-webkit-scrollbar {\n            width: 0 !important;\n            height: 0 !important;\n            display: none;\n        }\n        \n        .scrollable-container::-webkit-scrollbar-track {\n            background: transparent;\n        }\n        \n        .scrollable-container::-webkit-scrollbar-thumb {\n            background: transparent;\n            border: none;\n        }\n        \n        /* Supporto per browser più vecchi */\n        @supports not (scrollbar-width: none) {\n            .scrollable-container {\n                margin-bottom: -17px;\n                padding-bottom: 17px;\n            }\n        }\n        \n        /* Pulsanti navigazione */\n        .nav-button {\n            position: absolute;\n            top: 50%;\n            transform: translateY(-50%);\n            width: 48px;\n            height: 48px;\n            background: rgba(255, 255, 255, 0.95);\n            border: 1px solid #ddd;\n            border-radius: 50%;\n            cursor: pointer;\n            display: none;\n            align-items: center;\n            justify-content: center;\n            z-index: 10;\n            transition: all 0.3s ease;\n            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n            \n            /* Assicura che sia sopra il contenuto */\n            pointer-events: auto;\n        }\n        \n        .nav-button {\n            background: var(--e-global-color-primary);\n        }\n        \n        .nav-button svg {\n            width: 24px;\n            height: 24px;\n            color: #fff;\n        }\n        \n        .nav-button:hover:not(:disabled) {\n            background: var(--e-global-color-2de3d7d);\n            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n            transform: translateY(-50%) scale(1.1);\n        }\n        \n        .nav-button:active {\n            transform: translateY(-50%) scale(0.95);\n        }\n        \n        .nav-button:hover:not(:disabled) {\n            background: var(--e-global-color-2de3d7d);\n            border-color: var(--e-global-color-2de3d7d);\n        }\n        \n        .nav-button:active {\n            transform: translateY(-50%) scale(0.95);\n        }\n        \n        .nav-button:disabled {\n            opacity: 0.3;\n            cursor: not-allowed;\n        }\n        \n        .nav-button:disabled:hover {\n            transform: translateY(-50%);\n        }\n        \n        .nav-button:focus {\n            outline: 2px solid var(--e-global-color-primary, #0066cc);\n            outline-offset: 2px;\n        }\n        \n        .nav-prev {\n            left: 10px;\n        }\n        \n        .nav-next {\n            right: 10px;\n        }\n        \n        /* Mostra pulsanti su desktop */\n        @media (min-width: 1024px) {\n            .elementor-scroller-wrapper:hover .nav-button:not(:disabled) {\n                display: flex;\n            }\n            \n            .elementor-scroller-wrapper:focus-within .nav-button:not(:disabled) {\n                display: flex;\n            }\n        }\n        \n        /* Progress bar sottile */\n        .scroll-progress {\n            position: absolute;\n            bottom: 0;\n            left: 0;\n            height: 3px;\n            background: var(--e-global-color-primary, #0066cc);\n            transition: width 0.2s ease, opacity 0.3s ease;\n            pointer-events: none;\n            z-index: 5;\n            opacity: 0;\n            border-radius: 0 3px 3px 0;\n        }\n        \n        /* Mostra progress bar su hover/focus */\n        .elementor-scroller-wrapper:hover .scroll-progress,\n        .elementor-scroller-wrapper:focus-within .scroll-progress {\n            opacity: 0.7;\n        }\n        \n        /* Non sovrascriviamo cursor - già impostato nel CSS esistente */\n        \n        /* Focus migliore - solo se non già presente */\n        .scrollable-container:focus-visible {\n            outline: 2px solid var(--e-global-color-primary, #0066cc);\n            outline-offset: 2px;\n        }\n        \n        /* Supporta la classe keyboard-scrolling esistente */\n        .scrollable-container.keyboard-scrolling {\n            scroll-behavior: smooth !important;\n        }\n        \n        /* Screen reader only */\n        .sr-only {\n            position: absolute;\n            width: 1px;\n            height: 1px;\n            padding: 0;\n            margin: -1px;\n            overflow: hidden;\n            clip: rect(0,0,0,0);\n            white-space: nowrap;\n            border: 0;\n        }\n        \n        /* Indicatori di pagina opzionali */\n        .scroll-indicators {\n            display: flex;\n            justify-content: center;\n            gap: 8px;\n            margin-top: 16px;\n            padding: 8px;\n        }\n        \n        .scroll-indicator {\n            width: 8px;\n            height: 8px;\n            border-radius: 50%;\n            background: #ddd;\n            transition: all 0.3s ease;\n            cursor: pointer;\n            border: none;\n            padding: 0;\n        }\n        \n        .scroll-indicator:hover {\n            background: #999;\n            transform: scale(1.2);\n        }\n        \n        .scroll-indicator.active {\n            background: var(--e-global-color-primary, #333);\n            width: 24px;\n            border-radius: 4px;\n        }\n        \n        /* Supporto reduced motion */\n        @media (prefers-reduced-motion: reduce) {\n            * {\n                animation-duration: 0.01ms !important;\n                animation-iteration-count: 1 !important;\n                transition-duration: 0.01ms !important;\n            }\n            \n            .scrollable-container {\n                scroll-behavior: auto !important;\n            }\n            \n            .nav-button {\n                transition: none !important;\n            }\n            \n            .scroll-progress {\n                transition: none !important;\n            }\n        }\n        \n        /* Migliora contrasto per accessibilità */\n        @media (prefers-contrast: high) {\n            .nav-button {\n                background: #fff;\n                border: 2px solid #000;\n            }\n            \n            .nav-button:hover:not(:disabled) {\n                background: #000;\n                color: #fff;\n            }\n            \n            .nav-button:hover:not(:disabled) svg {\n                color: #fff;\n            }\n            \n            .scroll-progress {\n                background: #000;\n            }\n        }\n        \n        /* Dark mode support */\n        @media (prefers-color-scheme: dark) {\n            .nav-button {\n                background: var(--e-global-color-primary);\n                border-color: var(--e-global-color-primary);\n            }\n            \n            .nav-button svg {\n                color: #fff;\n            }\n            \n            .nav-button:hover:not(:disabled) {\n                background: var(--e-global-color-2de3d7d);\n                border-color: var(--e-global-color-2de3d7d);\n            }\n            \n            .scroll-indicator {\n                background: #555;\n            }\n            \n            .scroll-indicator:hover {\n                background: #777;\n            }\n            \n            .scroll-indicator.active {\n                background: #fff;\n            }\n        }\n    </style>\n`;\n\n// Inizializzazione\nfunction initImprovedScrollers() {\n    // Inietta stili se non presenti\n    if (!document.getElementById('improved-scroller-styles')) {\n        document.head.insertAdjacentHTML('beforeend', improvedStyles);\n    }\n    \n    // Trova tutti i container scrollabili\n    const containers = document.querySelectorAll('.scrollable-container');\n    \n    containers.forEach(container => {\n        // Skip se già inizializzato\n        if (container.hasAttribute('data-improved-scroller')) return;\n        \n        // Inizializza solo se c'è overflow orizzontale\n        if (container.scrollWidth > container.clientWidth) {\n            new ImprovedElementorScroller(container);\n            container.setAttribute('data-improved-scroller', 'true');\n        }\n    });\n}\n\n// Inizializza quando DOM è pronto\nif (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', initImprovedScrollers);\n} else {\n    initImprovedScrollers();\n}\n\n// Hook per Elementor\nif (typeof jQuery !== 'undefined') {\n    jQuery(window).on('elementor/frontend/init', function() {\n        if (window.elementorFrontend && window.elementorFrontend.hooks) {\n            elementorFrontend.hooks.addAction('frontend/element_ready/widget', function() {\n                setTimeout(initImprovedScrollers, 100);\n            });\n        }\n    });\n} else {\n    // Fallback observer per contenuti dinamici\n    const observer = new MutationObserver(() => {\n        initImprovedScrollers();\n    });\n    \n    observer.observe(document.body, {\n        childList: true,\n        subtree: true\n    });\n}\n\n// Re-inizializza su resize\nlet resizeTimeout;\nwindow.addEventListener('resize', () => {\n    clearTimeout(resizeTimeout);\n    resizeTimeout = setTimeout(initImprovedScrollers, 250);\n});\n\nconsole.log('Improved Elementor Scroller v2.0 loaded');","structuredPatch":[{"oldStart":430,"oldLines":6,"newStart":430,"newLines":31,"lines":["         }","     }","     ","+    // Verifica se un elemento è completamente visibile","+    isElementFullyVisible(element) {","+        const containerRect = this.container.getBoundingClientRect();","+        const elementRect = element.getBoundingClientRect();","+        ","+        return elementRect.left >= containerRect.left && ","+               elementRect.right <= containerRect.right;","+    }","+    ","+    // Assicura che l'ultima card sia visibile dopo lo scroll","+    ensureLastCardVisible() {","+        const lastCard = this.container.lastElementChild;","+        if (!lastCard) return;","+        ","+        if (!this.isElementFullyVisible(lastCard)) {","+            const containerRect = this.container.getBoundingClientRect();","+            const lastCardRect = lastCard.getBoundingClientRect();","+            const scrollAdjustment = lastCardRect.right - containerRect.right + 20;","+            ","+            if (scrollAdjustment > 0) {","+                this.container.scrollLeft += scrollAdjustment;","+            }","+        }","+    }","+","     // Annuncia a screen reader","     announce(message) {","         if (this.liveRegion) {"]}],"userModified":false,"replaceAll":false}}
{"parentUuid":"70d95b34-8cca-4d74-91f1-ec7aea00b338","isSidechain":false,"userType":"external","cwd":"/Users/disconnesso/Sites/villastuart.it","sessionId":"6d59d7ee-cfab-4065-8105-2d5b96fcc40d","version":"1.0.61","gitBranch":"main","message":{"id":"msg_01FHA3vnco9odtgnp2KPtUnU","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01KMCQ3JrPMmefbfN3rPEqqr","name":"TodoWrite","input":{"todos":[{"id":"1","content":"Add CSS padding solution for last card visibility","status":"completed","priority":"high"},{"id":"2","content":"Improve updateUI method with better maxScroll calculation","status":"completed","priority":"high"},{"id":"3","content":"Add methods to check element visibility and ensure last card is visible","status":"completed","priority":"high"},{"id":"4","content":"Enhance scrollNext method with card-based navigation","status":"in_progress","priority":"high"},{"id":"5","content":"Add scroll spacer solution as fallback","status":"pending","priority":"medium"}]}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":0,"cache_creation_input_tokens":10524,"cache_read_input_tokens":69354,"output_tokens":223,"service_tier":"standard"}},"requestId":"req_011CRau5Ri8ZtY9KFZhvJPtp","type":"assistant","uuid":"67bc6753-78ff-4720-a091-7450b57d548e","timestamp":"2025-07-29T07:15:37.182Z"}
{"parentUuid":"67bc6753-78ff-4720-a091-7450b57d548e","isSidechain":false,"userType":"external","cwd":"/Users/disconnesso/Sites/villastuart.it","sessionId":"6d59d7ee-cfab-4065-8105-2d5b96fcc40d","version":"1.0.61","gitBranch":"main","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01KMCQ3JrPMmefbfN3rPEqqr","type":"tool_result","content":"Todos have been modified successfully. Ensure that you continue to use the todo list to track your progress. Please proceed with the current tasks if applicable"}]},"uuid":"d666537d-d08f-4255-99f7-1f6850187331","timestamp":"2025-07-29T07:15:37.228Z","toolUseResult":{"oldTodos":[{"content":"Add CSS padding solution for last card visibility","status":"completed","priority":"high","id":"1"},{"content":"Improve updateUI method with better maxScroll calculation","status":"completed","priority":"high","id":"2"},{"content":"Add methods to check element visibility and ensure last card is visible","status":"in_progress","priority":"high","id":"3"},{"content":"Enhance scrollNext method with card-based navigation","status":"pending","priority":"high","id":"4"},{"content":"Add scroll spacer solution as fallback","status":"pending","priority":"medium","id":"5"}],"newTodos":[{"content":"Add CSS padding solution for last card visibility","status":"completed","priority":"high","id":"1"},{"content":"Improve updateUI method with better maxScroll calculation","status":"completed","priority":"high","id":"2"},{"content":"Add methods to check element visibility and ensure last card is visible","status":"completed","priority":"high","id":"3"},{"content":"Enhance scrollNext method with card-based navigation","status":"in_progress","priority":"high","id":"4"},{"content":"Add scroll spacer solution as fallback","status":"pending","priority":"medium","id":"5"}]}}
{"parentUuid":"d666537d-d08f-4255-99f7-1f6850187331","isSidechain":false,"userType":"external","cwd":"/Users/disconnesso/Sites/villastuart.it","sessionId":"6d59d7ee-cfab-4065-8105-2d5b96fcc40d","version":"1.0.61","gitBranch":"main","message":{"id":"msg_01FAsX8qjbu4H1jbdpJaWnYA","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01UA74UaVrPNrkzn8hxxyCdD","name":"Edit","input":{"file_path":"/Users/disconnesso/Sites/villastuart.it/wp-content/themes/hello-villa-stuart/assets/js/improved-scroller.js","old_string":"    scrollNext() {\n        const scrollAmount = this.container.clientWidth * 0.8;\n        this.smoothScroll(scrollAmount);\n        this.announce('Scorrimento a destra');\n    }","new_string":"    scrollNext() {\n        const cards = Array.from(this.container.children);\n        const containerRect = this.container.getBoundingClientRect();\n        \n        // Trova la prima card non completamente visibile\n        let targetCard = cards.find(card => {\n            const cardRect = card.getBoundingClientRect();\n            return cardRect.left > containerRect.left && !this.isElementFullyVisible(card);\n        });\n        \n        if (targetCard) {\n            // Scrolla fino alla card target\n            const targetPosition = targetCard.offsetLeft - this.container.offsetLeft;\n            this.container.scrollTo({\n                left: targetPosition,\n                behavior: this.supportsScrollBehavior ? 'smooth' : 'auto'\n            });\n        } else {\n            // Scroll standard se non ci sono card parzialmente visibili\n            const scrollAmount = this.container.clientWidth * 0.8;\n            this.smoothScroll(scrollAmount);\n        }\n        \n        // Assicura che l'ultima card sia visibile dopo lo scroll\n        setTimeout(() => this.ensureLastCardVisible(), 350);\n        \n        this.announce('Scorrimento a destra');\n    }"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":0,"cache_creation_input_tokens":493,"cache_read_input_tokens":79878,"output_tokens":469,"service_tier":"standard"}},"requestId":"req_011CRau63ShYXA47GGbDLsG5","type":"assistant","uuid":"327dd378-25da-4acd-abda-0d66c900a88e","timestamp":"2025-07-29T07:15:47.030Z"}
{"parentUuid":"327dd378-25da-4acd-abda-0d66c900a88e","isSidechain":false,"userType":"external","cwd":"/Users/disconnesso/Sites/villastuart.it","sessionId":"6d59d7ee-cfab-4065-8105-2d5b96fcc40d","version":"1.0.61","gitBranch":"main","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01UA74UaVrPNrkzn8hxxyCdD","type":"tool_result","content":"The file /Users/disconnesso/Sites/villastuart.it/wp-content/themes/hello-villa-stuart/assets/js/improved-scroller.js has been updated. Here's the result of running `cat -n` on a snippet of the edited file:\n     1→/**\n     2→ * Slider Orizzontale Migliorato per Elementor\n     3→ * Versione 2.0 - Ottimizzato per Desktop con Accessibilità\n     4→ */\n     5→\n     6→// Classe principale per gestire lo slider\n     7→class ImprovedElementorScroller {\n     8→    constructor(container) {\n     9→        this.container = container;\n    10→        this.wrapper = null;\n    11→        this.isScrolling = false;\n    12→        this.scrollTimeout = null;\n    13→        \n    14→        // Feature detection\n    15→        this.supportsPassive = this.checkPassiveSupport();\n    16→        this.supportsScrollBehavior = 'scrollBehavior' in document.documentElement.style;\n    17→        \n    18→        // Inizializza\n    19→        this.init();\n    20→    }\n    21→    \n    22→    // Check supporto passive listeners\n    23→    checkPassiveSupport() {\n    24→        let supportsPassive = false;\n    25→        try {\n    26→            const opts = Object.defineProperty({}, 'passive', {\n    27→                get: () => { supportsPassive = true; }\n    28→            });\n    29→            window.addEventListener('testPassive', null, opts);\n    30→            window.removeEventListener('testPassive', null, opts);\n    31→        } catch (e) {}\n    32→        return supportsPassive;\n    33→    }\n    34→    \n    35→    init() {\n    36→        // Crea wrapper per aggiungere controlli senza modificare HTML\n    37→        this.wrapContainer();\n    38→        \n    39→        // Setup features\n    40→        this.setupNavButtons();\n    41→        this.setupKeyboard();\n    42→        this.setupMouseWheel();\n    43→        this.setupTouch();\n    44→        this.setupScrollIndicator();\n    45→        this.setupAccessibility();\n    46→        \n    47→        // Aggiorna stato iniziale\n    48→        this.updateUI();\n    49→    }\n    50→    \n    51→    // Wrap container esistente per aggiungere controlli\n    52→    wrapContainer() {\n    53→        // Se già wrappato, esci\n    54→        if (this.container.parentElement.classList.contains('elementor-scroller-wrapper')) {\n    55→            this.wrapper = this.container.parentElement;\n    56→            return;\n    57→        }\n    58→        \n    59→        // Crea wrapper\n    60→        this.wrapper = document.createElement('div');\n    61→        this.wrapper.className = 'elementor-scroller-wrapper';\n    62→        this.wrapper.style.position = 'relative';\n    63→        \n    64→        // Inserisci wrapper\n    65→        this.container.parentNode.insertBefore(this.wrapper, this.container);\n    66→        this.wrapper.appendChild(this.container);\n    67→    }\n    68→    \n    69→    // Setup pulsanti navigazione\n    70→    setupNavButtons() {\n    71→        // Crea pulsanti solo se non esistono\n    72→        if (!this.wrapper.querySelector('.nav-button')) {\n    73→            // Pulsante precedente\n    74→            const prevButton = document.createElement('button');\n    75→            prevButton.className = 'nav-button nav-prev';\n    76→            prevButton.innerHTML = `\n    77→                <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n    78→                    <path d=\"M15 18l-6-6 6-6\"/>\n    79→                </svg>\n    80→            `;\n    81→            prevButton.setAttribute('aria-label', 'Scorri a sinistra');\n    82→            prevButton.addEventListener('click', () => this.scrollPrev());\n    83→            \n    84→            // Pulsante successivo\n    85→            const nextButton = document.createElement('button');\n    86→            nextButton.className = 'nav-button nav-next';\n    87→            nextButton.innerHTML = `\n    88→                <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n    89→                    <path d=\"M9 18l6-6-6-6\"/>\n    90→                </svg>\n    91→            `;\n    92→            nextButton.setAttribute('aria-label', 'Scorri a destra');\n    93→            nextButton.addEventListener('click', () => this.scrollNext());\n    94→            \n    95→            // Aggiungi al wrapper\n    96→            this.wrapper.appendChild(prevButton);\n    97→            this.wrapper.appendChild(nextButton);\n    98→            \n    99→            // Store references\n   100→            this.prevButton = prevButton;\n   101→            this.nextButton = nextButton;\n   102→        }\n   103→    }\n   104→    \n   105→    // Setup tastiera migliorato\n   106→    setupKeyboard() {\n   107→        this.container.addEventListener('keydown', (e) => {\n   108→            const scrollAmount = this.container.clientWidth * 0.8;\n   109→            let handled = true;\n   110→            \n   111→            // Aggiungi classe per smooth scroll da tastiera\n   112→            this.container.classList.add('keyboard-scrolling');\n   113→            \n   114→            switch(e.key) {\n   115→                case 'ArrowLeft':\n   116→                    this.smoothScroll(-scrollAmount);\n   117→                    break;\n   118→                case 'ArrowRight':\n   119→                    this.smoothScroll(scrollAmount);\n   120→                    break;\n   121→                case 'Home':\n   122→                    this.scrollToStart();\n   123→                    break;\n   124→                case 'End':\n   125→                    this.scrollToEnd();\n   126→                    break;\n   127→                default:\n   128→                    handled = false;\n   129→            }\n   130→            \n   131→            if (handled) {\n   132→                e.preventDefault();\n   133→                // Rimuovi classe dopo animazione\n   134→                setTimeout(() => {\n   135→                    this.container.classList.remove('keyboard-scrolling');\n   136→                }, 400);\n   137→            } else {\n   138→                this.container.classList.remove('keyboard-scrolling');\n   139→            }\n   140→        });\n   141→    }\n   142→    \n   143→    // Setup mouse wheel - MIGLIORAMENTO CHIAVE\n   144→    setupMouseWheel() {\n   145→        let accumulatedDelta = 0;\n   146→        let wheelTimeout;\n   147→        \n   148→        const wheelHandler = (e) => {\n   149→            // Solo se container è in hover o focus\n   150→            if (!this.container.matches(':hover, :focus-within')) return;\n   151→            \n   152→            e.preventDefault();\n   153→            \n   154→            // Accumula piccoli delta per scroll più fluido\n   155→            accumulatedDelta += e.deltaY;\n   156→            \n   157→            clearTimeout(wheelTimeout);\n   158→            wheelTimeout = setTimeout(() => {\n   159→                if (Math.abs(accumulatedDelta) > 10) {\n   160→                    // Normalizza e applica scroll\n   161→                    const scrollAmount = Math.sign(accumulatedDelta) * Math.min(Math.abs(accumulatedDelta), 300);\n   162→                    this.smoothScroll(scrollAmount);\n   163→                }\n   164→                accumulatedDelta = 0;\n   165→            }, 50);\n   166→        };\n   167→        \n   168→        // Aggiungi listener con passive false\n   169→        this.container.addEventListener('wheel', wheelHandler, \n   170→            this.supportsPassive ? { passive: false } : false\n   171→        );\n   172→    }\n   173→    \n   174→    // Setup touch con momentum migliorato\n   175→    setupTouch() {\n   176→        let startX = 0;\n   177→        let scrollLeft = 0;\n   178→        let isDragging = false;\n   179→        let animationId = null;\n   180→        let velocity = 0;\n   181→        let lastX = 0;\n   182→        let lastTime = 0;\n   183→        \n   184→        const startDragging = (pageX) => {\n   185→            isDragging = true;\n   186→            startX = pageX;\n   187→            lastX = pageX;\n   188→            scrollLeft = this.container.scrollLeft;\n   189→            lastTime = Date.now();\n   190→            velocity = 0;\n   191→            \n   192→            // Cancella animazioni\n   193→            if (animationId) {\n   194→                cancelAnimationFrame(animationId);\n   195→            }\n   196→            \n   197→            // La classe 'active' è già nel CSS esistente per cursor grabbing\n   198→            this.container.classList.add('active');\n   199→        };\n   200→        \n   201→        const drag = (pageX) => {\n   202→            if (!isDragging) return;\n   203→            \n   204→            const currentTime = Date.now();\n   205→            const timeDelta = currentTime - lastTime;\n   206→            const distance = pageX - lastX;\n   207→            \n   208→            // Calcola velocità\n   209→            if (timeDelta > 0) {\n   210→                velocity = distance / timeDelta * 16; // Normalizza a 60fps\n   211→            }\n   212→            \n   213→            const walk = (pageX - startX) * 1.5;\n   214→            this.container.scrollLeft = scrollLeft - walk;\n   215→            \n   216→            lastX = pageX;\n   217→            lastTime = currentTime;\n   218→        };\n   219→        \n   220→        const stopDragging = () => {\n   221→            if (!isDragging) return;\n   222→            \n   223→            isDragging = false;\n   224→            this.container.classList.remove('active');\n   225→            \n   226→            // Applica momentum se c'è velocità\n   227→            if (Math.abs(velocity) > 2) {\n   228→                const deceleration = 0.95;\n   229→                \n   230→                const animate = () => {\n   231→                    if (Math.abs(velocity) > 0.5) {\n   232→                        this.container.scrollLeft -= velocity;\n   233→                        velocity *= deceleration;\n   234→                        animationId = requestAnimationFrame(animate);\n   235→                    } else {\n   236→                        this.updateUI();\n   237→                    }\n   238→                };\n   239→                \n   240→                animate();\n   241→            } else {\n   242→                this.updateUI();\n   243→            }\n   244→        };\n   245→        \n   246→        // Mouse events\n   247→        this.container.addEventListener('mousedown', (e) => {\n   248→            startDragging(e.pageX);\n   249→        });\n   250→        \n   251→        document.addEventListener('mousemove', (e) => {\n   252→            drag(e.pageX);\n   253→        });\n   254→        \n   255→        document.addEventListener('mouseup', stopDragging);\n   256→        \n   257→        // Touch events\n   258→        this.container.addEventListener('touchstart', (e) => {\n   259→            startDragging(e.touches[0].pageX);\n   260→        }, this.supportsPassive ? { passive: true } : false);\n   261→        \n   262→        this.container.addEventListener('touchmove', (e) => {\n   263→            drag(e.touches[0].pageX);\n   264→        }, this.supportsPassive ? { passive: true } : false);\n   265→        \n   266→        this.container.addEventListener('touchend', stopDragging);\n   267→        this.container.addEventListener('touchcancel', stopDragging);\n   268→    }\n   269→    \n   270→    // Setup indicatore di scroll\n   271→    setupScrollIndicator() {\n   272→        // Crea progress bar solo se non nascosta da design\n   273→        if (!this.wrapper.classList.contains('hide-progress')) {\n   274→            const progressBar = document.createElement('div');\n   275→            progressBar.className = 'scroll-progress';\n   276→            progressBar.setAttribute('role', 'progressbar');\n   277→            progressBar.setAttribute('aria-label', 'Progresso scroll');\n   278→            progressBar.setAttribute('aria-valuemin', '0');\n   279→            progressBar.setAttribute('aria-valuemax', '100');\n   280→            \n   281→            this.wrapper.appendChild(progressBar);\n   282→            this.progressBar = progressBar;\n   283→        }\n   284→        \n   285→        // Aggiorna su scroll\n   286→        let ticking = false;\n   287→        this.container.addEventListener('scroll', () => {\n   288→            if (!ticking) {\n   289→                requestAnimationFrame(() => {\n   290→                    this.updateUI();\n   291→                    ticking = false;\n   292→                });\n   293→                ticking = true;\n   294→            }\n   295→        }, this.supportsPassive ? { passive: true } : false);\n   296→    }\n   297→    \n   298→    // Setup accessibilità\n   299→    setupAccessibility() {\n   300→        // ARIA labels\n   301→        this.container.setAttribute('role', 'region');\n   302→        this.container.setAttribute('aria-label', 'Contenuti scrollabili orizzontalmente');\n   303→        \n   304→        // Live region per annunci\n   305→        const liveRegion = document.createElement('div');\n   306→        liveRegion.className = 'sr-only';\n   307→        liveRegion.setAttribute('role', 'status');\n   308→        liveRegion.setAttribute('aria-live', 'polite');\n   309→        liveRegion.setAttribute('aria-atomic', 'true');\n   310→        liveRegion.style.cssText = `\n   311→            position: absolute;\n   312→            width: 1px;\n   313→            height: 1px;\n   314→            padding: 0;\n   315→            margin: -1px;\n   316→            overflow: hidden;\n   317→            clip: rect(0,0,0,0);\n   318→            white-space: nowrap;\n   319→            border: 0;\n   320→        `;\n   321→        \n   322→        this.wrapper.appendChild(liveRegion);\n   323→        this.liveRegion = liveRegion;\n   324→    }\n   325→    \n   326→    // Scroll fluido\n   327→    smoothScroll(distance) {\n   328→        if (this.supportsScrollBehavior) {\n   329→            this.container.scrollBy({\n   330→                left: distance,\n   331→                behavior: 'smooth'\n   332→            });\n   333→        } else {\n   334→            // Fallback animato\n   335→            this.animateScroll(this.container.scrollLeft + distance);\n   336→        }\n   337→    }\n   338→    \n   339→    // Animazione scroll per fallback\n   340→    animateScroll(target) {\n   341→        const start = this.container.scrollLeft;\n   342→        const distance = target - start;\n   343→        const duration = 300;\n   344→        let startTime = null;\n   345→        \n   346→        const animation = (currentTime) => {\n   347→            if (!startTime) startTime = currentTime;\n   348→            const elapsed = currentTime - startTime;\n   349→            const progress = Math.min(elapsed / duration, 1);\n   350→            \n   351→            // Easing\n   352→            const easeInOutQuad = progress < 0.5\n   353→                ? 2 * progress * progress\n   354→                : 1 - Math.pow(-2 * progress + 2, 2) / 2;\n   355→            \n   356→            this.container.scrollLeft = start + distance * easeInOutQuad;\n   357→            \n   358→            if (progress < 1) {\n   359→                requestAnimationFrame(animation);\n   360→            } else {\n   361→                this.updateUI();\n   362→            }\n   363→        };\n   364→        \n   365→        requestAnimationFrame(animation);\n   366→    }\n   367→    \n   368→    // Metodi di navigazione\n   369→    scrollPrev() {\n   370→        const scrollAmount = this.container.clientWidth * 0.8;\n   371→        this.smoothScroll(-scrollAmount);\n   372→        this.announce('Scorrimento a sinistra');\n   373→    }\n   374→    \n   375→    scrollNext() {\n   376→        const cards = Array.from(this.container.children);\n   377→        const containerRect = this.container.getBoundingClientRect();\n   378→        \n   379→        // Trova la prima card non completamente visibile\n   380→        let targetCard = cards.find(card => {\n   381→            const cardRect = card.getBoundingClientRect();\n   382→            return cardRect.left > containerRect.left && !this.isElementFullyVisible(card);\n   383→        });\n   384→        \n   385→        if (targetCard) {\n   386→            // Scrolla fino alla card target\n   387→            const targetPosition = targetCard.offsetLeft - this.container.offsetLeft;\n   388→            this.container.scrollTo({\n   389→                left: targetPosition,\n   390→                behavior: this.supportsScrollBehavior ? 'smooth' : 'auto'\n   391→            });\n   392→        } else {\n   393→            // Scroll standard se non ci sono card parzialmente visibili\n   394→            const scrollAmount = this.container.clientWidth * 0.8;\n   395→            this.smoothScroll(scrollAmount);\n   396→        }\n   397→        \n   398→        // Assicura che l'ultima card sia visibile dopo lo scroll\n   399→        setTimeout(() => this.ensureLastCardVisible(), 350);\n   400→        \n   401→        this.announce('Scorrimento a destra');\n   402→    }\n   403→    \n   404→    scrollToStart() {\n   405→        this.container.scrollTo({\n   406→            left: 0,\n   407→            behavior: this.supportsScrollBehavior ? 'smooth' : 'auto'\n   408→        });\n   409→        this.announce('Inizio dei contenuti');\n   410→    }\n   411→    \n   412→    scrollToEnd() {\n   413→        const maxScroll = this.container.scrollWidth - this.container.clientWidth;\n   414→        this.container.scrollTo({\n   415→            left: maxScroll,\n   416→            behavior: this.supportsScrollBehavior ? 'smooth' : 'auto'\n   417→        });\n   418→        this.announce('Fine dei contenuti');\n   419→    }\n   420→    \n   421→    // Aggiorna UI\n   422→    updateUI() {\n   423→        const scrollLeft = this.container.scrollLeft;\n   424→        \n   425→        // Calcola il gap tra le card (se usi gap in CSS)\n   426→        const computedStyle = window.getComputedStyle(this.container);\n   427→        const gap = parseFloat(computedStyle.gap) || 0;\n   428→        \n   429→        // Trova l'ultima card\n   430→        const lastChild = this.container.lastElementChild;\n   431→        const lastChildWidth = lastChild ? lastChild.offsetWidth : 0;\n   432→        \n   433→        // Calcola il maxScroll considerando l'ultima card e il padding\n   434→        const maxScroll = this.container.scrollWidth - this.container.clientWidth;\n   435→        const adjustedMaxScroll = Math.max(0, maxScroll - gap);\n   436→        \n   437→        // Aggiorna pulsanti con tolleranza\n   438→        if (this.prevButton && this.nextButton) {\n   439→            const tolerance = 5;\n   440→            this.prevButton.disabled = scrollLeft <= tolerance;\n   441→            this.nextButton.disabled = scrollLeft >= adjustedMaxScroll - tolerance;\n   442→            \n   443→            // Aggiorna ARIA\n   444→            this.prevButton.setAttribute('aria-disabled', scrollLeft <= tolerance);\n   445→            this.nextButton.setAttribute('aria-disabled', scrollLeft >= adjustedMaxScroll - tolerance);\n   446→        }\n   447→        \n   448→        // Aggiorna progress bar\n   449→        if (this.progressBar && adjustedMaxScroll > 0) {\n   450→            const progress = Math.min(100, (scrollLeft / adjustedMaxScroll) * 100);\n   451→            this.progressBar.style.width = `${progress}%`;\n   452→            this.progressBar.setAttribute('aria-valuenow', Math.round(progress));\n   453→        }\n   454→    }\n   455→    \n   456→    // Verifica se un elemento è completamente visibile\n   457→    isElementFullyVisible(element) {\n   458→        const containerRect = this.container.getBoundingClientRect();\n   459→        const elementRect = element.getBoundingClientRect();\n   460→        \n   461→        return elementRect.left >= containerRect.left && \n   462→               elementRect.right <= containerRect.right;\n   463→    }\n   464→    \n   465→    // Assicura che l'ultima card sia visibile dopo lo scroll\n   466→    ensureLastCardVisible() {\n   467→        const lastCard = this.container.lastElementChild;\n   468→        if (!lastCard) return;\n   469→        \n   470→        if (!this.isElementFullyVisible(lastCard)) {\n   471→            const containerRect = this.container.getBoundingClientRect();\n   472→            const lastCardRect = lastCard.getBoundingClientRect();\n   473→            const scrollAdjustment = lastCardRect.right - containerRect.right + 20;\n   474→            \n   475→            if (scrollAdjustment > 0) {\n   476→                this.container.scrollLeft += scrollAdjustment;\n   477→            }\n   478→        }\n   479→    }\n   480→\n   481→    // Annuncia a screen reader\n   482→    announce(message) {\n   483→        if (this.liveRegion) {\n   484→            this.liveRegion.textContent = message;\n   485→            // Reset dopo annuncio\n   486→            setTimeout(() => {\n   487→                this.liveRegion.textContent = '';\n   488→            }, 1000);\n   489→        }\n   490→    }\n   491→}\n   492→\n   493→// CSS da iniettare - Adattato per CSS Elementor esistente\n   494→const improvedStyles = `\n   495→    <style id=\"improved-scroller-styles\">\n   496→        /* Wrapper styles */\n   497→        .elementor-scroller-wrapper {\n   498→            position: relative;\n   499→        }\n   500→        \n   501→        /* Nasconde scrollbar orizzontale su desktop mantenendo lo scroll */\n   502→        .scrollable-container {\n   503→            /* Firefox */\n   504→            scrollbar-width: none;\n   505→            \n   506→            /* IE 10+ */\n   507→            -ms-overflow-style: none;\n   508→            \n   509→            /* Aggiunge spazio per l'ultima card */\n   510→            padding-right: 30px;\n   511→            box-sizing: content-box;\n   512→        }\n   513→        \n   514→        /* Compensa il padding per il primo elemento */\n   515→        .scrollable-container > *:first-child {\n   516→            margin-left: 20px;\n   517→        }\n   518→        \n   519→        /* Fix per Elementor - previeni che tagli il contenuto */\n   520→        .elementor-widget-container {\n   521→            overflow: visible !important;\n   522→        }\n   523→        \n   524→        /* Fix per container con gap CSS */\n   525→        .scrollable-container[style*=\"gap\"] {\n   526→            padding-right: 50px;\n   527→        }\n   528→        \n   529→        /* Chrome, Safari, Opera, Edge */\n   530→        .scrollable-container::-webkit-scrollbar {\n   531→            width: 0 !important;\n   532→            height: 0 !important;\n   533→            display: none;\n   534→        }\n   535→        \n   536→        .scrollable-container::-webkit-scrollbar-track {\n   537→            background: transparent;\n   538→        }\n   539→        \n   540→        .scrollable-container::-webkit-scrollbar-thumb {\n   541→            background: transparent;\n   542→            border: none;\n   543→        }\n   544→        \n   545→        /* Supporto per browser più vecchi */\n   546→        @supports not (scrollbar-width: none) {\n   547→            .scrollable-container {\n   548→                margin-bottom: -17px;\n   549→                padding-bottom: 17px;\n   550→            }\n   551→        }\n   552→        \n   553→        /* Pulsanti navigazione */\n   554→        .nav-button {\n   555→            position: absolute;\n   556→            top: 50%;\n   557→            transform: translateY(-50%);\n   558→            width: 48px;\n   559→            height: 48px;\n   560→            background: rgba(255, 255, 255, 0.95);\n   561→            border: 1px solid #ddd;\n   562→            border-radius: 50%;\n   563→            cursor: pointer;\n   564→            display: none;\n   565→            align-items: center;\n   566→            justify-content: center;\n   567→            z-index: 10;\n   568→            transition: all 0.3s ease;\n   569→            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n   570→            \n   571→            /* Assicura che sia sopra il contenuto */\n   572→            pointer-events: auto;\n   573→        }\n   574→        \n   575→        .nav-button {\n   576→            background: var(--e-global-color-primary);\n   577→        }\n   578→        \n   579→        .nav-button svg {\n   580→            width: 24px;\n   581→            height: 24px;\n   582→            color: #fff;\n   583→        }\n   584→        \n   585→        .nav-button:hover:not(:disabled) {\n   586→            background: var(--e-global-color-2de3d7d);\n   587→            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n   588→            transform: translateY(-50%) scale(1.1);\n   589→        }\n   590→        \n   591→        .nav-button:active {\n   592→            transform: translateY(-50%) scale(0.95);\n   593→        }\n   594→        \n   595→        .nav-button:hover:not(:disabled) {\n   596→            background: var(--e-global-color-2de3d7d);\n   597→            border-color: var(--e-global-color-2de3d7d);\n   598→        }\n   599→        \n   600→        .nav-button:active {\n   601→            transform: translateY(-50%) scale(0.95);\n   602→        }\n   603→        \n   604→        .nav-button:disabled {\n   605→            opacity: 0.3;\n   606→            cursor: not-allowed;\n   607→        }\n   608→        \n   609→        .nav-button:disabled:hover {\n   610→            transform: translateY(-50%);\n   611→        }\n   612→        \n   613→        .nav-button:focus {\n   614→            outline: 2px solid var(--e-global-color-primary, #0066cc);\n   615→            outline-offset: 2px;\n   616→        }\n   617→        \n   618→        .nav-prev {\n   619→            left: 10px;\n   620→        }\n   621→        \n   622→        .nav-next {\n   623→            right: 10px;\n   624→        }\n   625→        \n   626→        /* Mostra pulsanti su desktop */\n   627→        @media (min-width: 1024px) {\n   628→            .elementor-scroller-wrapper:hover .nav-button:not(:disabled) {\n   629→                display: flex;\n   630→            }\n   631→            \n   632→            .elementor-scroller-wrapper:focus-within .nav-button:not(:disabled) {\n   633→                display: flex;\n   634→            }\n   635→        }\n   636→        \n   637→        /* Progress bar sottile */\n   638→        .scroll-progress {\n   639→            position: absolute;\n   640→            bottom: 0;\n   641→            left: 0;\n   642→            height: 3px;\n   643→            background: var(--e-global-color-primary, #0066cc);\n   644→            transition: width 0.2s ease, opacity 0.3s ease;\n   645→            pointer-events: none;\n   646→            z-index: 5;\n   647→            opacity: 0;\n   648→            border-radius: 0 3px 3px 0;\n   649→        }\n   650→        \n   651→        /* Mostra progress bar su hover/focus */\n   652→        .elementor-scroller-wrapper:hover .scroll-progress,\n   653→        .elementor-scroller-wrapper:focus-within .scroll-progress {\n   654→            opacity: 0.7;\n   655→        }\n   656→        \n   657→        /* Non sovrascriviamo cursor - già impostato nel CSS esistente */\n   658→        \n   659→        /* Focus migliore - solo se non già presente */\n   660→        .scrollable-container:focus-visible {\n   661→            outline: 2px solid var(--e-global-color-primary, #0066cc);\n   662→            outline-offset: 2px;\n   663→        }\n   664→        \n   665→        /* Supporta la classe keyboard-scrolling esistente */\n   666→        .scrollable-container.keyboard-scrolling {\n   667→            scroll-behavior: smooth !important;\n   668→        }\n   669→        \n   670→        /* Screen reader only */\n   671→        .sr-only {\n   672→            position: absolute;\n   673→            width: 1px;\n   674→            height: 1px;\n   675→            padding: 0;\n   676→            margin: -1px;\n   677→            overflow: hidden;\n   678→            clip: rect(0,0,0,0);\n   679→            white-space: nowrap;\n   680→            border: 0;\n   681→        }\n   682→        \n   683→        /* Indicatori di pagina opzionali */\n   684→        .scroll-indicators {\n   685→            display: flex;\n   686→            justify-content: center;\n   687→            gap: 8px;\n   688→            margin-top: 16px;\n   689→            padding: 8px;\n   690→        }\n   691→        \n   692→        .scroll-indicator {\n   693→            width: 8px;\n   694→            height: 8px;\n   695→            border-radius: 50%;\n   696→            background: #ddd;\n   697→            transition: all 0.3s ease;\n   698→            cursor: pointer;\n   699→            border: none;\n   700→            padding: 0;\n   701→        }\n   702→        \n   703→        .scroll-indicator:hover {\n   704→            background: #999;\n   705→            transform: scale(1.2);\n   706→        }\n   707→        \n   708→        .scroll-indicator.active {\n   709→            background: var(--e-global-color-primary, #333);\n   710→            width: 24px;\n   711→            border-radius: 4px;\n   712→        }\n   713→        \n   714→        /* Supporto reduced motion */\n   715→        @media (prefers-reduced-motion: reduce) {\n   716→            * {\n   717→                animation-duration: 0.01ms !important;\n   718→                animation-iteration-count: 1 !important;\n   719→                transition-duration: 0.01ms !important;\n   720→            }\n   721→            \n   722→            .scrollable-container {\n   723→                scroll-behavior: auto !important;\n   724→            }\n   725→            \n   726→            .nav-button {\n   727→                transition: none !important;\n   728→            }\n   729→            \n   730→            .scroll-progress {\n   731→                transition: none !important;\n   732→            }\n   733→        }\n   734→        \n   735→        /* Migliora contrasto per accessibilità */\n   736→        @media (prefers-contrast: high) {\n   737→            .nav-button {\n   738→                background: #fff;\n   739→                border: 2px solid #000;\n   740→            }\n   741→            \n   742→            .nav-button:hover:not(:disabled) {\n   743→                background: #000;\n   744→                color: #fff;\n   745→            }\n   746→            \n   747→            .nav-button:hover:not(:disabled) svg {\n   748→                color: #fff;\n   749→            }\n   750→            \n   751→            .scroll-progress {\n   752→                background: #000;\n   753→            }\n   754→        }\n   755→        \n   756→        /* Dark mode support */\n   757→        @media (prefers-color-scheme: dark) {\n   758→            .nav-button {\n   759→                background: var(--e-global-color-primary);\n   760→                border-color: var(--e-global-color-primary);\n   761→            }\n   762→            \n   763→            .nav-button svg {\n   764→                color: #fff;\n   765→            }\n   766→            \n   767→            .nav-button:hover:not(:disabled) {\n   768→                background: var(--e-global-color-2de3d7d);\n   769→                border-color: var(--e-global-color-2de3d7d);\n   770→            }\n   771→            \n   772→            .scroll-indicator {\n   773→                background: #555;\n   774→            }\n   775→            \n   776→            .scroll-indicator:hover {\n   777→                background: #777;\n   778→            }\n   779→            \n   780→            .scroll-indicator.active {\n   781→                background: #fff;\n   782→            }\n   783→        }\n   784→    </style>\n   785→`;\n   786→\n   787→// Inizializzazione\n   788→function initImprovedScrollers() {\n   789→    // Inietta stili se non presenti\n   790→    if (!document.getElementById('improved-scroller-styles')) {\n   791→        document.head.insertAdjacentHTML('beforeend', improvedStyles);\n   792→    }\n   793→    \n   794→    // Trova tutti i container scrollabili\n   795→    const containers = document.querySelectorAll('.scrollable-container');\n   796→    \n   797→    containers.forEach(container => {\n   798→        // Skip se già inizializzato\n   799→        if (container.hasAttribute('data-improved-scroller')) return;\n   800→        \n   801→        // Inizializza solo se c'è overflow orizzontale\n   802→        if (container.scrollWidth > container.clientWidth) {\n   803→            new ImprovedElementorScroller(container);\n   804→            container.setAttribute('data-improved-scroller', 'true');\n   805→        }\n   806→    });\n   807→}\n   808→\n   809→// Inizializza quando DOM è pronto\n   810→if (document.readyState === 'loading') {\n   811→    document.addEventListener('DOMContentLoaded', initImprovedScrollers);\n   812→} else {\n   813→    initImprovedScrollers();\n   814→}\n   815→\n   816→// Hook per Elementor\n   817→if (typeof jQuery !== 'undefined') {\n   818→    jQuery(window).on('elementor/frontend/init', function() {\n   819→        if (window.elementorFrontend && window.elementorFrontend.hooks) {\n   820→            elementorFrontend.hooks.addAction('frontend/element_ready/widget', function() {\n   821→                setTimeout(initImprovedScrollers, 100);\n   822→            });\n   823→        }\n   824→    });\n   825→} else {\n   826→    // Fallback observer per contenuti dinamici\n   827→    const observer = new MutationObserver(() => {\n   828→        initImprovedScrollers();\n   829→    });\n   830→    \n   831→    observer.observe(document.body, {\n   832→        childList: true,\n   833→        subtree: true\n   834→    });\n   835→}\n   836→\n   837→// Re-inizializza su resize\n   838→let resizeTimeout;\n   839→window.addEventListener('resize', () => {\n   840→    clearTimeout(resizeTimeout);\n   841→    resizeTimeout = setTimeout(initImprovedScrollers, 250);\n   842→});\n   843→\n   844→console.log('Improved Elementor Scroller v2.0 loaded');"}]},"uuid":"d962f4f8-ad28-450a-9b62-47cf83079a80","timestamp":"2025-07-29T07:15:50.190Z","toolUseResult":{"filePath":"/Users/disconnesso/Sites/villastuart.it/wp-content/themes/hello-villa-stuart/assets/js/improved-scroller.js","oldString":"/**\n * Slider Orizzontale Migliorato per Elementor\n * Versione 2.0 - Ottimizzato per Desktop con Accessibilità\n */\n\n// Classe principale per gestire lo slider\nclass ImprovedElementorScroller {\n    constructor(container) {\n        this.container = container;\n        this.wrapper = null;\n        this.isScrolling = false;\n        this.scrollTimeout = null;\n        \n        // Feature detection\n        this.supportsPassive = this.checkPassiveSupport();\n        this.supportsScrollBehavior = 'scrollBehavior' in document.documentElement.style;\n        \n        // Inizializza\n        this.init();\n    }\n    \n    // Check supporto passive listeners\n    checkPassiveSupport() {\n        let supportsPassive = false;\n        try {\n            const opts = Object.defineProperty({}, 'passive', {\n                get: () => { supportsPassive = true; }\n            });\n            window.addEventListener('testPassive', null, opts);\n            window.removeEventListener('testPassive', null, opts);\n        } catch (e) {}\n        return supportsPassive;\n    }\n    \n    init() {\n        // Crea wrapper per aggiungere controlli senza modificare HTML\n        this.wrapContainer();\n        \n        // Setup features\n        this.setupNavButtons();\n        this.setupKeyboard();\n        this.setupMouseWheel();\n        this.setupTouch();\n        this.setupScrollIndicator();\n        this.setupAccessibility();\n        \n        // Aggiorna stato iniziale\n        this.updateUI();\n    }\n    \n    // Wrap container esistente per aggiungere controlli\n    wrapContainer() {\n        // Se già wrappato, esci\n        if (this.container.parentElement.classList.contains('elementor-scroller-wrapper')) {\n            this.wrapper = this.container.parentElement;\n            return;\n        }\n        \n        // Crea wrapper\n        this.wrapper = document.createElement('div');\n        this.wrapper.className = 'elementor-scroller-wrapper';\n        this.wrapper.style.position = 'relative';\n        \n        // Inserisci wrapper\n        this.container.parentNode.insertBefore(this.wrapper, this.container);\n        this.wrapper.appendChild(this.container);\n    }\n    \n    // Setup pulsanti navigazione\n    setupNavButtons() {\n        // Crea pulsanti solo se non esistono\n        if (!this.wrapper.querySelector('.nav-button')) {\n            // Pulsante precedente\n            const prevButton = document.createElement('button');\n            prevButton.className = 'nav-button nav-prev';\n            prevButton.innerHTML = `\n                <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                    <path d=\"M15 18l-6-6 6-6\"/>\n                </svg>\n            `;\n            prevButton.setAttribute('aria-label', 'Scorri a sinistra');\n            prevButton.addEventListener('click', () => this.scrollPrev());\n            \n            // Pulsante successivo\n            const nextButton = document.createElement('button');\n            nextButton.className = 'nav-button nav-next';\n            nextButton.innerHTML = `\n                <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                    <path d=\"M9 18l6-6-6-6\"/>\n                </svg>\n            `;\n            nextButton.setAttribute('aria-label', 'Scorri a destra');\n            nextButton.addEventListener('click', () => this.scrollNext());\n            \n            // Aggiungi al wrapper\n            this.wrapper.appendChild(prevButton);\n            this.wrapper.appendChild(nextButton);\n            \n            // Store references\n            this.prevButton = prevButton;\n            this.nextButton = nextButton;\n        }\n    }\n    \n    // Setup tastiera migliorato\n    setupKeyboard() {\n        this.container.addEventListener('keydown', (e) => {\n            const scrollAmount = this.container.clientWidth * 0.8;\n            let handled = true;\n            \n            // Aggiungi classe per smooth scroll da tastiera\n            this.container.classList.add('keyboard-scrolling');\n            \n            switch(e.key) {\n                case 'ArrowLeft':\n                    this.smoothScroll(-scrollAmount);\n                    break;\n                case 'ArrowRight':\n                    this.smoothScroll(scrollAmount);\n                    break;\n                case 'Home':\n                    this.scrollToStart();\n                    break;\n                case 'End':\n                    this.scrollToEnd();\n                    break;\n                default:\n                    handled = false;\n            }\n            \n            if (handled) {\n                e.preventDefault();\n                // Rimuovi classe dopo animazione\n                setTimeout(() => {\n                    this.container.classList.remove('keyboard-scrolling');\n                }, 400);\n            } else {\n                this.container.classList.remove('keyboard-scrolling');\n            }\n        });\n    }\n    \n    // Setup mouse wheel - MIGLIORAMENTO CHIAVE\n    setupMouseWheel() {\n        let accumulatedDelta = 0;\n        let wheelTimeout;\n        \n        const wheelHandler = (e) => {\n            // Solo se container è in hover o focus\n            if (!this.container.matches(':hover, :focus-within')) return;\n            \n            e.preventDefault();\n            \n            // Accumula piccoli delta per scroll più fluido\n            accumulatedDelta += e.deltaY;\n            \n            clearTimeout(wheelTimeout);\n            wheelTimeout = setTimeout(() => {\n                if (Math.abs(accumulatedDelta) > 10) {\n                    // Normalizza e applica scroll\n                    const scrollAmount = Math.sign(accumulatedDelta) * Math.min(Math.abs(accumulatedDelta), 300);\n                    this.smoothScroll(scrollAmount);\n                }\n                accumulatedDelta = 0;\n            }, 50);\n        };\n        \n        // Aggiungi listener con passive false\n        this.container.addEventListener('wheel', wheelHandler, \n            this.supportsPassive ? { passive: false } : false\n        );\n    }\n    \n    // Setup touch con momentum migliorato\n    setupTouch() {\n        let startX = 0;\n        let scrollLeft = 0;\n        let isDragging = false;\n        let animationId = null;\n        let velocity = 0;\n        let lastX = 0;\n        let lastTime = 0;\n        \n        const startDragging = (pageX) => {\n            isDragging = true;\n            startX = pageX;\n            lastX = pageX;\n            scrollLeft = this.container.scrollLeft;\n            lastTime = Date.now();\n            velocity = 0;\n            \n            // Cancella animazioni\n            if (animationId) {\n                cancelAnimationFrame(animationId);\n            }\n            \n            // La classe 'active' è già nel CSS esistente per cursor grabbing\n            this.container.classList.add('active');\n        };\n        \n        const drag = (pageX) => {\n            if (!isDragging) return;\n            \n            const currentTime = Date.now();\n            const timeDelta = currentTime - lastTime;\n            const distance = pageX - lastX;\n            \n            // Calcola velocità\n            if (timeDelta > 0) {\n                velocity = distance / timeDelta * 16; // Normalizza a 60fps\n            }\n            \n            const walk = (pageX - startX) * 1.5;\n            this.container.scrollLeft = scrollLeft - walk;\n            \n            lastX = pageX;\n            lastTime = currentTime;\n        };\n        \n        const stopDragging = () => {\n            if (!isDragging) return;\n            \n            isDragging = false;\n            this.container.classList.remove('active');\n            \n            // Applica momentum se c'è velocità\n            if (Math.abs(velocity) > 2) {\n                const deceleration = 0.95;\n                \n                const animate = () => {\n                    if (Math.abs(velocity) > 0.5) {\n                        this.container.scrollLeft -= velocity;\n                        velocity *= deceleration;\n                        animationId = requestAnimationFrame(animate);\n                    } else {\n                        this.updateUI();\n                    }\n                };\n                \n                animate();\n            } else {\n                this.updateUI();\n            }\n        };\n        \n        // Mouse events\n        this.container.addEventListener('mousedown', (e) => {\n            startDragging(e.pageX);\n        });\n        \n        document.addEventListener('mousemove', (e) => {\n            drag(e.pageX);\n        });\n        \n        document.addEventListener('mouseup', stopDragging);\n        \n        // Touch events\n        this.container.addEventListener('touchstart', (e) => {\n            startDragging(e.touches[0].pageX);\n        }, this.supportsPassive ? { passive: true } : false);\n        \n        this.container.addEventListener('touchmove', (e) => {\n            drag(e.touches[0].pageX);\n        }, this.supportsPassive ? { passive: true } : false);\n        \n        this.container.addEventListener('touchend', stopDragging);\n        this.container.addEventListener('touchcancel', stopDragging);\n    }\n    \n    // Setup indicatore di scroll\n    setupScrollIndicator() {\n        // Crea progress bar solo se non nascosta da design\n        if (!this.wrapper.classList.contains('hide-progress')) {\n            const progressBar = document.createElement('div');\n            progressBar.className = 'scroll-progress';\n            progressBar.setAttribute('role', 'progressbar');\n            progressBar.setAttribute('aria-label', 'Progresso scroll');\n            progressBar.setAttribute('aria-valuemin', '0');\n            progressBar.setAttribute('aria-valuemax', '100');\n            \n            this.wrapper.appendChild(progressBar);\n            this.progressBar = progressBar;\n        }\n        \n        // Aggiorna su scroll\n        let ticking = false;\n        this.container.addEventListener('scroll', () => {\n            if (!ticking) {\n                requestAnimationFrame(() => {\n                    this.updateUI();\n                    ticking = false;\n                });\n                ticking = true;\n            }\n        }, this.supportsPassive ? { passive: true } : false);\n    }\n    \n    // Setup accessibilità\n    setupAccessibility() {\n        // ARIA labels\n        this.container.setAttribute('role', 'region');\n        this.container.setAttribute('aria-label', 'Contenuti scrollabili orizzontalmente');\n        \n        // Live region per annunci\n        const liveRegion = document.createElement('div');\n        liveRegion.className = 'sr-only';\n        liveRegion.setAttribute('role', 'status');\n        liveRegion.setAttribute('aria-live', 'polite');\n        liveRegion.setAttribute('aria-atomic', 'true');\n        liveRegion.style.cssText = `\n            position: absolute;\n            width: 1px;\n            height: 1px;\n            padding: 0;\n            margin: -1px;\n            overflow: hidden;\n            clip: rect(0,0,0,0);\n            white-space: nowrap;\n            border: 0;\n        `;\n        \n        this.wrapper.appendChild(liveRegion);\n        this.liveRegion = liveRegion;\n    }\n    \n    // Scroll fluido\n    smoothScroll(distance) {\n        if (this.supportsScrollBehavior) {\n            this.container.scrollBy({\n                left: distance,\n                behavior: 'smooth'\n            });\n        } else {\n            // Fallback animato\n            this.animateScroll(this.container.scrollLeft + distance);\n        }\n    }\n    \n    // Animazione scroll per fallback\n    animateScroll(target) {\n        const start = this.container.scrollLeft;\n        const distance = target - start;\n        const duration = 300;\n        let startTime = null;\n        \n        const animation = (currentTime) => {\n            if (!startTime) startTime = currentTime;\n            const elapsed = currentTime - startTime;\n            const progress = Math.min(elapsed / duration, 1);\n            \n            // Easing\n            const easeInOutQuad = progress < 0.5\n                ? 2 * progress * progress\n                : 1 - Math.pow(-2 * progress + 2, 2) / 2;\n            \n            this.container.scrollLeft = start + distance * easeInOutQuad;\n            \n            if (progress < 1) {\n                requestAnimationFrame(animation);\n            } else {\n                this.updateUI();\n            }\n        };\n        \n        requestAnimationFrame(animation);\n    }\n    \n    // Metodi di navigazione\n    scrollPrev() {\n        const scrollAmount = this.container.clientWidth * 0.8;\n        this.smoothScroll(-scrollAmount);\n        this.announce('Scorrimento a sinistra');\n    }\n    \n    scrollNext() {\n        const scrollAmount = this.container.clientWidth * 0.8;\n        this.smoothScroll(scrollAmount);\n        this.announce('Scorrimento a destra');\n    }\n    \n    scrollToStart() {\n        this.container.scrollTo({\n            left: 0,\n            behavior: this.supportsScrollBehavior ? 'smooth' : 'auto'\n        });\n        this.announce('Inizio dei contenuti');\n    }\n    \n    scrollToEnd() {\n        const maxScroll = this.container.scrollWidth - this.container.clientWidth;\n        this.container.scrollTo({\n            left: maxScroll,\n            behavior: this.supportsScrollBehavior ? 'smooth' : 'auto'\n        });\n        this.announce('Fine dei contenuti');\n    }\n    \n    // Aggiorna UI\n    updateUI() {\n        const scrollLeft = this.container.scrollLeft;\n        \n        // Calcola il gap tra le card (se usi gap in CSS)\n        const computedStyle = window.getComputedStyle(this.container);\n        const gap = parseFloat(computedStyle.gap) || 0;\n        \n        // Trova l'ultima card\n        const lastChild = this.container.lastElementChild;\n        const lastChildWidth = lastChild ? lastChild.offsetWidth : 0;\n        \n        // Calcola il maxScroll considerando l'ultima card e il padding\n        const maxScroll = this.container.scrollWidth - this.container.clientWidth;\n        const adjustedMaxScroll = Math.max(0, maxScroll - gap);\n        \n        // Aggiorna pulsanti con tolleranza\n        if (this.prevButton && this.nextButton) {\n            const tolerance = 5;\n            this.prevButton.disabled = scrollLeft <= tolerance;\n            this.nextButton.disabled = scrollLeft >= adjustedMaxScroll - tolerance;\n            \n            // Aggiorna ARIA\n            this.prevButton.setAttribute('aria-disabled', scrollLeft <= tolerance);\n            this.nextButton.setAttribute('aria-disabled', scrollLeft >= adjustedMaxScroll - tolerance);\n        }\n        \n        // Aggiorna progress bar\n        if (this.progressBar && adjustedMaxScroll > 0) {\n            const progress = Math.min(100, (scrollLeft / adjustedMaxScroll) * 100);\n            this.progressBar.style.width = `${progress}%`;\n            this.progressBar.setAttribute('aria-valuenow', Math.round(progress));\n        }\n    }\n    \n    // Verifica se un elemento è completamente visibile\n    isElementFullyVisible(element) {\n        const containerRect = this.container.getBoundingClientRect();\n        const elementRect = element.getBoundingClientRect();\n        \n        return elementRect.left >= containerRect.left && \n               elementRect.right <= containerRect.right;\n    }\n    \n    // Assicura che l'ultima card sia visibile dopo lo scroll\n    ensureLastCardVisible() {\n        const lastCard = this.container.lastElementChild;\n        if (!lastCard) return;\n        \n        if (!this.isElementFullyVisible(lastCard)) {\n            const containerRect = this.container.getBoundingClientRect();\n            const lastCardRect = lastCard.getBoundingClientRect();\n            const scrollAdjustment = lastCardRect.right - containerRect.right + 20;\n            \n            if (scrollAdjustment > 0) {\n                this.container.scrollLeft += scrollAdjustment;\n            }\n        }\n    }\n\n    // Annuncia a screen reader\n    announce(message) {\n        if (this.liveRegion) {\n            this.liveRegion.textContent = message;\n            // Reset dopo annuncio\n            setTimeout(() => {\n                this.liveRegion.textContent = '';\n            }, 1000);\n        }\n    }\n}\n\n// CSS da iniettare - Adattato per CSS Elementor esistente\nconst improvedStyles = `\n    <style id=\"improved-scroller-styles\">\n        /* Wrapper styles */\n        .elementor-scroller-wrapper {\n            position: relative;\n        }\n        \n        /* Nasconde scrollbar orizzontale su desktop mantenendo lo scroll */\n        .scrollable-container {\n            /* Firefox */\n            scrollbar-width: none;\n            \n            /* IE 10+ */\n            -ms-overflow-style: none;\n            \n            /* Aggiunge spazio per l'ultima card */\n            padding-right: 30px;\n            box-sizing: content-box;\n        }\n        \n        /* Compensa il padding per il primo elemento */\n        .scrollable-container > *:first-child {\n            margin-left: 20px;\n        }\n        \n        /* Fix per Elementor - previeni che tagli il contenuto */\n        .elementor-widget-container {\n            overflow: visible !important;\n        }\n        \n        /* Fix per container con gap CSS */\n        .scrollable-container[style*=\"gap\"] {\n            padding-right: 50px;\n        }\n        \n        /* Chrome, Safari, Opera, Edge */\n        .scrollable-container::-webkit-scrollbar {\n            width: 0 !important;\n            height: 0 !important;\n            display: none;\n        }\n        \n        .scrollable-container::-webkit-scrollbar-track {\n            background: transparent;\n        }\n        \n        .scrollable-container::-webkit-scrollbar-thumb {\n            background: transparent;\n            border: none;\n        }\n        \n        /* Supporto per browser più vecchi */\n        @supports not (scrollbar-width: none) {\n            .scrollable-container {\n                margin-bottom: -17px;\n                padding-bottom: 17px;\n            }\n        }\n        \n        /* Pulsanti navigazione */\n        .nav-button {\n            position: absolute;\n            top: 50%;\n            transform: translateY(-50%);\n            width: 48px;\n            height: 48px;\n            background: rgba(255, 255, 255, 0.95);\n            border: 1px solid #ddd;\n            border-radius: 50%;\n            cursor: pointer;\n            display: none;\n            align-items: center;\n            justify-content: center;\n            z-index: 10;\n            transition: all 0.3s ease;\n            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n            \n            /* Assicura che sia sopra il contenuto */\n            pointer-events: auto;\n        }\n        \n        .nav-button {\n            background: var(--e-global-color-primary);\n        }\n        \n        .nav-button svg {\n            width: 24px;\n            height: 24px;\n            color: #fff;\n        }\n        \n        .nav-button:hover:not(:disabled) {\n            background: var(--e-global-color-2de3d7d);\n            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n            transform: translateY(-50%) scale(1.1);\n        }\n        \n        .nav-button:active {\n            transform: translateY(-50%) scale(0.95);\n        }\n        \n        .nav-button:hover:not(:disabled) {\n            background: var(--e-global-color-2de3d7d);\n            border-color: var(--e-global-color-2de3d7d);\n        }\n        \n        .nav-button:active {\n            transform: translateY(-50%) scale(0.95);\n        }\n        \n        .nav-button:disabled {\n            opacity: 0.3;\n            cursor: not-allowed;\n        }\n        \n        .nav-button:disabled:hover {\n            transform: translateY(-50%);\n        }\n        \n        .nav-button:focus {\n            outline: 2px solid var(--e-global-color-primary, #0066cc);\n            outline-offset: 2px;\n        }\n        \n        .nav-prev {\n            left: 10px;\n        }\n        \n        .nav-next {\n            right: 10px;\n        }\n        \n        /* Mostra pulsanti su desktop */\n        @media (min-width: 1024px) {\n            .elementor-scroller-wrapper:hover .nav-button:not(:disabled) {\n                display: flex;\n            }\n            \n            .elementor-scroller-wrapper:focus-within .nav-button:not(:disabled) {\n                display: flex;\n            }\n        }\n        \n        /* Progress bar sottile */\n        .scroll-progress {\n            position: absolute;\n            bottom: 0;\n            left: 0;\n            height: 3px;\n            background: var(--e-global-color-primary, #0066cc);\n            transition: width 0.2s ease, opacity 0.3s ease;\n            pointer-events: none;\n            z-index: 5;\n            opacity: 0;\n            border-radius: 0 3px 3px 0;\n        }\n        \n        /* Mostra progress bar su hover/focus */\n        .elementor-scroller-wrapper:hover .scroll-progress,\n        .elementor-scroller-wrapper:focus-within .scroll-progress {\n            opacity: 0.7;\n        }\n        \n        /* Non sovrascriviamo cursor - già impostato nel CSS esistente */\n        \n        /* Focus migliore - solo se non già presente */\n        .scrollable-container:focus-visible {\n            outline: 2px solid var(--e-global-color-primary, #0066cc);\n            outline-offset: 2px;\n        }\n        \n        /* Supporta la classe keyboard-scrolling esistente */\n        .scrollable-container.keyboard-scrolling {\n            scroll-behavior: smooth !important;\n        }\n        \n        /* Screen reader only */\n        .sr-only {\n            position: absolute;\n            width: 1px;\n            height: 1px;\n            padding: 0;\n            margin: -1px;\n            overflow: hidden;\n            clip: rect(0,0,0,0);\n            white-space: nowrap;\n            border: 0;\n        }\n        \n        /* Indicatori di pagina opzionali */\n        .scroll-indicators {\n            display: flex;\n            justify-content: center;\n            gap: 8px;\n            margin-top: 16px;\n            padding: 8px;\n        }\n        \n        .scroll-indicator {\n            width: 8px;\n            height: 8px;\n            border-radius: 50%;\n            background: #ddd;\n            transition: all 0.3s ease;\n            cursor: pointer;\n            border: none;\n            padding: 0;\n        }\n        \n        .scroll-indicator:hover {\n            background: #999;\n            transform: scale(1.2);\n        }\n        \n        .scroll-indicator.active {\n            background: var(--e-global-color-primary, #333);\n            width: 24px;\n            border-radius: 4px;\n        }\n        \n        /* Supporto reduced motion */\n        @media (prefers-reduced-motion: reduce) {\n            * {\n                animation-duration: 0.01ms !important;\n                animation-iteration-count: 1 !important;\n                transition-duration: 0.01ms !important;\n            }\n            \n            .scrollable-container {\n                scroll-behavior: auto !important;\n            }\n            \n            .nav-button {\n                transition: none !important;\n            }\n            \n            .scroll-progress {\n                transition: none !important;\n            }\n        }\n        \n        /* Migliora contrasto per accessibilità */\n        @media (prefers-contrast: high) {\n            .nav-button {\n                background: #fff;\n                border: 2px solid #000;\n            }\n            \n            .nav-button:hover:not(:disabled) {\n                background: #000;\n                color: #fff;\n            }\n            \n            .nav-button:hover:not(:disabled) svg {\n                color: #fff;\n            }\n            \n            .scroll-progress {\n                background: #000;\n            }\n        }\n        \n        /* Dark mode support */\n        @media (prefers-color-scheme: dark) {\n            .nav-button {\n                background: var(--e-global-color-primary);\n                border-color: var(--e-global-color-primary);\n            }\n            \n            .nav-button svg {\n                color: #fff;\n            }\n            \n            .nav-button:hover:not(:disabled) {\n                background: var(--e-global-color-2de3d7d);\n                border-color: var(--e-global-color-2de3d7d);\n            }\n            \n            .scroll-indicator {\n                background: #555;\n            }\n            \n            .scroll-indicator:hover {\n                background: #777;\n            }\n            \n            .scroll-indicator.active {\n                background: #fff;\n            }\n        }\n    </style>\n`;\n\n// Inizializzazione\nfunction initImprovedScrollers() {\n    // Inietta stili se non presenti\n    if (!document.getElementById('improved-scroller-styles')) {\n        document.head.insertAdjacentHTML('beforeend', improvedStyles);\n    }\n    \n    // Trova tutti i container scrollabili\n    const containers = document.querySelectorAll('.scrollable-container');\n    \n    containers.forEach(container => {\n        // Skip se già inizializzato\n        if (container.hasAttribute('data-improved-scroller')) return;\n        \n        // Inizializza solo se c'è overflow orizzontale\n        if (container.scrollWidth > container.clientWidth) {\n            new ImprovedElementorScroller(container);\n            container.setAttribute('data-improved-scroller', 'true');\n        }\n    });\n}\n\n// Inizializza quando DOM è pronto\nif (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', initImprovedScrollers);\n} else {\n    initImprovedScrollers();\n}\n\n// Hook per Elementor\nif (typeof jQuery !== 'undefined') {\n    jQuery(window).on('elementor/frontend/init', function() {\n        if (window.elementorFrontend && window.elementorFrontend.hooks) {\n            elementorFrontend.hooks.addAction('frontend/element_ready/widget', function() {\n                setTimeout(initImprovedScrollers, 100);\n            });\n        }\n    });\n} else {\n    // Fallback observer per contenuti dinamici\n    const observer = new MutationObserver(() => {\n        initImprovedScrollers();\n    });\n    \n    observer.observe(document.body, {\n        childList: true,\n        subtree: true\n    });\n}\n\n// Re-inizializza su resize\nlet resizeTimeout;\nwindow.addEventListener('resize', () => {\n    clearTimeout(resizeTimeout);\n    resizeTimeout = setTimeout(initImprovedScrollers, 250);\n});\n\nconsole.log('Improved Elementor Scroller v2.0 loaded');","newString":"/**\n * Slider Orizzontale Migliorato per Elementor\n * Versione 2.0 - Ottimizzato per Desktop con Accessibilità\n */\n\n// Classe principale per gestire lo slider\nclass ImprovedElementorScroller {\n    constructor(container) {\n        this.container = container;\n        this.wrapper = null;\n        this.isScrolling = false;\n        this.scrollTimeout = null;\n        \n        // Feature detection\n        this.supportsPassive = this.checkPassiveSupport();\n        this.supportsScrollBehavior = 'scrollBehavior' in document.documentElement.style;\n        \n        // Inizializza\n        this.init();\n    }\n    \n    // Check supporto passive listeners\n    checkPassiveSupport() {\n        let supportsPassive = false;\n        try {\n            const opts = Object.defineProperty({}, 'passive', {\n                get: () => { supportsPassive = true; }\n            });\n            window.addEventListener('testPassive', null, opts);\n            window.removeEventListener('testPassive', null, opts);\n        } catch (e) {}\n        return supportsPassive;\n    }\n    \n    init() {\n        // Crea wrapper per aggiungere controlli senza modificare HTML\n        this.wrapContainer();\n        \n        // Setup features\n        this.setupNavButtons();\n        this.setupKeyboard();\n        this.setupMouseWheel();\n        this.setupTouch();\n        this.setupScrollIndicator();\n        this.setupAccessibility();\n        \n        // Aggiorna stato iniziale\n        this.updateUI();\n    }\n    \n    // Wrap container esistente per aggiungere controlli\n    wrapContainer() {\n        // Se già wrappato, esci\n        if (this.container.parentElement.classList.contains('elementor-scroller-wrapper')) {\n            this.wrapper = this.container.parentElement;\n            return;\n        }\n        \n        // Crea wrapper\n        this.wrapper = document.createElement('div');\n        this.wrapper.className = 'elementor-scroller-wrapper';\n        this.wrapper.style.position = 'relative';\n        \n        // Inserisci wrapper\n        this.container.parentNode.insertBefore(this.wrapper, this.container);\n        this.wrapper.appendChild(this.container);\n    }\n    \n    // Setup pulsanti navigazione\n    setupNavButtons() {\n        // Crea pulsanti solo se non esistono\n        if (!this.wrapper.querySelector('.nav-button')) {\n            // Pulsante precedente\n            const prevButton = document.createElement('button');\n            prevButton.className = 'nav-button nav-prev';\n            prevButton.innerHTML = `\n                <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                    <path d=\"M15 18l-6-6 6-6\"/>\n                </svg>\n            `;\n            prevButton.setAttribute('aria-label', 'Scorri a sinistra');\n            prevButton.addEventListener('click', () => this.scrollPrev());\n            \n            // Pulsante successivo\n            const nextButton = document.createElement('button');\n            nextButton.className = 'nav-button nav-next';\n            nextButton.innerHTML = `\n                <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                    <path d=\"M9 18l6-6-6-6\"/>\n                </svg>\n            `;\n            nextButton.setAttribute('aria-label', 'Scorri a destra');\n            nextButton.addEventListener('click', () => this.scrollNext());\n            \n            // Aggiungi al wrapper\n            this.wrapper.appendChild(prevButton);\n            this.wrapper.appendChild(nextButton);\n            \n            // Store references\n            this.prevButton = prevButton;\n            this.nextButton = nextButton;\n        }\n    }\n    \n    // Setup tastiera migliorato\n    setupKeyboard() {\n        this.container.addEventListener('keydown', (e) => {\n            const scrollAmount = this.container.clientWidth * 0.8;\n            let handled = true;\n            \n            // Aggiungi classe per smooth scroll da tastiera\n            this.container.classList.add('keyboard-scrolling');\n            \n            switch(e.key) {\n                case 'ArrowLeft':\n                    this.smoothScroll(-scrollAmount);\n                    break;\n                case 'ArrowRight':\n                    this.smoothScroll(scrollAmount);\n                    break;\n                case 'Home':\n                    this.scrollToStart();\n                    break;\n                case 'End':\n                    this.scrollToEnd();\n                    break;\n                default:\n                    handled = false;\n            }\n            \n            if (handled) {\n                e.preventDefault();\n                // Rimuovi classe dopo animazione\n                setTimeout(() => {\n                    this.container.classList.remove('keyboard-scrolling');\n                }, 400);\n            } else {\n                this.container.classList.remove('keyboard-scrolling');\n            }\n        });\n    }\n    \n    // Setup mouse wheel - MIGLIORAMENTO CHIAVE\n    setupMouseWheel() {\n        let accumulatedDelta = 0;\n        let wheelTimeout;\n        \n        const wheelHandler = (e) => {\n            // Solo se container è in hover o focus\n            if (!this.container.matches(':hover, :focus-within')) return;\n            \n            e.preventDefault();\n            \n            // Accumula piccoli delta per scroll più fluido\n            accumulatedDelta += e.deltaY;\n            \n            clearTimeout(wheelTimeout);\n            wheelTimeout = setTimeout(() => {\n                if (Math.abs(accumulatedDelta) > 10) {\n                    // Normalizza e applica scroll\n                    const scrollAmount = Math.sign(accumulatedDelta) * Math.min(Math.abs(accumulatedDelta), 300);\n                    this.smoothScroll(scrollAmount);\n                }\n                accumulatedDelta = 0;\n            }, 50);\n        };\n        \n        // Aggiungi listener con passive false\n        this.container.addEventListener('wheel', wheelHandler, \n            this.supportsPassive ? { passive: false } : false\n        );\n    }\n    \n    // Setup touch con momentum migliorato\n    setupTouch() {\n        let startX = 0;\n        let scrollLeft = 0;\n        let isDragging = false;\n        let animationId = null;\n        let velocity = 0;\n        let lastX = 0;\n        let lastTime = 0;\n        \n        const startDragging = (pageX) => {\n            isDragging = true;\n            startX = pageX;\n            lastX = pageX;\n            scrollLeft = this.container.scrollLeft;\n            lastTime = Date.now();\n            velocity = 0;\n            \n            // Cancella animazioni\n            if (animationId) {\n                cancelAnimationFrame(animationId);\n            }\n            \n            // La classe 'active' è già nel CSS esistente per cursor grabbing\n            this.container.classList.add('active');\n        };\n        \n        const drag = (pageX) => {\n            if (!isDragging) return;\n            \n            const currentTime = Date.now();\n            const timeDelta = currentTime - lastTime;\n            const distance = pageX - lastX;\n            \n            // Calcola velocità\n            if (timeDelta > 0) {\n                velocity = distance / timeDelta * 16; // Normalizza a 60fps\n            }\n            \n            const walk = (pageX - startX) * 1.5;\n            this.container.scrollLeft = scrollLeft - walk;\n            \n            lastX = pageX;\n            lastTime = currentTime;\n        };\n        \n        const stopDragging = () => {\n            if (!isDragging) return;\n            \n            isDragging = false;\n            this.container.classList.remove('active');\n            \n            // Applica momentum se c'è velocità\n            if (Math.abs(velocity) > 2) {\n                const deceleration = 0.95;\n                \n                const animate = () => {\n                    if (Math.abs(velocity) > 0.5) {\n                        this.container.scrollLeft -= velocity;\n                        velocity *= deceleration;\n                        animationId = requestAnimationFrame(animate);\n                    } else {\n                        this.updateUI();\n                    }\n                };\n                \n                animate();\n            } else {\n                this.updateUI();\n            }\n        };\n        \n        // Mouse events\n        this.container.addEventListener('mousedown', (e) => {\n            startDragging(e.pageX);\n        });\n        \n        document.addEventListener('mousemove', (e) => {\n            drag(e.pageX);\n        });\n        \n        document.addEventListener('mouseup', stopDragging);\n        \n        // Touch events\n        this.container.addEventListener('touchstart', (e) => {\n            startDragging(e.touches[0].pageX);\n        }, this.supportsPassive ? { passive: true } : false);\n        \n        this.container.addEventListener('touchmove', (e) => {\n            drag(e.touches[0].pageX);\n        }, this.supportsPassive ? { passive: true } : false);\n        \n        this.container.addEventListener('touchend', stopDragging);\n        this.container.addEventListener('touchcancel', stopDragging);\n    }\n    \n    // Setup indicatore di scroll\n    setupScrollIndicator() {\n        // Crea progress bar solo se non nascosta da design\n        if (!this.wrapper.classList.contains('hide-progress')) {\n            const progressBar = document.createElement('div');\n            progressBar.className = 'scroll-progress';\n            progressBar.setAttribute('role', 'progressbar');\n            progressBar.setAttribute('aria-label', 'Progresso scroll');\n            progressBar.setAttribute('aria-valuemin', '0');\n            progressBar.setAttribute('aria-valuemax', '100');\n            \n            this.wrapper.appendChild(progressBar);\n            this.progressBar = progressBar;\n        }\n        \n        // Aggiorna su scroll\n        let ticking = false;\n        this.container.addEventListener('scroll', () => {\n            if (!ticking) {\n                requestAnimationFrame(() => {\n                    this.updateUI();\n                    ticking = false;\n                });\n                ticking = true;\n            }\n        }, this.supportsPassive ? { passive: true } : false);\n    }\n    \n    // Setup accessibilità\n    setupAccessibility() {\n        // ARIA labels\n        this.container.setAttribute('role', 'region');\n        this.container.setAttribute('aria-label', 'Contenuti scrollabili orizzontalmente');\n        \n        // Live region per annunci\n        const liveRegion = document.createElement('div');\n        liveRegion.className = 'sr-only';\n        liveRegion.setAttribute('role', 'status');\n        liveRegion.setAttribute('aria-live', 'polite');\n        liveRegion.setAttribute('aria-atomic', 'true');\n        liveRegion.style.cssText = `\n            position: absolute;\n            width: 1px;\n            height: 1px;\n            padding: 0;\n            margin: -1px;\n            overflow: hidden;\n            clip: rect(0,0,0,0);\n            white-space: nowrap;\n            border: 0;\n        `;\n        \n        this.wrapper.appendChild(liveRegion);\n        this.liveRegion = liveRegion;\n    }\n    \n    // Scroll fluido\n    smoothScroll(distance) {\n        if (this.supportsScrollBehavior) {\n            this.container.scrollBy({\n                left: distance,\n                behavior: 'smooth'\n            });\n        } else {\n            // Fallback animato\n            this.animateScroll(this.container.scrollLeft + distance);\n        }\n    }\n    \n    // Animazione scroll per fallback\n    animateScroll(target) {\n        const start = this.container.scrollLeft;\n        const distance = target - start;\n        const duration = 300;\n        let startTime = null;\n        \n        const animation = (currentTime) => {\n            if (!startTime) startTime = currentTime;\n            const elapsed = currentTime - startTime;\n            const progress = Math.min(elapsed / duration, 1);\n            \n            // Easing\n            const easeInOutQuad = progress < 0.5\n                ? 2 * progress * progress\n                : 1 - Math.pow(-2 * progress + 2, 2) / 2;\n            \n            this.container.scrollLeft = start + distance * easeInOutQuad;\n            \n            if (progress < 1) {\n                requestAnimationFrame(animation);\n            } else {\n                this.updateUI();\n            }\n        };\n        \n        requestAnimationFrame(animation);\n    }\n    \n    // Metodi di navigazione\n    scrollPrev() {\n        const scrollAmount = this.container.clientWidth * 0.8;\n        this.smoothScroll(-scrollAmount);\n        this.announce('Scorrimento a sinistra');\n    }\n    \n    scrollNext() {\n        const cards = Array.from(this.container.children);\n        const containerRect = this.container.getBoundingClientRect();\n        \n        // Trova la prima card non completamente visibile\n        let targetCard = cards.find(card => {\n            const cardRect = card.getBoundingClientRect();\n            return cardRect.left > containerRect.left && !this.isElementFullyVisible(card);\n        });\n        \n        if (targetCard) {\n            // Scrolla fino alla card target\n            const targetPosition = targetCard.offsetLeft - this.container.offsetLeft;\n            this.container.scrollTo({\n                left: targetPosition,\n                behavior: this.supportsScrollBehavior ? 'smooth' : 'auto'\n            });\n        } else {\n            // Scroll standard se non ci sono card parzialmente visibili\n            const scrollAmount = this.container.clientWidth * 0.8;\n            this.smoothScroll(scrollAmount);\n        }\n        \n        // Assicura che l'ultima card sia visibile dopo lo scroll\n        setTimeout(() => this.ensureLastCardVisible(), 350);\n        \n        this.announce('Scorrimento a destra');\n    }\n    \n    scrollToStart() {\n        this.container.scrollTo({\n            left: 0,\n            behavior: this.supportsScrollBehavior ? 'smooth' : 'auto'\n        });\n        this.announce('Inizio dei contenuti');\n    }\n    \n    scrollToEnd() {\n        const maxScroll = this.container.scrollWidth - this.container.clientWidth;\n        this.container.scrollTo({\n            left: maxScroll,\n            behavior: this.supportsScrollBehavior ? 'smooth' : 'auto'\n        });\n        this.announce('Fine dei contenuti');\n    }\n    \n    // Aggiorna UI\n    updateUI() {\n        const scrollLeft = this.container.scrollLeft;\n        \n        // Calcola il gap tra le card (se usi gap in CSS)\n        const computedStyle = window.getComputedStyle(this.container);\n        const gap = parseFloat(computedStyle.gap) || 0;\n        \n        // Trova l'ultima card\n        const lastChild = this.container.lastElementChild;\n        const lastChildWidth = lastChild ? lastChild.offsetWidth : 0;\n        \n        // Calcola il maxScroll considerando l'ultima card e il padding\n        const maxScroll = this.container.scrollWidth - this.container.clientWidth;\n        const adjustedMaxScroll = Math.max(0, maxScroll - gap);\n        \n        // Aggiorna pulsanti con tolleranza\n        if (this.prevButton && this.nextButton) {\n            const tolerance = 5;\n            this.prevButton.disabled = scrollLeft <= tolerance;\n            this.nextButton.disabled = scrollLeft >= adjustedMaxScroll - tolerance;\n            \n            // Aggiorna ARIA\n            this.prevButton.setAttribute('aria-disabled', scrollLeft <= tolerance);\n            this.nextButton.setAttribute('aria-disabled', scrollLeft >= adjustedMaxScroll - tolerance);\n        }\n        \n        // Aggiorna progress bar\n        if (this.progressBar && adjustedMaxScroll > 0) {\n            const progress = Math.min(100, (scrollLeft / adjustedMaxScroll) * 100);\n            this.progressBar.style.width = `${progress}%`;\n            this.progressBar.setAttribute('aria-valuenow', Math.round(progress));\n        }\n    }\n    \n    // Verifica se un elemento è completamente visibile\n    isElementFullyVisible(element) {\n        const containerRect = this.container.getBoundingClientRect();\n        const elementRect = element.getBoundingClientRect();\n        \n        return elementRect.left >= containerRect.left && \n               elementRect.right <= containerRect.right;\n    }\n    \n    // Assicura che l'ultima card sia visibile dopo lo scroll\n    ensureLastCardVisible() {\n        const lastCard = this.container.lastElementChild;\n        if (!lastCard) return;\n        \n        if (!this.isElementFullyVisible(lastCard)) {\n            const containerRect = this.container.getBoundingClientRect();\n            const lastCardRect = lastCard.getBoundingClientRect();\n            const scrollAdjustment = lastCardRect.right - containerRect.right + 20;\n            \n            if (scrollAdjustment > 0) {\n                this.container.scrollLeft += scrollAdjustment;\n            }\n        }\n    }\n\n    // Annuncia a screen reader\n    announce(message) {\n        if (this.liveRegion) {\n            this.liveRegion.textContent = message;\n            // Reset dopo annuncio\n            setTimeout(() => {\n                this.liveRegion.textContent = '';\n            }, 1000);\n        }\n    }\n}\n\n// CSS da iniettare - Adattato per CSS Elementor esistente\nconst improvedStyles = `\n    <style id=\"improved-scroller-styles\">\n        /* Wrapper styles */\n        .elementor-scroller-wrapper {\n            position: relative;\n        }\n        \n        /* Nasconde scrollbar orizzontale su desktop mantenendo lo scroll */\n        .scrollable-container {\n            /* Firefox */\n            scrollbar-width: none;\n            \n            /* IE 10+ */\n            -ms-overflow-style: none;\n            \n            /* Aggiunge spazio per l'ultima card */\n            padding-right: 30px;\n            box-sizing: content-box;\n        }\n        \n        /* Compensa il padding per il primo elemento */\n        .scrollable-container > *:first-child {\n            margin-left: 20px;\n        }\n        \n        /* Fix per Elementor - previeni che tagli il contenuto */\n        .elementor-widget-container {\n            overflow: visible !important;\n        }\n        \n        /* Fix per container con gap CSS */\n        .scrollable-container[style*=\"gap\"] {\n            padding-right: 50px;\n        }\n        \n        /* Chrome, Safari, Opera, Edge */\n        .scrollable-container::-webkit-scrollbar {\n            width: 0 !important;\n            height: 0 !important;\n            display: none;\n        }\n        \n        .scrollable-container::-webkit-scrollbar-track {\n            background: transparent;\n        }\n        \n        .scrollable-container::-webkit-scrollbar-thumb {\n            background: transparent;\n            border: none;\n        }\n        \n        /* Supporto per browser più vecchi */\n        @supports not (scrollbar-width: none) {\n            .scrollable-container {\n                margin-bottom: -17px;\n                padding-bottom: 17px;\n            }\n        }\n        \n        /* Pulsanti navigazione */\n        .nav-button {\n            position: absolute;\n            top: 50%;\n            transform: translateY(-50%);\n            width: 48px;\n            height: 48px;\n            background: rgba(255, 255, 255, 0.95);\n            border: 1px solid #ddd;\n            border-radius: 50%;\n            cursor: pointer;\n            display: none;\n            align-items: center;\n            justify-content: center;\n            z-index: 10;\n            transition: all 0.3s ease;\n            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n            \n            /* Assicura che sia sopra il contenuto */\n            pointer-events: auto;\n        }\n        \n        .nav-button {\n            background: var(--e-global-color-primary);\n        }\n        \n        .nav-button svg {\n            width: 24px;\n            height: 24px;\n            color: #fff;\n        }\n        \n        .nav-button:hover:not(:disabled) {\n            background: var(--e-global-color-2de3d7d);\n            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n            transform: translateY(-50%) scale(1.1);\n        }\n        \n        .nav-button:active {\n            transform: translateY(-50%) scale(0.95);\n        }\n        \n        .nav-button:hover:not(:disabled) {\n            background: var(--e-global-color-2de3d7d);\n            border-color: var(--e-global-color-2de3d7d);\n        }\n        \n        .nav-button:active {\n            transform: translateY(-50%) scale(0.95);\n        }\n        \n        .nav-button:disabled {\n            opacity: 0.3;\n            cursor: not-allowed;\n        }\n        \n        .nav-button:disabled:hover {\n            transform: translateY(-50%);\n        }\n        \n        .nav-button:focus {\n            outline: 2px solid var(--e-global-color-primary, #0066cc);\n            outline-offset: 2px;\n        }\n        \n        .nav-prev {\n            left: 10px;\n        }\n        \n        .nav-next {\n            right: 10px;\n        }\n        \n        /* Mostra pulsanti su desktop */\n        @media (min-width: 1024px) {\n            .elementor-scroller-wrapper:hover .nav-button:not(:disabled) {\n                display: flex;\n            }\n            \n            .elementor-scroller-wrapper:focus-within .nav-button:not(:disabled) {\n                display: flex;\n            }\n        }\n        \n        /* Progress bar sottile */\n        .scroll-progress {\n            position: absolute;\n            bottom: 0;\n            left: 0;\n            height: 3px;\n            background: var(--e-global-color-primary, #0066cc);\n            transition: width 0.2s ease, opacity 0.3s ease;\n            pointer-events: none;\n            z-index: 5;\n            opacity: 0;\n            border-radius: 0 3px 3px 0;\n        }\n        \n        /* Mostra progress bar su hover/focus */\n        .elementor-scroller-wrapper:hover .scroll-progress,\n        .elementor-scroller-wrapper:focus-within .scroll-progress {\n            opacity: 0.7;\n        }\n        \n        /* Non sovrascriviamo cursor - già impostato nel CSS esistente */\n        \n        /* Focus migliore - solo se non già presente */\n        .scrollable-container:focus-visible {\n            outline: 2px solid var(--e-global-color-primary, #0066cc);\n            outline-offset: 2px;\n        }\n        \n        /* Supporta la classe keyboard-scrolling esistente */\n        .scrollable-container.keyboard-scrolling {\n            scroll-behavior: smooth !important;\n        }\n        \n        /* Screen reader only */\n        .sr-only {\n            position: absolute;\n            width: 1px;\n            height: 1px;\n            padding: 0;\n            margin: -1px;\n            overflow: hidden;\n            clip: rect(0,0,0,0);\n            white-space: nowrap;\n            border: 0;\n        }\n        \n        /* Indicatori di pagina opzionali */\n        .scroll-indicators {\n            display: flex;\n            justify-content: center;\n            gap: 8px;\n            margin-top: 16px;\n            padding: 8px;\n        }\n        \n        .scroll-indicator {\n            width: 8px;\n            height: 8px;\n            border-radius: 50%;\n            background: #ddd;\n            transition: all 0.3s ease;\n            cursor: pointer;\n            border: none;\n            padding: 0;\n        }\n        \n        .scroll-indicator:hover {\n            background: #999;\n            transform: scale(1.2);\n        }\n        \n        .scroll-indicator.active {\n            background: var(--e-global-color-primary, #333);\n            width: 24px;\n            border-radius: 4px;\n        }\n        \n        /* Supporto reduced motion */\n        @media (prefers-reduced-motion: reduce) {\n            * {\n                animation-duration: 0.01ms !important;\n                animation-iteration-count: 1 !important;\n                transition-duration: 0.01ms !important;\n            }\n            \n            .scrollable-container {\n                scroll-behavior: auto !important;\n            }\n            \n            .nav-button {\n                transition: none !important;\n            }\n            \n            .scroll-progress {\n                transition: none !important;\n            }\n        }\n        \n        /* Migliora contrasto per accessibilità */\n        @media (prefers-contrast: high) {\n            .nav-button {\n                background: #fff;\n                border: 2px solid #000;\n            }\n            \n            .nav-button:hover:not(:disabled) {\n                background: #000;\n                color: #fff;\n            }\n            \n            .nav-button:hover:not(:disabled) svg {\n                color: #fff;\n            }\n            \n            .scroll-progress {\n                background: #000;\n            }\n        }\n        \n        /* Dark mode support */\n        @media (prefers-color-scheme: dark) {\n            .nav-button {\n                background: var(--e-global-color-primary);\n                border-color: var(--e-global-color-primary);\n            }\n            \n            .nav-button svg {\n                color: #fff;\n            }\n            \n            .nav-button:hover:not(:disabled) {\n                background: var(--e-global-color-2de3d7d);\n                border-color: var(--e-global-color-2de3d7d);\n            }\n            \n            .scroll-indicator {\n                background: #555;\n            }\n            \n            .scroll-indicator:hover {\n                background: #777;\n            }\n            \n            .scroll-indicator.active {\n                background: #fff;\n            }\n        }\n    </style>\n`;\n\n// Inizializzazione\nfunction initImprovedScrollers() {\n    // Inietta stili se non presenti\n    if (!document.getElementById('improved-scroller-styles')) {\n        document.head.insertAdjacentHTML('beforeend', improvedStyles);\n    }\n    \n    // Trova tutti i container scrollabili\n    const containers = document.querySelectorAll('.scrollable-container');\n    \n    containers.forEach(container => {\n        // Skip se già inizializzato\n        if (container.hasAttribute('data-improved-scroller')) return;\n        \n        // Inizializza solo se c'è overflow orizzontale\n        if (container.scrollWidth > container.clientWidth) {\n            new ImprovedElementorScroller(container);\n            container.setAttribute('data-improved-scroller', 'true');\n        }\n    });\n}\n\n// Inizializza quando DOM è pronto\nif (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', initImprovedScrollers);\n} else {\n    initImprovedScrollers();\n}\n\n// Hook per Elementor\nif (typeof jQuery !== 'undefined') {\n    jQuery(window).on('elementor/frontend/init', function() {\n        if (window.elementorFrontend && window.elementorFrontend.hooks) {\n            elementorFrontend.hooks.addAction('frontend/element_ready/widget', function() {\n                setTimeout(initImprovedScrollers, 100);\n            });\n        }\n    });\n} else {\n    // Fallback observer per contenuti dinamici\n    const observer = new MutationObserver(() => {\n        initImprovedScrollers();\n    });\n    \n    observer.observe(document.body, {\n        childList: true,\n        subtree: true\n    });\n}\n\n// Re-inizializza su resize\nlet resizeTimeout;\nwindow.addEventListener('resize', () => {\n    clearTimeout(resizeTimeout);\n    resizeTimeout = setTimeout(initImprovedScrollers, 250);\n});\n\nconsole.log('Improved Elementor Scroller v2.0 loaded');","originalFile":"/**\n * Slider Orizzontale Migliorato per Elementor\n * Versione 2.0 - Ottimizzato per Desktop con Accessibilità\n */\n\n// Classe principale per gestire lo slider\nclass ImprovedElementorScroller {\n    constructor(container) {\n        this.container = container;\n        this.wrapper = null;\n        this.isScrolling = false;\n        this.scrollTimeout = null;\n        \n        // Feature detection\n        this.supportsPassive = this.checkPassiveSupport();\n        this.supportsScrollBehavior = 'scrollBehavior' in document.documentElement.style;\n        \n        // Inizializza\n        this.init();\n    }\n    \n    // Check supporto passive listeners\n    checkPassiveSupport() {\n        let supportsPassive = false;\n        try {\n            const opts = Object.defineProperty({}, 'passive', {\n                get: () => { supportsPassive = true; }\n            });\n            window.addEventListener('testPassive', null, opts);\n            window.removeEventListener('testPassive', null, opts);\n        } catch (e) {}\n        return supportsPassive;\n    }\n    \n    init() {\n        // Crea wrapper per aggiungere controlli senza modificare HTML\n        this.wrapContainer();\n        \n        // Setup features\n        this.setupNavButtons();\n        this.setupKeyboard();\n        this.setupMouseWheel();\n        this.setupTouch();\n        this.setupScrollIndicator();\n        this.setupAccessibility();\n        \n        // Aggiorna stato iniziale\n        this.updateUI();\n    }\n    \n    // Wrap container esistente per aggiungere controlli\n    wrapContainer() {\n        // Se già wrappato, esci\n        if (this.container.parentElement.classList.contains('elementor-scroller-wrapper')) {\n            this.wrapper = this.container.parentElement;\n            return;\n        }\n        \n        // Crea wrapper\n        this.wrapper = document.createElement('div');\n        this.wrapper.className = 'elementor-scroller-wrapper';\n        this.wrapper.style.position = 'relative';\n        \n        // Inserisci wrapper\n        this.container.parentNode.insertBefore(this.wrapper, this.container);\n        this.wrapper.appendChild(this.container);\n    }\n    \n    // Setup pulsanti navigazione\n    setupNavButtons() {\n        // Crea pulsanti solo se non esistono\n        if (!this.wrapper.querySelector('.nav-button')) {\n            // Pulsante precedente\n            const prevButton = document.createElement('button');\n            prevButton.className = 'nav-button nav-prev';\n            prevButton.innerHTML = `\n                <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                    <path d=\"M15 18l-6-6 6-6\"/>\n                </svg>\n            `;\n            prevButton.setAttribute('aria-label', 'Scorri a sinistra');\n            prevButton.addEventListener('click', () => this.scrollPrev());\n            \n            // Pulsante successivo\n            const nextButton = document.createElement('button');\n            nextButton.className = 'nav-button nav-next';\n            nextButton.innerHTML = `\n                <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                    <path d=\"M9 18l6-6-6-6\"/>\n                </svg>\n            `;\n            nextButton.setAttribute('aria-label', 'Scorri a destra');\n            nextButton.addEventListener('click', () => this.scrollNext());\n            \n            // Aggiungi al wrapper\n            this.wrapper.appendChild(prevButton);\n            this.wrapper.appendChild(nextButton);\n            \n            // Store references\n            this.prevButton = prevButton;\n            this.nextButton = nextButton;\n        }\n    }\n    \n    // Setup tastiera migliorato\n    setupKeyboard() {\n        this.container.addEventListener('keydown', (e) => {\n            const scrollAmount = this.container.clientWidth * 0.8;\n            let handled = true;\n            \n            // Aggiungi classe per smooth scroll da tastiera\n            this.container.classList.add('keyboard-scrolling');\n            \n            switch(e.key) {\n                case 'ArrowLeft':\n                    this.smoothScroll(-scrollAmount);\n                    break;\n                case 'ArrowRight':\n                    this.smoothScroll(scrollAmount);\n                    break;\n                case 'Home':\n                    this.scrollToStart();\n                    break;\n                case 'End':\n                    this.scrollToEnd();\n                    break;\n                default:\n                    handled = false;\n            }\n            \n            if (handled) {\n                e.preventDefault();\n                // Rimuovi classe dopo animazione\n                setTimeout(() => {\n                    this.container.classList.remove('keyboard-scrolling');\n                }, 400);\n            } else {\n                this.container.classList.remove('keyboard-scrolling');\n            }\n        });\n    }\n    \n    // Setup mouse wheel - MIGLIORAMENTO CHIAVE\n    setupMouseWheel() {\n        let accumulatedDelta = 0;\n        let wheelTimeout;\n        \n        const wheelHandler = (e) => {\n            // Solo se container è in hover o focus\n            if (!this.container.matches(':hover, :focus-within')) return;\n            \n            e.preventDefault();\n            \n            // Accumula piccoli delta per scroll più fluido\n            accumulatedDelta += e.deltaY;\n            \n            clearTimeout(wheelTimeout);\n            wheelTimeout = setTimeout(() => {\n                if (Math.abs(accumulatedDelta) > 10) {\n                    // Normalizza e applica scroll\n                    const scrollAmount = Math.sign(accumulatedDelta) * Math.min(Math.abs(accumulatedDelta), 300);\n                    this.smoothScroll(scrollAmount);\n                }\n                accumulatedDelta = 0;\n            }, 50);\n        };\n        \n        // Aggiungi listener con passive false\n        this.container.addEventListener('wheel', wheelHandler, \n            this.supportsPassive ? { passive: false } : false\n        );\n    }\n    \n    // Setup touch con momentum migliorato\n    setupTouch() {\n        let startX = 0;\n        let scrollLeft = 0;\n        let isDragging = false;\n        let animationId = null;\n        let velocity = 0;\n        let lastX = 0;\n        let lastTime = 0;\n        \n        const startDragging = (pageX) => {\n            isDragging = true;\n            startX = pageX;\n            lastX = pageX;\n            scrollLeft = this.container.scrollLeft;\n            lastTime = Date.now();\n            velocity = 0;\n            \n            // Cancella animazioni\n            if (animationId) {\n                cancelAnimationFrame(animationId);\n            }\n            \n            // La classe 'active' è già nel CSS esistente per cursor grabbing\n            this.container.classList.add('active');\n        };\n        \n        const drag = (pageX) => {\n            if (!isDragging) return;\n            \n            const currentTime = Date.now();\n            const timeDelta = currentTime - lastTime;\n            const distance = pageX - lastX;\n            \n            // Calcola velocità\n            if (timeDelta > 0) {\n                velocity = distance / timeDelta * 16; // Normalizza a 60fps\n            }\n            \n            const walk = (pageX - startX) * 1.5;\n            this.container.scrollLeft = scrollLeft - walk;\n            \n            lastX = pageX;\n            lastTime = currentTime;\n        };\n        \n        const stopDragging = () => {\n            if (!isDragging) return;\n            \n            isDragging = false;\n            this.container.classList.remove('active');\n            \n            // Applica momentum se c'è velocità\n            if (Math.abs(velocity) > 2) {\n                const deceleration = 0.95;\n                \n                const animate = () => {\n                    if (Math.abs(velocity) > 0.5) {\n                        this.container.scrollLeft -= velocity;\n                        velocity *= deceleration;\n                        animationId = requestAnimationFrame(animate);\n                    } else {\n                        this.updateUI();\n                    }\n                };\n                \n                animate();\n            } else {\n                this.updateUI();\n            }\n        };\n        \n        // Mouse events\n        this.container.addEventListener('mousedown', (e) => {\n            startDragging(e.pageX);\n        });\n        \n        document.addEventListener('mousemove', (e) => {\n            drag(e.pageX);\n        });\n        \n        document.addEventListener('mouseup', stopDragging);\n        \n        // Touch events\n        this.container.addEventListener('touchstart', (e) => {\n            startDragging(e.touches[0].pageX);\n        }, this.supportsPassive ? { passive: true } : false);\n        \n        this.container.addEventListener('touchmove', (e) => {\n            drag(e.touches[0].pageX);\n        }, this.supportsPassive ? { passive: true } : false);\n        \n        this.container.addEventListener('touchend', stopDragging);\n        this.container.addEventListener('touchcancel', stopDragging);\n    }\n    \n    // Setup indicatore di scroll\n    setupScrollIndicator() {\n        // Crea progress bar solo se non nascosta da design\n        if (!this.wrapper.classList.contains('hide-progress')) {\n            const progressBar = document.createElement('div');\n            progressBar.className = 'scroll-progress';\n            progressBar.setAttribute('role', 'progressbar');\n            progressBar.setAttribute('aria-label', 'Progresso scroll');\n            progressBar.setAttribute('aria-valuemin', '0');\n            progressBar.setAttribute('aria-valuemax', '100');\n            \n            this.wrapper.appendChild(progressBar);\n            this.progressBar = progressBar;\n        }\n        \n        // Aggiorna su scroll\n        let ticking = false;\n        this.container.addEventListener('scroll', () => {\n            if (!ticking) {\n                requestAnimationFrame(() => {\n                    this.updateUI();\n                    ticking = false;\n                });\n                ticking = true;\n            }\n        }, this.supportsPassive ? { passive: true } : false);\n    }\n    \n    // Setup accessibilità\n    setupAccessibility() {\n        // ARIA labels\n        this.container.setAttribute('role', 'region');\n        this.container.setAttribute('aria-label', 'Contenuti scrollabili orizzontalmente');\n        \n        // Live region per annunci\n        const liveRegion = document.createElement('div');\n        liveRegion.className = 'sr-only';\n        liveRegion.setAttribute('role', 'status');\n        liveRegion.setAttribute('aria-live', 'polite');\n        liveRegion.setAttribute('aria-atomic', 'true');\n        liveRegion.style.cssText = `\n            position: absolute;\n            width: 1px;\n            height: 1px;\n            padding: 0;\n            margin: -1px;\n            overflow: hidden;\n            clip: rect(0,0,0,0);\n            white-space: nowrap;\n            border: 0;\n        `;\n        \n        this.wrapper.appendChild(liveRegion);\n        this.liveRegion = liveRegion;\n    }\n    \n    // Scroll fluido\n    smoothScroll(distance) {\n        if (this.supportsScrollBehavior) {\n            this.container.scrollBy({\n                left: distance,\n                behavior: 'smooth'\n            });\n        } else {\n            // Fallback animato\n            this.animateScroll(this.container.scrollLeft + distance);\n        }\n    }\n    \n    // Animazione scroll per fallback\n    animateScroll(target) {\n        const start = this.container.scrollLeft;\n        const distance = target - start;\n        const duration = 300;\n        let startTime = null;\n        \n        const animation = (currentTime) => {\n            if (!startTime) startTime = currentTime;\n            const elapsed = currentTime - startTime;\n            const progress = Math.min(elapsed / duration, 1);\n            \n            // Easing\n            const easeInOutQuad = progress < 0.5\n                ? 2 * progress * progress\n                : 1 - Math.pow(-2 * progress + 2, 2) / 2;\n            \n            this.container.scrollLeft = start + distance * easeInOutQuad;\n            \n            if (progress < 1) {\n                requestAnimationFrame(animation);\n            } else {\n                this.updateUI();\n            }\n        };\n        \n        requestAnimationFrame(animation);\n    }\n    \n    // Metodi di navigazione\n    scrollPrev() {\n        const scrollAmount = this.container.clientWidth * 0.8;\n        this.smoothScroll(-scrollAmount);\n        this.announce('Scorrimento a sinistra');\n    }\n    \n    scrollNext() {\n        const scrollAmount = this.container.clientWidth * 0.8;\n        this.smoothScroll(scrollAmount);\n        this.announce('Scorrimento a destra');\n    }\n    \n    scrollToStart() {\n        this.container.scrollTo({\n            left: 0,\n            behavior: this.supportsScrollBehavior ? 'smooth' : 'auto'\n        });\n        this.announce('Inizio dei contenuti');\n    }\n    \n    scrollToEnd() {\n        const maxScroll = this.container.scrollWidth - this.container.clientWidth;\n        this.container.scrollTo({\n            left: maxScroll,\n            behavior: this.supportsScrollBehavior ? 'smooth' : 'auto'\n        });\n        this.announce('Fine dei contenuti');\n    }\n    \n    // Aggiorna UI\n    updateUI() {\n        const scrollLeft = this.container.scrollLeft;\n        \n        // Calcola il gap tra le card (se usi gap in CSS)\n        const computedStyle = window.getComputedStyle(this.container);\n        const gap = parseFloat(computedStyle.gap) || 0;\n        \n        // Trova l'ultima card\n        const lastChild = this.container.lastElementChild;\n        const lastChildWidth = lastChild ? lastChild.offsetWidth : 0;\n        \n        // Calcola il maxScroll considerando l'ultima card e il padding\n        const maxScroll = this.container.scrollWidth - this.container.clientWidth;\n        const adjustedMaxScroll = Math.max(0, maxScroll - gap);\n        \n        // Aggiorna pulsanti con tolleranza\n        if (this.prevButton && this.nextButton) {\n            const tolerance = 5;\n            this.prevButton.disabled = scrollLeft <= tolerance;\n            this.nextButton.disabled = scrollLeft >= adjustedMaxScroll - tolerance;\n            \n            // Aggiorna ARIA\n            this.prevButton.setAttribute('aria-disabled', scrollLeft <= tolerance);\n            this.nextButton.setAttribute('aria-disabled', scrollLeft >= adjustedMaxScroll - tolerance);\n        }\n        \n        // Aggiorna progress bar\n        if (this.progressBar && adjustedMaxScroll > 0) {\n            const progress = Math.min(100, (scrollLeft / adjustedMaxScroll) * 100);\n            this.progressBar.style.width = `${progress}%`;\n            this.progressBar.setAttribute('aria-valuenow', Math.round(progress));\n        }\n    }\n    \n    // Verifica se un elemento è completamente visibile\n    isElementFullyVisible(element) {\n        const containerRect = this.container.getBoundingClientRect();\n        const elementRect = element.getBoundingClientRect();\n        \n        return elementRect.left >= containerRect.left && \n               elementRect.right <= containerRect.right;\n    }\n    \n    // Assicura che l'ultima card sia visibile dopo lo scroll\n    ensureLastCardVisible() {\n        const lastCard = this.container.lastElementChild;\n        if (!lastCard) return;\n        \n        if (!this.isElementFullyVisible(lastCard)) {\n            const containerRect = this.container.getBoundingClientRect();\n            const lastCardRect = lastCard.getBoundingClientRect();\n            const scrollAdjustment = lastCardRect.right - containerRect.right + 20;\n            \n            if (scrollAdjustment > 0) {\n                this.container.scrollLeft += scrollAdjustment;\n            }\n        }\n    }\n\n    // Annuncia a screen reader\n    announce(message) {\n        if (this.liveRegion) {\n            this.liveRegion.textContent = message;\n            // Reset dopo annuncio\n            setTimeout(() => {\n                this.liveRegion.textContent = '';\n            }, 1000);\n        }\n    }\n}\n\n// CSS da iniettare - Adattato per CSS Elementor esistente\nconst improvedStyles = `\n    <style id=\"improved-scroller-styles\">\n        /* Wrapper styles */\n        .elementor-scroller-wrapper {\n            position: relative;\n        }\n        \n        /* Nasconde scrollbar orizzontale su desktop mantenendo lo scroll */\n        .scrollable-container {\n            /* Firefox */\n            scrollbar-width: none;\n            \n            /* IE 10+ */\n            -ms-overflow-style: none;\n            \n            /* Aggiunge spazio per l'ultima card */\n            padding-right: 30px;\n            box-sizing: content-box;\n        }\n        \n        /* Compensa il padding per il primo elemento */\n        .scrollable-container > *:first-child {\n            margin-left: 20px;\n        }\n        \n        /* Fix per Elementor - previeni che tagli il contenuto */\n        .elementor-widget-container {\n            overflow: visible !important;\n        }\n        \n        /* Fix per container con gap CSS */\n        .scrollable-container[style*=\"gap\"] {\n            padding-right: 50px;\n        }\n        \n        /* Chrome, Safari, Opera, Edge */\n        .scrollable-container::-webkit-scrollbar {\n            width: 0 !important;\n            height: 0 !important;\n            display: none;\n        }\n        \n        .scrollable-container::-webkit-scrollbar-track {\n            background: transparent;\n        }\n        \n        .scrollable-container::-webkit-scrollbar-thumb {\n            background: transparent;\n            border: none;\n        }\n        \n        /* Supporto per browser più vecchi */\n        @supports not (scrollbar-width: none) {\n            .scrollable-container {\n                margin-bottom: -17px;\n                padding-bottom: 17px;\n            }\n        }\n        \n        /* Pulsanti navigazione */\n        .nav-button {\n            position: absolute;\n            top: 50%;\n            transform: translateY(-50%);\n            width: 48px;\n            height: 48px;\n            background: rgba(255, 255, 255, 0.95);\n            border: 1px solid #ddd;\n            border-radius: 50%;\n            cursor: pointer;\n            display: none;\n            align-items: center;\n            justify-content: center;\n            z-index: 10;\n            transition: all 0.3s ease;\n            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n            \n            /* Assicura che sia sopra il contenuto */\n            pointer-events: auto;\n        }\n        \n        .nav-button {\n            background: var(--e-global-color-primary);\n        }\n        \n        .nav-button svg {\n            width: 24px;\n            height: 24px;\n            color: #fff;\n        }\n        \n        .nav-button:hover:not(:disabled) {\n            background: var(--e-global-color-2de3d7d);\n            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n            transform: translateY(-50%) scale(1.1);\n        }\n        \n        .nav-button:active {\n            transform: translateY(-50%) scale(0.95);\n        }\n        \n        .nav-button:hover:not(:disabled) {\n            background: var(--e-global-color-2de3d7d);\n            border-color: var(--e-global-color-2de3d7d);\n        }\n        \n        .nav-button:active {\n            transform: translateY(-50%) scale(0.95);\n        }\n        \n        .nav-button:disabled {\n            opacity: 0.3;\n            cursor: not-allowed;\n        }\n        \n        .nav-button:disabled:hover {\n            transform: translateY(-50%);\n        }\n        \n        .nav-button:focus {\n            outline: 2px solid var(--e-global-color-primary, #0066cc);\n            outline-offset: 2px;\n        }\n        \n        .nav-prev {\n            left: 10px;\n        }\n        \n        .nav-next {\n            right: 10px;\n        }\n        \n        /* Mostra pulsanti su desktop */\n        @media (min-width: 1024px) {\n            .elementor-scroller-wrapper:hover .nav-button:not(:disabled) {\n                display: flex;\n            }\n            \n            .elementor-scroller-wrapper:focus-within .nav-button:not(:disabled) {\n                display: flex;\n            }\n        }\n        \n        /* Progress bar sottile */\n        .scroll-progress {\n            position: absolute;\n            bottom: 0;\n            left: 0;\n            height: 3px;\n            background: var(--e-global-color-primary, #0066cc);\n            transition: width 0.2s ease, opacity 0.3s ease;\n            pointer-events: none;\n            z-index: 5;\n            opacity: 0;\n            border-radius: 0 3px 3px 0;\n        }\n        \n        /* Mostra progress bar su hover/focus */\n        .elementor-scroller-wrapper:hover .scroll-progress,\n        .elementor-scroller-wrapper:focus-within .scroll-progress {\n            opacity: 0.7;\n        }\n        \n        /* Non sovrascriviamo cursor - già impostato nel CSS esistente */\n        \n        /* Focus migliore - solo se non già presente */\n        .scrollable-container:focus-visible {\n            outline: 2px solid var(--e-global-color-primary, #0066cc);\n            outline-offset: 2px;\n        }\n        \n        /* Supporta la classe keyboard-scrolling esistente */\n        .scrollable-container.keyboard-scrolling {\n            scroll-behavior: smooth !important;\n        }\n        \n        /* Screen reader only */\n        .sr-only {\n            position: absolute;\n            width: 1px;\n            height: 1px;\n            padding: 0;\n            margin: -1px;\n            overflow: hidden;\n            clip: rect(0,0,0,0);\n            white-space: nowrap;\n            border: 0;\n        }\n        \n        /* Indicatori di pagina opzionali */\n        .scroll-indicators {\n            display: flex;\n            justify-content: center;\n            gap: 8px;\n            margin-top: 16px;\n            padding: 8px;\n        }\n        \n        .scroll-indicator {\n            width: 8px;\n            height: 8px;\n            border-radius: 50%;\n            background: #ddd;\n            transition: all 0.3s ease;\n            cursor: pointer;\n            border: none;\n            padding: 0;\n        }\n        \n        .scroll-indicator:hover {\n            background: #999;\n            transform: scale(1.2);\n        }\n        \n        .scroll-indicator.active {\n            background: var(--e-global-color-primary, #333);\n            width: 24px;\n            border-radius: 4px;\n        }\n        \n        /* Supporto reduced motion */\n        @media (prefers-reduced-motion: reduce) {\n            * {\n                animation-duration: 0.01ms !important;\n                animation-iteration-count: 1 !important;\n                transition-duration: 0.01ms !important;\n            }\n            \n            .scrollable-container {\n                scroll-behavior: auto !important;\n            }\n            \n            .nav-button {\n                transition: none !important;\n            }\n            \n            .scroll-progress {\n                transition: none !important;\n            }\n        }\n        \n        /* Migliora contrasto per accessibilità */\n        @media (prefers-contrast: high) {\n            .nav-button {\n                background: #fff;\n                border: 2px solid #000;\n            }\n            \n            .nav-button:hover:not(:disabled) {\n                background: #000;\n                color: #fff;\n            }\n            \n            .nav-button:hover:not(:disabled) svg {\n                color: #fff;\n            }\n            \n            .scroll-progress {\n                background: #000;\n            }\n        }\n        \n        /* Dark mode support */\n        @media (prefers-color-scheme: dark) {\n            .nav-button {\n                background: var(--e-global-color-primary);\n                border-color: var(--e-global-color-primary);\n            }\n            \n            .nav-button svg {\n                color: #fff;\n            }\n            \n            .nav-button:hover:not(:disabled) {\n                background: var(--e-global-color-2de3d7d);\n                border-color: var(--e-global-color-2de3d7d);\n            }\n            \n            .scroll-indicator {\n                background: #555;\n            }\n            \n            .scroll-indicator:hover {\n                background: #777;\n            }\n            \n            .scroll-indicator.active {\n                background: #fff;\n            }\n        }\n    </style>\n`;\n\n// Inizializzazione\nfunction initImprovedScrollers() {\n    // Inietta stili se non presenti\n    if (!document.getElementById('improved-scroller-styles')) {\n        document.head.insertAdjacentHTML('beforeend', improvedStyles);\n    }\n    \n    // Trova tutti i container scrollabili\n    const containers = document.querySelectorAll('.scrollable-container');\n    \n    containers.forEach(container => {\n        // Skip se già inizializzato\n        if (container.hasAttribute('data-improved-scroller')) return;\n        \n        // Inizializza solo se c'è overflow orizzontale\n        if (container.scrollWidth > container.clientWidth) {\n            new ImprovedElementorScroller(container);\n            container.setAttribute('data-improved-scroller', 'true');\n        }\n    });\n}\n\n// Inizializza quando DOM è pronto\nif (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', initImprovedScrollers);\n} else {\n    initImprovedScrollers();\n}\n\n// Hook per Elementor\nif (typeof jQuery !== 'undefined') {\n    jQuery(window).on('elementor/frontend/init', function() {\n        if (window.elementorFrontend && window.elementorFrontend.hooks) {\n            elementorFrontend.hooks.addAction('frontend/element_ready/widget', function() {\n                setTimeout(initImprovedScrollers, 100);\n            });\n        }\n    });\n} else {\n    // Fallback observer per contenuti dinamici\n    const observer = new MutationObserver(() => {\n        initImprovedScrollers();\n    });\n    \n    observer.observe(document.body, {\n        childList: true,\n        subtree: true\n    });\n}\n\n// Re-inizializza su resize\nlet resizeTimeout;\nwindow.addEventListener('resize', () => {\n    clearTimeout(resizeTimeout);\n    resizeTimeout = setTimeout(initImprovedScrollers, 250);\n});\n\nconsole.log('Improved Elementor Scroller v2.0 loaded');","structuredPatch":[{"oldStart":373,"oldLines":8,"newStart":373,"newLines":31,"lines":["     }","     ","     scrollNext() {","-        const scrollAmount = this.container.clientWidth * 0.8;","-        this.smoothScroll(scrollAmount);","+        const cards = Array.from(this.container.children);","+        const containerRect = this.container.getBoundingClientRect();","+        ","+        // Trova la prima card non completamente visibile","+        let targetCard = cards.find(card => {","+            const cardRect = card.getBoundingClientRect();","+            return cardRect.left > containerRect.left && !this.isElementFullyVisible(card);","+        });","+        ","+        if (targetCard) {","+            // Scrolla fino alla card target","+            const targetPosition = targetCard.offsetLeft - this.container.offsetLeft;","+            this.container.scrollTo({","+                left: targetPosition,","+                behavior: this.supportsScrollBehavior ? 'smooth' : 'auto'","+            });","+        } else {","+            // Scroll standard se non ci sono card parzialmente visibili","+            const scrollAmount = this.container.clientWidth * 0.8;","+            this.smoothScroll(scrollAmount);","+        }","+        ","+        // Assicura che l'ultima card sia visibile dopo lo scroll","+        setTimeout(() => this.ensureLastCardVisible(), 350);","+        ","         this.announce('Scorrimento a destra');","     }","     "]}],"userModified":false,"replaceAll":false}}
{"parentUuid":"d962f4f8-ad28-450a-9b62-47cf83079a80","isSidechain":false,"userType":"external","cwd":"/Users/disconnesso/Sites/villastuart.it","sessionId":"6d59d7ee-cfab-4065-8105-2d5b96fcc40d","version":"1.0.61","gitBranch":"main","message":{"id":"msg_01TMjEUcezAkEDwCT1G3p718","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01X9Kw1KzmRJXMQUnawcHmQT","name":"TodoWrite","input":{"todos":[{"id":"1","content":"Add CSS padding solution for last card visibility","status":"completed","priority":"high"},{"id":"2","content":"Improve updateUI method with better maxScroll calculation","status":"completed","priority":"high"},{"id":"3","content":"Add methods to check element visibility and ensure last card is visible","status":"completed","priority":"high"},{"id":"4","content":"Enhance scrollNext method with card-based navigation","status":"completed","priority":"high"},{"id":"5","content":"Add scroll spacer solution as fallback","status":"in_progress","priority":"medium"}]}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":0,"cache_creation_input_tokens":11379,"cache_read_input_tokens":80371,"output_tokens":223,"service_tier":"standard"}},"requestId":"req_011CRau73B7HfCSi7koSffuv","type":"assistant","uuid":"ca1e704c-c283-48a0-8a49-176b86324357","timestamp":"2025-07-29T07:15:58.348Z"}
{"parentUuid":"ca1e704c-c283-48a0-8a49-176b86324357","isSidechain":false,"userType":"external","cwd":"/Users/disconnesso/Sites/villastuart.it","sessionId":"6d59d7ee-cfab-4065-8105-2d5b96fcc40d","version":"1.0.61","gitBranch":"main","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01X9Kw1KzmRJXMQUnawcHmQT","type":"tool_result","content":"Todos have been modified successfully. Ensure that you continue to use the todo list to track your progress. Please proceed with the current tasks if applicable"}]},"uuid":"08729168-3480-4239-8f7b-1bb5abe673ad","timestamp":"2025-07-29T07:15:58.382Z","toolUseResult":{"oldTodos":[{"content":"Add CSS padding solution for last card visibility","status":"completed","priority":"high","id":"1"},{"content":"Improve updateUI method with better maxScroll calculation","status":"completed","priority":"high","id":"2"},{"content":"Add methods to check element visibility and ensure last card is visible","status":"completed","priority":"high","id":"3"},{"content":"Enhance scrollNext method with card-based navigation","status":"in_progress","priority":"high","id":"4"},{"content":"Add scroll spacer solution as fallback","status":"pending","priority":"medium","id":"5"}],"newTodos":[{"content":"Add CSS padding solution for last card visibility","status":"completed","priority":"high","id":"1"},{"content":"Improve updateUI method with better maxScroll calculation","status":"completed","priority":"high","id":"2"},{"content":"Add methods to check element visibility and ensure last card is visible","status":"completed","priority":"high","id":"3"},{"content":"Enhance scrollNext method with card-based navigation","status":"completed","priority":"high","id":"4"},{"content":"Add scroll spacer solution as fallback","status":"in_progress","priority":"medium","id":"5"}]}}
{"parentUuid":"08729168-3480-4239-8f7b-1bb5abe673ad","isSidechain":false,"userType":"external","cwd":"/Users/disconnesso/Sites/villastuart.it","sessionId":"6d59d7ee-cfab-4065-8105-2d5b96fcc40d","version":"1.0.61","gitBranch":"main","message":{"id":"msg_01Gjh1qh2Q5wwCbGPtWLRSpT","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01FRfApCPBgxT7vR593crxrD","name":"Edit","input":{"file_path":"/Users/disconnesso/Sites/villastuart.it/wp-content/themes/hello-villa-stuart/assets/js/improved-scroller.js","old_string":"// Inizializzazione\nfunction initImprovedScrollers() {\n    // Inietta stili se non presenti\n    if (!document.getElementById('improved-scroller-styles')) {\n        document.head.insertAdjacentHTML('beforeend', improvedStyles);\n    }\n    \n    // Trova tutti i container scrollabili\n    const containers = document.querySelectorAll('.scrollable-container');\n    \n    containers.forEach(container => {\n        // Skip se già inizializzato\n        if (container.hasAttribute('data-improved-scroller')) return;\n        \n        // Inizializza solo se c'è overflow orizzontale\n        if (container.scrollWidth > container.clientWidth) {\n            new ImprovedElementorScroller(container);\n            container.setAttribute('data-improved-scroller', 'true');\n        }\n    });\n}","new_string":"// Aggiungi spacer per l'ultima card come fallback\nfunction addScrollSpacer(container) {\n    // Aggiungi un elemento vuoto alla fine come spacer se non esiste\n    if (!container.querySelector('.scroll-spacer')) {\n        const spacer = document.createElement('div');\n        spacer.className = 'scroll-spacer';\n        spacer.style.cssText = 'flex-shrink: 0; width: 20px; height: 1px; pointer-events: none;';\n        spacer.setAttribute('aria-hidden', 'true');\n        container.appendChild(spacer);\n    }\n}\n\n// Inizializzazione\nfunction initImprovedScrollers() {\n    // Inietta stili se non presenti\n    if (!document.getElementById('improved-scroller-styles')) {\n        document.head.insertAdjacentHTML('beforeend', improvedStyles);\n    }\n    \n    // Trova tutti i container scrollabili\n    const containers = document.querySelectorAll('.scrollable-container');\n    \n    containers.forEach(container => {\n        // Skip se già inizializzato\n        if (container.hasAttribute('data-improved-scroller')) return;\n        \n        // Inizializza solo se c'è overflow orizzontale\n        if (container.scrollWidth > container.clientWidth) {\n            // Aggiungi spacer come fallback\n            addScrollSpacer(container);\n            \n            new ImprovedElementorScroller(container);\n            container.setAttribute('data-improved-scroller', 'true');\n        }\n    });\n}"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":0,"cache_creation_input_tokens":446,"cache_read_input_tokens":91750,"output_tokens":718,"service_tier":"standard"}},"requestId":"req_011CRau7bcjtMe9JXaF1bf1q","type":"assistant","uuid":"bcb55b98-6263-4ba8-a56b-436fa8d56f3a","timestamp":"2025-07-29T07:16:09.747Z"}
{"parentUuid":"bcb55b98-6263-4ba8-a56b-436fa8d56f3a","isSidechain":false,"userType":"external","cwd":"/Users/disconnesso/Sites/villastuart.it","sessionId":"6d59d7ee-cfab-4065-8105-2d5b96fcc40d","version":"1.0.61","gitBranch":"main","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01FRfApCPBgxT7vR593crxrD","type":"tool_result","content":"The file /Users/disconnesso/Sites/villastuart.it/wp-content/themes/hello-villa-stuart/assets/js/improved-scroller.js has been updated. Here's the result of running `cat -n` on a snippet of the edited file:\n     1→/**\n     2→ * Slider Orizzontale Migliorato per Elementor\n     3→ * Versione 2.0 - Ottimizzato per Desktop con Accessibilità\n     4→ */\n     5→\n     6→// Classe principale per gestire lo slider\n     7→class ImprovedElementorScroller {\n     8→    constructor(container) {\n     9→        this.container = container;\n    10→        this.wrapper = null;\n    11→        this.isScrolling = false;\n    12→        this.scrollTimeout = null;\n    13→        \n    14→        // Feature detection\n    15→        this.supportsPassive = this.checkPassiveSupport();\n    16→        this.supportsScrollBehavior = 'scrollBehavior' in document.documentElement.style;\n    17→        \n    18→        // Inizializza\n    19→        this.init();\n    20→    }\n    21→    \n    22→    // Check supporto passive listeners\n    23→    checkPassiveSupport() {\n    24→        let supportsPassive = false;\n    25→        try {\n    26→            const opts = Object.defineProperty({}, 'passive', {\n    27→                get: () => { supportsPassive = true; }\n    28→            });\n    29→            window.addEventListener('testPassive', null, opts);\n    30→            window.removeEventListener('testPassive', null, opts);\n    31→        } catch (e) {}\n    32→        return supportsPassive;\n    33→    }\n    34→    \n    35→    init() {\n    36→        // Crea wrapper per aggiungere controlli senza modificare HTML\n    37→        this.wrapContainer();\n    38→        \n    39→        // Setup features\n    40→        this.setupNavButtons();\n    41→        this.setupKeyboard();\n    42→        this.setupMouseWheel();\n    43→        this.setupTouch();\n    44→        this.setupScrollIndicator();\n    45→        this.setupAccessibility();\n    46→        \n    47→        // Aggiorna stato iniziale\n    48→        this.updateUI();\n    49→    }\n    50→    \n    51→    // Wrap container esistente per aggiungere controlli\n    52→    wrapContainer() {\n    53→        // Se già wrappato, esci\n    54→        if (this.container.parentElement.classList.contains('elementor-scroller-wrapper')) {\n    55→            this.wrapper = this.container.parentElement;\n    56→            return;\n    57→        }\n    58→        \n    59→        // Crea wrapper\n    60→        this.wrapper = document.createElement('div');\n    61→        this.wrapper.className = 'elementor-scroller-wrapper';\n    62→        this.wrapper.style.position = 'relative';\n    63→        \n    64→        // Inserisci wrapper\n    65→        this.container.parentNode.insertBefore(this.wrapper, this.container);\n    66→        this.wrapper.appendChild(this.container);\n    67→    }\n    68→    \n    69→    // Setup pulsanti navigazione\n    70→    setupNavButtons() {\n    71→        // Crea pulsanti solo se non esistono\n    72→        if (!this.wrapper.querySelector('.nav-button')) {\n    73→            // Pulsante precedente\n    74→            const prevButton = document.createElement('button');\n    75→            prevButton.className = 'nav-button nav-prev';\n    76→            prevButton.innerHTML = `\n    77→                <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n    78→                    <path d=\"M15 18l-6-6 6-6\"/>\n    79→                </svg>\n    80→            `;\n    81→            prevButton.setAttribute('aria-label', 'Scorri a sinistra');\n    82→            prevButton.addEventListener('click', () => this.scrollPrev());\n    83→            \n    84→            // Pulsante successivo\n    85→            const nextButton = document.createElement('button');\n    86→            nextButton.className = 'nav-button nav-next';\n    87→            nextButton.innerHTML = `\n    88→                <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n    89→                    <path d=\"M9 18l6-6-6-6\"/>\n    90→                </svg>\n    91→            `;\n    92→            nextButton.setAttribute('aria-label', 'Scorri a destra');\n    93→            nextButton.addEventListener('click', () => this.scrollNext());\n    94→            \n    95→            // Aggiungi al wrapper\n    96→            this.wrapper.appendChild(prevButton);\n    97→            this.wrapper.appendChild(nextButton);\n    98→            \n    99→            // Store references\n   100→            this.prevButton = prevButton;\n   101→            this.nextButton = nextButton;\n   102→        }\n   103→    }\n   104→    \n   105→    // Setup tastiera migliorato\n   106→    setupKeyboard() {\n   107→        this.container.addEventListener('keydown', (e) => {\n   108→            const scrollAmount = this.container.clientWidth * 0.8;\n   109→            let handled = true;\n   110→            \n   111→            // Aggiungi classe per smooth scroll da tastiera\n   112→            this.container.classList.add('keyboard-scrolling');\n   113→            \n   114→            switch(e.key) {\n   115→                case 'ArrowLeft':\n   116→                    this.smoothScroll(-scrollAmount);\n   117→                    break;\n   118→                case 'ArrowRight':\n   119→                    this.smoothScroll(scrollAmount);\n   120→                    break;\n   121→                case 'Home':\n   122→                    this.scrollToStart();\n   123→                    break;\n   124→                case 'End':\n   125→                    this.scrollToEnd();\n   126→                    break;\n   127→                default:\n   128→                    handled = false;\n   129→            }\n   130→            \n   131→            if (handled) {\n   132→                e.preventDefault();\n   133→                // Rimuovi classe dopo animazione\n   134→                setTimeout(() => {\n   135→                    this.container.classList.remove('keyboard-scrolling');\n   136→                }, 400);\n   137→            } else {\n   138→                this.container.classList.remove('keyboard-scrolling');\n   139→            }\n   140→        });\n   141→    }\n   142→    \n   143→    // Setup mouse wheel - MIGLIORAMENTO CHIAVE\n   144→    setupMouseWheel() {\n   145→        let accumulatedDelta = 0;\n   146→        let wheelTimeout;\n   147→        \n   148→        const wheelHandler = (e) => {\n   149→            // Solo se container è in hover o focus\n   150→            if (!this.container.matches(':hover, :focus-within')) return;\n   151→            \n   152→            e.preventDefault();\n   153→            \n   154→            // Accumula piccoli delta per scroll più fluido\n   155→            accumulatedDelta += e.deltaY;\n   156→            \n   157→            clearTimeout(wheelTimeout);\n   158→            wheelTimeout = setTimeout(() => {\n   159→                if (Math.abs(accumulatedDelta) > 10) {\n   160→                    // Normalizza e applica scroll\n   161→                    const scrollAmount = Math.sign(accumulatedDelta) * Math.min(Math.abs(accumulatedDelta), 300);\n   162→                    this.smoothScroll(scrollAmount);\n   163→                }\n   164→                accumulatedDelta = 0;\n   165→            }, 50);\n   166→        };\n   167→        \n   168→        // Aggiungi listener con passive false\n   169→        this.container.addEventListener('wheel', wheelHandler, \n   170→            this.supportsPassive ? { passive: false } : false\n   171→        );\n   172→    }\n   173→    \n   174→    // Setup touch con momentum migliorato\n   175→    setupTouch() {\n   176→        let startX = 0;\n   177→        let scrollLeft = 0;\n   178→        let isDragging = false;\n   179→        let animationId = null;\n   180→        let velocity = 0;\n   181→        let lastX = 0;\n   182→        let lastTime = 0;\n   183→        \n   184→        const startDragging = (pageX) => {\n   185→            isDragging = true;\n   186→            startX = pageX;\n   187→            lastX = pageX;\n   188→            scrollLeft = this.container.scrollLeft;\n   189→            lastTime = Date.now();\n   190→            velocity = 0;\n   191→            \n   192→            // Cancella animazioni\n   193→            if (animationId) {\n   194→                cancelAnimationFrame(animationId);\n   195→            }\n   196→            \n   197→            // La classe 'active' è già nel CSS esistente per cursor grabbing\n   198→            this.container.classList.add('active');\n   199→        };\n   200→        \n   201→        const drag = (pageX) => {\n   202→            if (!isDragging) return;\n   203→            \n   204→            const currentTime = Date.now();\n   205→            const timeDelta = currentTime - lastTime;\n   206→            const distance = pageX - lastX;\n   207→            \n   208→            // Calcola velocità\n   209→            if (timeDelta > 0) {\n   210→                velocity = distance / timeDelta * 16; // Normalizza a 60fps\n   211→            }\n   212→            \n   213→            const walk = (pageX - startX) * 1.5;\n   214→            this.container.scrollLeft = scrollLeft - walk;\n   215→            \n   216→            lastX = pageX;\n   217→            lastTime = currentTime;\n   218→        };\n   219→        \n   220→        const stopDragging = () => {\n   221→            if (!isDragging) return;\n   222→            \n   223→            isDragging = false;\n   224→            this.container.classList.remove('active');\n   225→            \n   226→            // Applica momentum se c'è velocità\n   227→            if (Math.abs(velocity) > 2) {\n   228→                const deceleration = 0.95;\n   229→                \n   230→                const animate = () => {\n   231→                    if (Math.abs(velocity) > 0.5) {\n   232→                        this.container.scrollLeft -= velocity;\n   233→                        velocity *= deceleration;\n   234→                        animationId = requestAnimationFrame(animate);\n   235→                    } else {\n   236→                        this.updateUI();\n   237→                    }\n   238→                };\n   239→                \n   240→                animate();\n   241→            } else {\n   242→                this.updateUI();\n   243→            }\n   244→        };\n   245→        \n   246→        // Mouse events\n   247→        this.container.addEventListener('mousedown', (e) => {\n   248→            startDragging(e.pageX);\n   249→        });\n   250→        \n   251→        document.addEventListener('mousemove', (e) => {\n   252→            drag(e.pageX);\n   253→        });\n   254→        \n   255→        document.addEventListener('mouseup', stopDragging);\n   256→        \n   257→        // Touch events\n   258→        this.container.addEventListener('touchstart', (e) => {\n   259→            startDragging(e.touches[0].pageX);\n   260→        }, this.supportsPassive ? { passive: true } : false);\n   261→        \n   262→        this.container.addEventListener('touchmove', (e) => {\n   263→            drag(e.touches[0].pageX);\n   264→        }, this.supportsPassive ? { passive: true } : false);\n   265→        \n   266→        this.container.addEventListener('touchend', stopDragging);\n   267→        this.container.addEventListener('touchcancel', stopDragging);\n   268→    }\n   269→    \n   270→    // Setup indicatore di scroll\n   271→    setupScrollIndicator() {\n   272→        // Crea progress bar solo se non nascosta da design\n   273→        if (!this.wrapper.classList.contains('hide-progress')) {\n   274→            const progressBar = document.createElement('div');\n   275→            progressBar.className = 'scroll-progress';\n   276→            progressBar.setAttribute('role', 'progressbar');\n   277→            progressBar.setAttribute('aria-label', 'Progresso scroll');\n   278→            progressBar.setAttribute('aria-valuemin', '0');\n   279→            progressBar.setAttribute('aria-valuemax', '100');\n   280→            \n   281→            this.wrapper.appendChild(progressBar);\n   282→            this.progressBar = progressBar;\n   283→        }\n   284→        \n   285→        // Aggiorna su scroll\n   286→        let ticking = false;\n   287→        this.container.addEventListener('scroll', () => {\n   288→            if (!ticking) {\n   289→                requestAnimationFrame(() => {\n   290→                    this.updateUI();\n   291→                    ticking = false;\n   292→                });\n   293→                ticking = true;\n   294→            }\n   295→        }, this.supportsPassive ? { passive: true } : false);\n   296→    }\n   297→    \n   298→    // Setup accessibilità\n   299→    setupAccessibility() {\n   300→        // ARIA labels\n   301→        this.container.setAttribute('role', 'region');\n   302→        this.container.setAttribute('aria-label', 'Contenuti scrollabili orizzontalmente');\n   303→        \n   304→        // Live region per annunci\n   305→        const liveRegion = document.createElement('div');\n   306→        liveRegion.className = 'sr-only';\n   307→        liveRegion.setAttribute('role', 'status');\n   308→        liveRegion.setAttribute('aria-live', 'polite');\n   309→        liveRegion.setAttribute('aria-atomic', 'true');\n   310→        liveRegion.style.cssText = `\n   311→            position: absolute;\n   312→            width: 1px;\n   313→            height: 1px;\n   314→            padding: 0;\n   315→            margin: -1px;\n   316→            overflow: hidden;\n   317→            clip: rect(0,0,0,0);\n   318→            white-space: nowrap;\n   319→            border: 0;\n   320→        `;\n   321→        \n   322→        this.wrapper.appendChild(liveRegion);\n   323→        this.liveRegion = liveRegion;\n   324→    }\n   325→    \n   326→    // Scroll fluido\n   327→    smoothScroll(distance) {\n   328→        if (this.supportsScrollBehavior) {\n   329→            this.container.scrollBy({\n   330→                left: distance,\n   331→                behavior: 'smooth'\n   332→            });\n   333→        } else {\n   334→            // Fallback animato\n   335→            this.animateScroll(this.container.scrollLeft + distance);\n   336→        }\n   337→    }\n   338→    \n   339→    // Animazione scroll per fallback\n   340→    animateScroll(target) {\n   341→        const start = this.container.scrollLeft;\n   342→        const distance = target - start;\n   343→        const duration = 300;\n   344→        let startTime = null;\n   345→        \n   346→        const animation = (currentTime) => {\n   347→            if (!startTime) startTime = currentTime;\n   348→            const elapsed = currentTime - startTime;\n   349→            const progress = Math.min(elapsed / duration, 1);\n   350→            \n   351→            // Easing\n   352→            const easeInOutQuad = progress < 0.5\n   353→                ? 2 * progress * progress\n   354→                : 1 - Math.pow(-2 * progress + 2, 2) / 2;\n   355→            \n   356→            this.container.scrollLeft = start + distance * easeInOutQuad;\n   357→            \n   358→            if (progress < 1) {\n   359→                requestAnimationFrame(animation);\n   360→            } else {\n   361→                this.updateUI();\n   362→            }\n   363→        };\n   364→        \n   365→        requestAnimationFrame(animation);\n   366→    }\n   367→    \n   368→    // Metodi di navigazione\n   369→    scrollPrev() {\n   370→        const scrollAmount = this.container.clientWidth * 0.8;\n   371→        this.smoothScroll(-scrollAmount);\n   372→        this.announce('Scorrimento a sinistra');\n   373→    }\n   374→    \n   375→    scrollNext() {\n   376→        const cards = Array.from(this.container.children);\n   377→        const containerRect = this.container.getBoundingClientRect();\n   378→        \n   379→        // Trova la prima card non completamente visibile\n   380→        let targetCard = cards.find(card => {\n   381→            const cardRect = card.getBoundingClientRect();\n   382→            return cardRect.left > containerRect.left && !this.isElementFullyVisible(card);\n   383→        });\n   384→        \n   385→        if (targetCard) {\n   386→            // Scrolla fino alla card target\n   387→            const targetPosition = targetCard.offsetLeft - this.container.offsetLeft;\n   388→            this.container.scrollTo({\n   389→                left: targetPosition,\n   390→                behavior: this.supportsScrollBehavior ? 'smooth' : 'auto'\n   391→            });\n   392→        } else {\n   393→            // Scroll standard se non ci sono card parzialmente visibili\n   394→            const scrollAmount = this.container.clientWidth * 0.8;\n   395→            this.smoothScroll(scrollAmount);\n   396→        }\n   397→        \n   398→        // Assicura che l'ultima card sia visibile dopo lo scroll\n   399→        setTimeout(() => this.ensureLastCardVisible(), 350);\n   400→        \n   401→        this.announce('Scorrimento a destra');\n   402→    }\n   403→    \n   404→    scrollToStart() {\n   405→        this.container.scrollTo({\n   406→            left: 0,\n   407→            behavior: this.supportsScrollBehavior ? 'smooth' : 'auto'\n   408→        });\n   409→        this.announce('Inizio dei contenuti');\n   410→    }\n   411→    \n   412→    scrollToEnd() {\n   413→        const maxScroll = this.container.scrollWidth - this.container.clientWidth;\n   414→        this.container.scrollTo({\n   415→            left: maxScroll,\n   416→            behavior: this.supportsScrollBehavior ? 'smooth' : 'auto'\n   417→        });\n   418→        this.announce('Fine dei contenuti');\n   419→    }\n   420→    \n   421→    // Aggiorna UI\n   422→    updateUI() {\n   423→        const scrollLeft = this.container.scrollLeft;\n   424→        \n   425→        // Calcola il gap tra le card (se usi gap in CSS)\n   426→        const computedStyle = window.getComputedStyle(this.container);\n   427→        const gap = parseFloat(computedStyle.gap) || 0;\n   428→        \n   429→        // Trova l'ultima card\n   430→        const lastChild = this.container.lastElementChild;\n   431→        const lastChildWidth = lastChild ? lastChild.offsetWidth : 0;\n   432→        \n   433→        // Calcola il maxScroll considerando l'ultima card e il padding\n   434→        const maxScroll = this.container.scrollWidth - this.container.clientWidth;\n   435→        const adjustedMaxScroll = Math.max(0, maxScroll - gap);\n   436→        \n   437→        // Aggiorna pulsanti con tolleranza\n   438→        if (this.prevButton && this.nextButton) {\n   439→            const tolerance = 5;\n   440→            this.prevButton.disabled = scrollLeft <= tolerance;\n   441→            this.nextButton.disabled = scrollLeft >= adjustedMaxScroll - tolerance;\n   442→            \n   443→            // Aggiorna ARIA\n   444→            this.prevButton.setAttribute('aria-disabled', scrollLeft <= tolerance);\n   445→            this.nextButton.setAttribute('aria-disabled', scrollLeft >= adjustedMaxScroll - tolerance);\n   446→        }\n   447→        \n   448→        // Aggiorna progress bar\n   449→        if (this.progressBar && adjustedMaxScroll > 0) {\n   450→            const progress = Math.min(100, (scrollLeft / adjustedMaxScroll) * 100);\n   451→            this.progressBar.style.width = `${progress}%`;\n   452→            this.progressBar.setAttribute('aria-valuenow', Math.round(progress));\n   453→        }\n   454→    }\n   455→    \n   456→    // Verifica se un elemento è completamente visibile\n   457→    isElementFullyVisible(element) {\n   458→        const containerRect = this.container.getBoundingClientRect();\n   459→        const elementRect = element.getBoundingClientRect();\n   460→        \n   461→        return elementRect.left >= containerRect.left && \n   462→               elementRect.right <= containerRect.right;\n   463→    }\n   464→    \n   465→    // Assicura che l'ultima card sia visibile dopo lo scroll\n   466→    ensureLastCardVisible() {\n   467→        const lastCard = this.container.lastElementChild;\n   468→        if (!lastCard) return;\n   469→        \n   470→        if (!this.isElementFullyVisible(lastCard)) {\n   471→            const containerRect = this.container.getBoundingClientRect();\n   472→            const lastCardRect = lastCard.getBoundingClientRect();\n   473→            const scrollAdjustment = lastCardRect.right - containerRect.right + 20;\n   474→            \n   475→            if (scrollAdjustment > 0) {\n   476→                this.container.scrollLeft += scrollAdjustment;\n   477→            }\n   478→        }\n   479→    }\n   480→\n   481→    // Annuncia a screen reader\n   482→    announce(message) {\n   483→        if (this.liveRegion) {\n   484→            this.liveRegion.textContent = message;\n   485→            // Reset dopo annuncio\n   486→            setTimeout(() => {\n   487→                this.liveRegion.textContent = '';\n   488→            }, 1000);\n   489→        }\n   490→    }\n   491→}\n   492→\n   493→// CSS da iniettare - Adattato per CSS Elementor esistente\n   494→const improvedStyles = `\n   495→    <style id=\"improved-scroller-styles\">\n   496→        /* Wrapper styles */\n   497→        .elementor-scroller-wrapper {\n   498→            position: relative;\n   499→        }\n   500→        \n   501→        /* Nasconde scrollbar orizzontale su desktop mantenendo lo scroll */\n   502→        .scrollable-container {\n   503→            /* Firefox */\n   504→            scrollbar-width: none;\n   505→            \n   506→            /* IE 10+ */\n   507→            -ms-overflow-style: none;\n   508→            \n   509→            /* Aggiunge spazio per l'ultima card */\n   510→            padding-right: 30px;\n   511→            box-sizing: content-box;\n   512→        }\n   513→        \n   514→        /* Compensa il padding per il primo elemento */\n   515→        .scrollable-container > *:first-child {\n   516→            margin-left: 20px;\n   517→        }\n   518→        \n   519→        /* Fix per Elementor - previeni che tagli il contenuto */\n   520→        .elementor-widget-container {\n   521→            overflow: visible !important;\n   522→        }\n   523→        \n   524→        /* Fix per container con gap CSS */\n   525→        .scrollable-container[style*=\"gap\"] {\n   526→            padding-right: 50px;\n   527→        }\n   528→        \n   529→        /* Chrome, Safari, Opera, Edge */\n   530→        .scrollable-container::-webkit-scrollbar {\n   531→            width: 0 !important;\n   532→            height: 0 !important;\n   533→            display: none;\n   534→        }\n   535→        \n   536→        .scrollable-container::-webkit-scrollbar-track {\n   537→            background: transparent;\n   538→        }\n   539→        \n   540→        .scrollable-container::-webkit-scrollbar-thumb {\n   541→            background: transparent;\n   542→            border: none;\n   543→        }\n   544→        \n   545→        /* Supporto per browser più vecchi */\n   546→        @supports not (scrollbar-width: none) {\n   547→            .scrollable-container {\n   548→                margin-bottom: -17px;\n   549→                padding-bottom: 17px;\n   550→            }\n   551→        }\n   552→        \n   553→        /* Pulsanti navigazione */\n   554→        .nav-button {\n   555→            position: absolute;\n   556→            top: 50%;\n   557→            transform: translateY(-50%);\n   558→            width: 48px;\n   559→            height: 48px;\n   560→            background: rgba(255, 255, 255, 0.95);\n   561→            border: 1px solid #ddd;\n   562→            border-radius: 50%;\n   563→            cursor: pointer;\n   564→            display: none;\n   565→            align-items: center;\n   566→            justify-content: center;\n   567→            z-index: 10;\n   568→            transition: all 0.3s ease;\n   569→            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n   570→            \n   571→            /* Assicura che sia sopra il contenuto */\n   572→            pointer-events: auto;\n   573→        }\n   574→        \n   575→        .nav-button {\n   576→            background: var(--e-global-color-primary);\n   577→        }\n   578→        \n   579→        .nav-button svg {\n   580→            width: 24px;\n   581→            height: 24px;\n   582→            color: #fff;\n   583→        }\n   584→        \n   585→        .nav-button:hover:not(:disabled) {\n   586→            background: var(--e-global-color-2de3d7d);\n   587→            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n   588→            transform: translateY(-50%) scale(1.1);\n   589→        }\n   590→        \n   591→        .nav-button:active {\n   592→            transform: translateY(-50%) scale(0.95);\n   593→        }\n   594→        \n   595→        .nav-button:hover:not(:disabled) {\n   596→            background: var(--e-global-color-2de3d7d);\n   597→            border-color: var(--e-global-color-2de3d7d);\n   598→        }\n   599→        \n   600→        .nav-button:active {\n   601→            transform: translateY(-50%) scale(0.95);\n   602→        }\n   603→        \n   604→        .nav-button:disabled {\n   605→            opacity: 0.3;\n   606→            cursor: not-allowed;\n   607→        }\n   608→        \n   609→        .nav-button:disabled:hover {\n   610→            transform: translateY(-50%);\n   611→        }\n   612→        \n   613→        .nav-button:focus {\n   614→            outline: 2px solid var(--e-global-color-primary, #0066cc);\n   615→            outline-offset: 2px;\n   616→        }\n   617→        \n   618→        .nav-prev {\n   619→            left: 10px;\n   620→        }\n   621→        \n   622→        .nav-next {\n   623→            right: 10px;\n   624→        }\n   625→        \n   626→        /* Mostra pulsanti su desktop */\n   627→        @media (min-width: 1024px) {\n   628→            .elementor-scroller-wrapper:hover .nav-button:not(:disabled) {\n   629→                display: flex;\n   630→            }\n   631→            \n   632→            .elementor-scroller-wrapper:focus-within .nav-button:not(:disabled) {\n   633→                display: flex;\n   634→            }\n   635→        }\n   636→        \n   637→        /* Progress bar sottile */\n   638→        .scroll-progress {\n   639→            position: absolute;\n   640→            bottom: 0;\n   641→            left: 0;\n   642→            height: 3px;\n   643→            background: var(--e-global-color-primary, #0066cc);\n   644→            transition: width 0.2s ease, opacity 0.3s ease;\n   645→            pointer-events: none;\n   646→            z-index: 5;\n   647→            opacity: 0;\n   648→            border-radius: 0 3px 3px 0;\n   649→        }\n   650→        \n   651→        /* Mostra progress bar su hover/focus */\n   652→        .elementor-scroller-wrapper:hover .scroll-progress,\n   653→        .elementor-scroller-wrapper:focus-within .scroll-progress {\n   654→            opacity: 0.7;\n   655→        }\n   656→        \n   657→        /* Non sovrascriviamo cursor - già impostato nel CSS esistente */\n   658→        \n   659→        /* Focus migliore - solo se non già presente */\n   660→        .scrollable-container:focus-visible {\n   661→            outline: 2px solid var(--e-global-color-primary, #0066cc);\n   662→            outline-offset: 2px;\n   663→        }\n   664→        \n   665→        /* Supporta la classe keyboard-scrolling esistente */\n   666→        .scrollable-container.keyboard-scrolling {\n   667→            scroll-behavior: smooth !important;\n   668→        }\n   669→        \n   670→        /* Screen reader only */\n   671→        .sr-only {\n   672→            position: absolute;\n   673→            width: 1px;\n   674→            height: 1px;\n   675→            padding: 0;\n   676→            margin: -1px;\n   677→            overflow: hidden;\n   678→            clip: rect(0,0,0,0);\n   679→            white-space: nowrap;\n   680→            border: 0;\n   681→        }\n   682→        \n   683→        /* Indicatori di pagina opzionali */\n   684→        .scroll-indicators {\n   685→            display: flex;\n   686→            justify-content: center;\n   687→            gap: 8px;\n   688→            margin-top: 16px;\n   689→            padding: 8px;\n   690→        }\n   691→        \n   692→        .scroll-indicator {\n   693→            width: 8px;\n   694→            height: 8px;\n   695→            border-radius: 50%;\n   696→            background: #ddd;\n   697→            transition: all 0.3s ease;\n   698→            cursor: pointer;\n   699→            border: none;\n   700→            padding: 0;\n   701→        }\n   702→        \n   703→        .scroll-indicator:hover {\n   704→            background: #999;\n   705→            transform: scale(1.2);\n   706→        }\n   707→        \n   708→        .scroll-indicator.active {\n   709→            background: var(--e-global-color-primary, #333);\n   710→            width: 24px;\n   711→            border-radius: 4px;\n   712→        }\n   713→        \n   714→        /* Supporto reduced motion */\n   715→        @media (prefers-reduced-motion: reduce) {\n   716→            * {\n   717→                animation-duration: 0.01ms !important;\n   718→                animation-iteration-count: 1 !important;\n   719→                transition-duration: 0.01ms !important;\n   720→            }\n   721→            \n   722→            .scrollable-container {\n   723→                scroll-behavior: auto !important;\n   724→            }\n   725→            \n   726→            .nav-button {\n   727→                transition: none !important;\n   728→            }\n   729→            \n   730→            .scroll-progress {\n   731→                transition: none !important;\n   732→            }\n   733→        }\n   734→        \n   735→        /* Migliora contrasto per accessibilità */\n   736→        @media (prefers-contrast: high) {\n   737→            .nav-button {\n   738→                background: #fff;\n   739→                border: 2px solid #000;\n   740→            }\n   741→            \n   742→            .nav-button:hover:not(:disabled) {\n   743→                background: #000;\n   744→                color: #fff;\n   745→            }\n   746→            \n   747→            .nav-button:hover:not(:disabled) svg {\n   748→                color: #fff;\n   749→            }\n   750→            \n   751→            .scroll-progress {\n   752→                background: #000;\n   753→            }\n   754→        }\n   755→        \n   756→        /* Dark mode support */\n   757→        @media (prefers-color-scheme: dark) {\n   758→            .nav-button {\n   759→                background: var(--e-global-color-primary);\n   760→                border-color: var(--e-global-color-primary);\n   761→            }\n   762→            \n   763→            .nav-button svg {\n   764→                color: #fff;\n   765→            }\n   766→            \n   767→            .nav-button:hover:not(:disabled) {\n   768→                background: var(--e-global-color-2de3d7d);\n   769→                border-color: var(--e-global-color-2de3d7d);\n   770→            }\n   771→            \n   772→            .scroll-indicator {\n   773→                background: #555;\n   774→            }\n   775→            \n   776→            .scroll-indicator:hover {\n   777→                background: #777;\n   778→            }\n   779→            \n   780→            .scroll-indicator.active {\n   781→                background: #fff;\n   782→            }\n   783→        }\n   784→    </style>\n   785→`;\n   786→\n   787→// Aggiungi spacer per l'ultima card come fallback\n   788→function addScrollSpacer(container) {\n   789→    // Aggiungi un elemento vuoto alla fine come spacer se non esiste\n   790→    if (!container.querySelector('.scroll-spacer')) {\n   791→        const spacer = document.createElement('div');\n   792→        spacer.className = 'scroll-spacer';\n   793→        spacer.style.cssText = 'flex-shrink: 0; width: 20px; height: 1px; pointer-events: none;';\n   794→        spacer.setAttribute('aria-hidden', 'true');\n   795→        container.appendChild(spacer);\n   796→    }\n   797→}\n   798→\n   799→// Inizializzazione\n   800→function initImprovedScrollers() {\n   801→    // Inietta stili se non presenti\n   802→    if (!document.getElementById('improved-scroller-styles')) {\n   803→        document.head.insertAdjacentHTML('beforeend', improvedStyles);\n   804→    }\n   805→    \n   806→    // Trova tutti i container scrollabili\n   807→    const containers = document.querySelectorAll('.scrollable-container');\n   808→    \n   809→    containers.forEach(container => {\n   810→        // Skip se già inizializzato\n   811→        if (container.hasAttribute('data-improved-scroller')) return;\n   812→        \n   813→        // Inizializza solo se c'è overflow orizzontale\n   814→        if (container.scrollWidth > container.clientWidth) {\n   815→            // Aggiungi spacer come fallback\n   816→            addScrollSpacer(container);\n   817→            \n   818→            new ImprovedElementorScroller(container);\n   819→            container.setAttribute('data-improved-scroller', 'true');\n   820→        }\n   821→    });\n   822→}\n   823→\n   824→// Inizializza quando DOM è pronto\n   825→if (document.readyState === 'loading') {\n   826→    document.addEventListener('DOMContentLoaded', initImprovedScrollers);\n   827→} else {\n   828→    initImprovedScrollers();\n   829→}\n   830→\n   831→// Hook per Elementor\n   832→if (typeof jQuery !== 'undefined') {\n   833→    jQuery(window).on('elementor/frontend/init', function() {\n   834→        if (window.elementorFrontend && window.elementorFrontend.hooks) {\n   835→            elementorFrontend.hooks.addAction('frontend/element_ready/widget', function() {\n   836→                setTimeout(initImprovedScrollers, 100);\n   837→            });\n   838→        }\n   839→    });\n   840→} else {\n   841→    // Fallback observer per contenuti dinamici\n   842→    const observer = new MutationObserver(() => {\n   843→        initImprovedScrollers();\n   844→    });\n   845→    \n   846→    observer.observe(document.body, {\n   847→        childList: true,\n   848→        subtree: true\n   849→    });\n   850→}\n   851→\n   852→// Re-inizializza su resize\n   853→let resizeTimeout;\n   854→window.addEventListener('resize', () => {\n   855→    clearTimeout(resizeTimeout);\n   856→    resizeTimeout = setTimeout(initImprovedScrollers, 250);\n   857→});\n   858→\n   859→console.log('Improved Elementor Scroller v2.0 loaded');"}]},"uuid":"f7ea98ec-1db6-499b-aa91-b4ad9a3d88cd","timestamp":"2025-07-29T07:16:12.272Z","toolUseResult":{"filePath":"/Users/disconnesso/Sites/villastuart.it/wp-content/themes/hello-villa-stuart/assets/js/improved-scroller.js","oldString":"/**\n * Slider Orizzontale Migliorato per Elementor\n * Versione 2.0 - Ottimizzato per Desktop con Accessibilità\n */\n\n// Classe principale per gestire lo slider\nclass ImprovedElementorScroller {\n    constructor(container) {\n        this.container = container;\n        this.wrapper = null;\n        this.isScrolling = false;\n        this.scrollTimeout = null;\n        \n        // Feature detection\n        this.supportsPassive = this.checkPassiveSupport();\n        this.supportsScrollBehavior = 'scrollBehavior' in document.documentElement.style;\n        \n        // Inizializza\n        this.init();\n    }\n    \n    // Check supporto passive listeners\n    checkPassiveSupport() {\n        let supportsPassive = false;\n        try {\n            const opts = Object.defineProperty({}, 'passive', {\n                get: () => { supportsPassive = true; }\n            });\n            window.addEventListener('testPassive', null, opts);\n            window.removeEventListener('testPassive', null, opts);\n        } catch (e) {}\n        return supportsPassive;\n    }\n    \n    init() {\n        // Crea wrapper per aggiungere controlli senza modificare HTML\n        this.wrapContainer();\n        \n        // Setup features\n        this.setupNavButtons();\n        this.setupKeyboard();\n        this.setupMouseWheel();\n        this.setupTouch();\n        this.setupScrollIndicator();\n        this.setupAccessibility();\n        \n        // Aggiorna stato iniziale\n        this.updateUI();\n    }\n    \n    // Wrap container esistente per aggiungere controlli\n    wrapContainer() {\n        // Se già wrappato, esci\n        if (this.container.parentElement.classList.contains('elementor-scroller-wrapper')) {\n            this.wrapper = this.container.parentElement;\n            return;\n        }\n        \n        // Crea wrapper\n        this.wrapper = document.createElement('div');\n        this.wrapper.className = 'elementor-scroller-wrapper';\n        this.wrapper.style.position = 'relative';\n        \n        // Inserisci wrapper\n        this.container.parentNode.insertBefore(this.wrapper, this.container);\n        this.wrapper.appendChild(this.container);\n    }\n    \n    // Setup pulsanti navigazione\n    setupNavButtons() {\n        // Crea pulsanti solo se non esistono\n        if (!this.wrapper.querySelector('.nav-button')) {\n            // Pulsante precedente\n            const prevButton = document.createElement('button');\n            prevButton.className = 'nav-button nav-prev';\n            prevButton.innerHTML = `\n                <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                    <path d=\"M15 18l-6-6 6-6\"/>\n                </svg>\n            `;\n            prevButton.setAttribute('aria-label', 'Scorri a sinistra');\n            prevButton.addEventListener('click', () => this.scrollPrev());\n            \n            // Pulsante successivo\n            const nextButton = document.createElement('button');\n            nextButton.className = 'nav-button nav-next';\n            nextButton.innerHTML = `\n                <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                    <path d=\"M9 18l6-6-6-6\"/>\n                </svg>\n            `;\n            nextButton.setAttribute('aria-label', 'Scorri a destra');\n            nextButton.addEventListener('click', () => this.scrollNext());\n            \n            // Aggiungi al wrapper\n            this.wrapper.appendChild(prevButton);\n            this.wrapper.appendChild(nextButton);\n            \n            // Store references\n            this.prevButton = prevButton;\n            this.nextButton = nextButton;\n        }\n    }\n    \n    // Setup tastiera migliorato\n    setupKeyboard() {\n        this.container.addEventListener('keydown', (e) => {\n            const scrollAmount = this.container.clientWidth * 0.8;\n            let handled = true;\n            \n            // Aggiungi classe per smooth scroll da tastiera\n            this.container.classList.add('keyboard-scrolling');\n            \n            switch(e.key) {\n                case 'ArrowLeft':\n                    this.smoothScroll(-scrollAmount);\n                    break;\n                case 'ArrowRight':\n                    this.smoothScroll(scrollAmount);\n                    break;\n                case 'Home':\n                    this.scrollToStart();\n                    break;\n                case 'End':\n                    this.scrollToEnd();\n                    break;\n                default:\n                    handled = false;\n            }\n            \n            if (handled) {\n                e.preventDefault();\n                // Rimuovi classe dopo animazione\n                setTimeout(() => {\n                    this.container.classList.remove('keyboard-scrolling');\n                }, 400);\n            } else {\n                this.container.classList.remove('keyboard-scrolling');\n            }\n        });\n    }\n    \n    // Setup mouse wheel - MIGLIORAMENTO CHIAVE\n    setupMouseWheel() {\n        let accumulatedDelta = 0;\n        let wheelTimeout;\n        \n        const wheelHandler = (e) => {\n            // Solo se container è in hover o focus\n            if (!this.container.matches(':hover, :focus-within')) return;\n            \n            e.preventDefault();\n            \n            // Accumula piccoli delta per scroll più fluido\n            accumulatedDelta += e.deltaY;\n            \n            clearTimeout(wheelTimeout);\n            wheelTimeout = setTimeout(() => {\n                if (Math.abs(accumulatedDelta) > 10) {\n                    // Normalizza e applica scroll\n                    const scrollAmount = Math.sign(accumulatedDelta) * Math.min(Math.abs(accumulatedDelta), 300);\n                    this.smoothScroll(scrollAmount);\n                }\n                accumulatedDelta = 0;\n            }, 50);\n        };\n        \n        // Aggiungi listener con passive false\n        this.container.addEventListener('wheel', wheelHandler, \n            this.supportsPassive ? { passive: false } : false\n        );\n    }\n    \n    // Setup touch con momentum migliorato\n    setupTouch() {\n        let startX = 0;\n        let scrollLeft = 0;\n        let isDragging = false;\n        let animationId = null;\n        let velocity = 0;\n        let lastX = 0;\n        let lastTime = 0;\n        \n        const startDragging = (pageX) => {\n            isDragging = true;\n            startX = pageX;\n            lastX = pageX;\n            scrollLeft = this.container.scrollLeft;\n            lastTime = Date.now();\n            velocity = 0;\n            \n            // Cancella animazioni\n            if (animationId) {\n                cancelAnimationFrame(animationId);\n            }\n            \n            // La classe 'active' è già nel CSS esistente per cursor grabbing\n            this.container.classList.add('active');\n        };\n        \n        const drag = (pageX) => {\n            if (!isDragging) return;\n            \n            const currentTime = Date.now();\n            const timeDelta = currentTime - lastTime;\n            const distance = pageX - lastX;\n            \n            // Calcola velocità\n            if (timeDelta > 0) {\n                velocity = distance / timeDelta * 16; // Normalizza a 60fps\n            }\n            \n            const walk = (pageX - startX) * 1.5;\n            this.container.scrollLeft = scrollLeft - walk;\n            \n            lastX = pageX;\n            lastTime = currentTime;\n        };\n        \n        const stopDragging = () => {\n            if (!isDragging) return;\n            \n            isDragging = false;\n            this.container.classList.remove('active');\n            \n            // Applica momentum se c'è velocità\n            if (Math.abs(velocity) > 2) {\n                const deceleration = 0.95;\n                \n                const animate = () => {\n                    if (Math.abs(velocity) > 0.5) {\n                        this.container.scrollLeft -= velocity;\n                        velocity *= deceleration;\n                        animationId = requestAnimationFrame(animate);\n                    } else {\n                        this.updateUI();\n                    }\n                };\n                \n                animate();\n            } else {\n                this.updateUI();\n            }\n        };\n        \n        // Mouse events\n        this.container.addEventListener('mousedown', (e) => {\n            startDragging(e.pageX);\n        });\n        \n        document.addEventListener('mousemove', (e) => {\n            drag(e.pageX);\n        });\n        \n        document.addEventListener('mouseup', stopDragging);\n        \n        // Touch events\n        this.container.addEventListener('touchstart', (e) => {\n            startDragging(e.touches[0].pageX);\n        }, this.supportsPassive ? { passive: true } : false);\n        \n        this.container.addEventListener('touchmove', (e) => {\n            drag(e.touches[0].pageX);\n        }, this.supportsPassive ? { passive: true } : false);\n        \n        this.container.addEventListener('touchend', stopDragging);\n        this.container.addEventListener('touchcancel', stopDragging);\n    }\n    \n    // Setup indicatore di scroll\n    setupScrollIndicator() {\n        // Crea progress bar solo se non nascosta da design\n        if (!this.wrapper.classList.contains('hide-progress')) {\n            const progressBar = document.createElement('div');\n            progressBar.className = 'scroll-progress';\n            progressBar.setAttribute('role', 'progressbar');\n            progressBar.setAttribute('aria-label', 'Progresso scroll');\n            progressBar.setAttribute('aria-valuemin', '0');\n            progressBar.setAttribute('aria-valuemax', '100');\n            \n            this.wrapper.appendChild(progressBar);\n            this.progressBar = progressBar;\n        }\n        \n        // Aggiorna su scroll\n        let ticking = false;\n        this.container.addEventListener('scroll', () => {\n            if (!ticking) {\n                requestAnimationFrame(() => {\n                    this.updateUI();\n                    ticking = false;\n                });\n                ticking = true;\n            }\n        }, this.supportsPassive ? { passive: true } : false);\n    }\n    \n    // Setup accessibilità\n    setupAccessibility() {\n        // ARIA labels\n        this.container.setAttribute('role', 'region');\n        this.container.setAttribute('aria-label', 'Contenuti scrollabili orizzontalmente');\n        \n        // Live region per annunci\n        const liveRegion = document.createElement('div');\n        liveRegion.className = 'sr-only';\n        liveRegion.setAttribute('role', 'status');\n        liveRegion.setAttribute('aria-live', 'polite');\n        liveRegion.setAttribute('aria-atomic', 'true');\n        liveRegion.style.cssText = `\n            position: absolute;\n            width: 1px;\n            height: 1px;\n            padding: 0;\n            margin: -1px;\n            overflow: hidden;\n            clip: rect(0,0,0,0);\n            white-space: nowrap;\n            border: 0;\n        `;\n        \n        this.wrapper.appendChild(liveRegion);\n        this.liveRegion = liveRegion;\n    }\n    \n    // Scroll fluido\n    smoothScroll(distance) {\n        if (this.supportsScrollBehavior) {\n            this.container.scrollBy({\n                left: distance,\n                behavior: 'smooth'\n            });\n        } else {\n            // Fallback animato\n            this.animateScroll(this.container.scrollLeft + distance);\n        }\n    }\n    \n    // Animazione scroll per fallback\n    animateScroll(target) {\n        const start = this.container.scrollLeft;\n        const distance = target - start;\n        const duration = 300;\n        let startTime = null;\n        \n        const animation = (currentTime) => {\n            if (!startTime) startTime = currentTime;\n            const elapsed = currentTime - startTime;\n            const progress = Math.min(elapsed / duration, 1);\n            \n            // Easing\n            const easeInOutQuad = progress < 0.5\n                ? 2 * progress * progress\n                : 1 - Math.pow(-2 * progress + 2, 2) / 2;\n            \n            this.container.scrollLeft = start + distance * easeInOutQuad;\n            \n            if (progress < 1) {\n                requestAnimationFrame(animation);\n            } else {\n                this.updateUI();\n            }\n        };\n        \n        requestAnimationFrame(animation);\n    }\n    \n    // Metodi di navigazione\n    scrollPrev() {\n        const scrollAmount = this.container.clientWidth * 0.8;\n        this.smoothScroll(-scrollAmount);\n        this.announce('Scorrimento a sinistra');\n    }\n    \n    scrollNext() {\n        const cards = Array.from(this.container.children);\n        const containerRect = this.container.getBoundingClientRect();\n        \n        // Trova la prima card non completamente visibile\n        let targetCard = cards.find(card => {\n            const cardRect = card.getBoundingClientRect();\n            return cardRect.left > containerRect.left && !this.isElementFullyVisible(card);\n        });\n        \n        if (targetCard) {\n            // Scrolla fino alla card target\n            const targetPosition = targetCard.offsetLeft - this.container.offsetLeft;\n            this.container.scrollTo({\n                left: targetPosition,\n                behavior: this.supportsScrollBehavior ? 'smooth' : 'auto'\n            });\n        } else {\n            // Scroll standard se non ci sono card parzialmente visibili\n            const scrollAmount = this.container.clientWidth * 0.8;\n            this.smoothScroll(scrollAmount);\n        }\n        \n        // Assicura che l'ultima card sia visibile dopo lo scroll\n        setTimeout(() => this.ensureLastCardVisible(), 350);\n        \n        this.announce('Scorrimento a destra');\n    }\n    \n    scrollToStart() {\n        this.container.scrollTo({\n            left: 0,\n            behavior: this.supportsScrollBehavior ? 'smooth' : 'auto'\n        });\n        this.announce('Inizio dei contenuti');\n    }\n    \n    scrollToEnd() {\n        const maxScroll = this.container.scrollWidth - this.container.clientWidth;\n        this.container.scrollTo({\n            left: maxScroll,\n            behavior: this.supportsScrollBehavior ? 'smooth' : 'auto'\n        });\n        this.announce('Fine dei contenuti');\n    }\n    \n    // Aggiorna UI\n    updateUI() {\n        const scrollLeft = this.container.scrollLeft;\n        \n        // Calcola il gap tra le card (se usi gap in CSS)\n        const computedStyle = window.getComputedStyle(this.container);\n        const gap = parseFloat(computedStyle.gap) || 0;\n        \n        // Trova l'ultima card\n        const lastChild = this.container.lastElementChild;\n        const lastChildWidth = lastChild ? lastChild.offsetWidth : 0;\n        \n        // Calcola il maxScroll considerando l'ultima card e il padding\n        const maxScroll = this.container.scrollWidth - this.container.clientWidth;\n        const adjustedMaxScroll = Math.max(0, maxScroll - gap);\n        \n        // Aggiorna pulsanti con tolleranza\n        if (this.prevButton && this.nextButton) {\n            const tolerance = 5;\n            this.prevButton.disabled = scrollLeft <= tolerance;\n            this.nextButton.disabled = scrollLeft >= adjustedMaxScroll - tolerance;\n            \n            // Aggiorna ARIA\n            this.prevButton.setAttribute('aria-disabled', scrollLeft <= tolerance);\n            this.nextButton.setAttribute('aria-disabled', scrollLeft >= adjustedMaxScroll - tolerance);\n        }\n        \n        // Aggiorna progress bar\n        if (this.progressBar && adjustedMaxScroll > 0) {\n            const progress = Math.min(100, (scrollLeft / adjustedMaxScroll) * 100);\n            this.progressBar.style.width = `${progress}%`;\n            this.progressBar.setAttribute('aria-valuenow', Math.round(progress));\n        }\n    }\n    \n    // Verifica se un elemento è completamente visibile\n    isElementFullyVisible(element) {\n        const containerRect = this.container.getBoundingClientRect();\n        const elementRect = element.getBoundingClientRect();\n        \n        return elementRect.left >= containerRect.left && \n               elementRect.right <= containerRect.right;\n    }\n    \n    // Assicura che l'ultima card sia visibile dopo lo scroll\n    ensureLastCardVisible() {\n        const lastCard = this.container.lastElementChild;\n        if (!lastCard) return;\n        \n        if (!this.isElementFullyVisible(lastCard)) {\n            const containerRect = this.container.getBoundingClientRect();\n            const lastCardRect = lastCard.getBoundingClientRect();\n            const scrollAdjustment = lastCardRect.right - containerRect.right + 20;\n            \n            if (scrollAdjustment > 0) {\n                this.container.scrollLeft += scrollAdjustment;\n            }\n        }\n    }\n\n    // Annuncia a screen reader\n    announce(message) {\n        if (this.liveRegion) {\n            this.liveRegion.textContent = message;\n            // Reset dopo annuncio\n            setTimeout(() => {\n                this.liveRegion.textContent = '';\n            }, 1000);\n        }\n    }\n}\n\n// CSS da iniettare - Adattato per CSS Elementor esistente\nconst improvedStyles = `\n    <style id=\"improved-scroller-styles\">\n        /* Wrapper styles */\n        .elementor-scroller-wrapper {\n            position: relative;\n        }\n        \n        /* Nasconde scrollbar orizzontale su desktop mantenendo lo scroll */\n        .scrollable-container {\n            /* Firefox */\n            scrollbar-width: none;\n            \n            /* IE 10+ */\n            -ms-overflow-style: none;\n            \n            /* Aggiunge spazio per l'ultima card */\n            padding-right: 30px;\n            box-sizing: content-box;\n        }\n        \n        /* Compensa il padding per il primo elemento */\n        .scrollable-container > *:first-child {\n            margin-left: 20px;\n        }\n        \n        /* Fix per Elementor - previeni che tagli il contenuto */\n        .elementor-widget-container {\n            overflow: visible !important;\n        }\n        \n        /* Fix per container con gap CSS */\n        .scrollable-container[style*=\"gap\"] {\n            padding-right: 50px;\n        }\n        \n        /* Chrome, Safari, Opera, Edge */\n        .scrollable-container::-webkit-scrollbar {\n            width: 0 !important;\n            height: 0 !important;\n            display: none;\n        }\n        \n        .scrollable-container::-webkit-scrollbar-track {\n            background: transparent;\n        }\n        \n        .scrollable-container::-webkit-scrollbar-thumb {\n            background: transparent;\n            border: none;\n        }\n        \n        /* Supporto per browser più vecchi */\n        @supports not (scrollbar-width: none) {\n            .scrollable-container {\n                margin-bottom: -17px;\n                padding-bottom: 17px;\n            }\n        }\n        \n        /* Pulsanti navigazione */\n        .nav-button {\n            position: absolute;\n            top: 50%;\n            transform: translateY(-50%);\n            width: 48px;\n            height: 48px;\n            background: rgba(255, 255, 255, 0.95);\n            border: 1px solid #ddd;\n            border-radius: 50%;\n            cursor: pointer;\n            display: none;\n            align-items: center;\n            justify-content: center;\n            z-index: 10;\n            transition: all 0.3s ease;\n            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n            \n            /* Assicura che sia sopra il contenuto */\n            pointer-events: auto;\n        }\n        \n        .nav-button {\n            background: var(--e-global-color-primary);\n        }\n        \n        .nav-button svg {\n            width: 24px;\n            height: 24px;\n            color: #fff;\n        }\n        \n        .nav-button:hover:not(:disabled) {\n            background: var(--e-global-color-2de3d7d);\n            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n            transform: translateY(-50%) scale(1.1);\n        }\n        \n        .nav-button:active {\n            transform: translateY(-50%) scale(0.95);\n        }\n        \n        .nav-button:hover:not(:disabled) {\n            background: var(--e-global-color-2de3d7d);\n            border-color: var(--e-global-color-2de3d7d);\n        }\n        \n        .nav-button:active {\n            transform: translateY(-50%) scale(0.95);\n        }\n        \n        .nav-button:disabled {\n            opacity: 0.3;\n            cursor: not-allowed;\n        }\n        \n        .nav-button:disabled:hover {\n            transform: translateY(-50%);\n        }\n        \n        .nav-button:focus {\n            outline: 2px solid var(--e-global-color-primary, #0066cc);\n            outline-offset: 2px;\n        }\n        \n        .nav-prev {\n            left: 10px;\n        }\n        \n        .nav-next {\n            right: 10px;\n        }\n        \n        /* Mostra pulsanti su desktop */\n        @media (min-width: 1024px) {\n            .elementor-scroller-wrapper:hover .nav-button:not(:disabled) {\n                display: flex;\n            }\n            \n            .elementor-scroller-wrapper:focus-within .nav-button:not(:disabled) {\n                display: flex;\n            }\n        }\n        \n        /* Progress bar sottile */\n        .scroll-progress {\n            position: absolute;\n            bottom: 0;\n            left: 0;\n            height: 3px;\n            background: var(--e-global-color-primary, #0066cc);\n            transition: width 0.2s ease, opacity 0.3s ease;\n            pointer-events: none;\n            z-index: 5;\n            opacity: 0;\n            border-radius: 0 3px 3px 0;\n        }\n        \n        /* Mostra progress bar su hover/focus */\n        .elementor-scroller-wrapper:hover .scroll-progress,\n        .elementor-scroller-wrapper:focus-within .scroll-progress {\n            opacity: 0.7;\n        }\n        \n        /* Non sovrascriviamo cursor - già impostato nel CSS esistente */\n        \n        /* Focus migliore - solo se non già presente */\n        .scrollable-container:focus-visible {\n            outline: 2px solid var(--e-global-color-primary, #0066cc);\n            outline-offset: 2px;\n        }\n        \n        /* Supporta la classe keyboard-scrolling esistente */\n        .scrollable-container.keyboard-scrolling {\n            scroll-behavior: smooth !important;\n        }\n        \n        /* Screen reader only */\n        .sr-only {\n            position: absolute;\n            width: 1px;\n            height: 1px;\n            padding: 0;\n            margin: -1px;\n            overflow: hidden;\n            clip: rect(0,0,0,0);\n            white-space: nowrap;\n            border: 0;\n        }\n        \n        /* Indicatori di pagina opzionali */\n        .scroll-indicators {\n            display: flex;\n            justify-content: center;\n            gap: 8px;\n            margin-top: 16px;\n            padding: 8px;\n        }\n        \n        .scroll-indicator {\n            width: 8px;\n            height: 8px;\n            border-radius: 50%;\n            background: #ddd;\n            transition: all 0.3s ease;\n            cursor: pointer;\n            border: none;\n            padding: 0;\n        }\n        \n        .scroll-indicator:hover {\n            background: #999;\n            transform: scale(1.2);\n        }\n        \n        .scroll-indicator.active {\n            background: var(--e-global-color-primary, #333);\n            width: 24px;\n            border-radius: 4px;\n        }\n        \n        /* Supporto reduced motion */\n        @media (prefers-reduced-motion: reduce) {\n            * {\n                animation-duration: 0.01ms !important;\n                animation-iteration-count: 1 !important;\n                transition-duration: 0.01ms !important;\n            }\n            \n            .scrollable-container {\n                scroll-behavior: auto !important;\n            }\n            \n            .nav-button {\n                transition: none !important;\n            }\n            \n            .scroll-progress {\n                transition: none !important;\n            }\n        }\n        \n        /* Migliora contrasto per accessibilità */\n        @media (prefers-contrast: high) {\n            .nav-button {\n                background: #fff;\n                border: 2px solid #000;\n            }\n            \n            .nav-button:hover:not(:disabled) {\n                background: #000;\n                color: #fff;\n            }\n            \n            .nav-button:hover:not(:disabled) svg {\n                color: #fff;\n            }\n            \n            .scroll-progress {\n                background: #000;\n            }\n        }\n        \n        /* Dark mode support */\n        @media (prefers-color-scheme: dark) {\n            .nav-button {\n                background: var(--e-global-color-primary);\n                border-color: var(--e-global-color-primary);\n            }\n            \n            .nav-button svg {\n                color: #fff;\n            }\n            \n            .nav-button:hover:not(:disabled) {\n                background: var(--e-global-color-2de3d7d);\n                border-color: var(--e-global-color-2de3d7d);\n            }\n            \n            .scroll-indicator {\n                background: #555;\n            }\n            \n            .scroll-indicator:hover {\n                background: #777;\n            }\n            \n            .scroll-indicator.active {\n                background: #fff;\n            }\n        }\n    </style>\n`;\n\n// Inizializzazione\nfunction initImprovedScrollers() {\n    // Inietta stili se non presenti\n    if (!document.getElementById('improved-scroller-styles')) {\n        document.head.insertAdjacentHTML('beforeend', improvedStyles);\n    }\n    \n    // Trova tutti i container scrollabili\n    const containers = document.querySelectorAll('.scrollable-container');\n    \n    containers.forEach(container => {\n        // Skip se già inizializzato\n        if (container.hasAttribute('data-improved-scroller')) return;\n        \n        // Inizializza solo se c'è overflow orizzontale\n        if (container.scrollWidth > container.clientWidth) {\n            new ImprovedElementorScroller(container);\n            container.setAttribute('data-improved-scroller', 'true');\n        }\n    });\n}\n\n// Inizializza quando DOM è pronto\nif (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', initImprovedScrollers);\n} else {\n    initImprovedScrollers();\n}\n\n// Hook per Elementor\nif (typeof jQuery !== 'undefined') {\n    jQuery(window).on('elementor/frontend/init', function() {\n        if (window.elementorFrontend && window.elementorFrontend.hooks) {\n            elementorFrontend.hooks.addAction('frontend/element_ready/widget', function() {\n                setTimeout(initImprovedScrollers, 100);\n            });\n        }\n    });\n} else {\n    // Fallback observer per contenuti dinamici\n    const observer = new MutationObserver(() => {\n        initImprovedScrollers();\n    });\n    \n    observer.observe(document.body, {\n        childList: true,\n        subtree: true\n    });\n}\n\n// Re-inizializza su resize\nlet resizeTimeout;\nwindow.addEventListener('resize', () => {\n    clearTimeout(resizeTimeout);\n    resizeTimeout = setTimeout(initImprovedScrollers, 250);\n});\n\nconsole.log('Improved Elementor Scroller v2.0 loaded');","newString":"/**\n * Slider Orizzontale Migliorato per Elementor\n * Versione 2.0 - Ottimizzato per Desktop con Accessibilità\n */\n\n// Classe principale per gestire lo slider\nclass ImprovedElementorScroller {\n    constructor(container) {\n        this.container = container;\n        this.wrapper = null;\n        this.isScrolling = false;\n        this.scrollTimeout = null;\n        \n        // Feature detection\n        this.supportsPassive = this.checkPassiveSupport();\n        this.supportsScrollBehavior = 'scrollBehavior' in document.documentElement.style;\n        \n        // Inizializza\n        this.init();\n    }\n    \n    // Check supporto passive listeners\n    checkPassiveSupport() {\n        let supportsPassive = false;\n        try {\n            const opts = Object.defineProperty({}, 'passive', {\n                get: () => { supportsPassive = true; }\n            });\n            window.addEventListener('testPassive', null, opts);\n            window.removeEventListener('testPassive', null, opts);\n        } catch (e) {}\n        return supportsPassive;\n    }\n    \n    init() {\n        // Crea wrapper per aggiungere controlli senza modificare HTML\n        this.wrapContainer();\n        \n        // Setup features\n        this.setupNavButtons();\n        this.setupKeyboard();\n        this.setupMouseWheel();\n        this.setupTouch();\n        this.setupScrollIndicator();\n        this.setupAccessibility();\n        \n        // Aggiorna stato iniziale\n        this.updateUI();\n    }\n    \n    // Wrap container esistente per aggiungere controlli\n    wrapContainer() {\n        // Se già wrappato, esci\n        if (this.container.parentElement.classList.contains('elementor-scroller-wrapper')) {\n            this.wrapper = this.container.parentElement;\n            return;\n        }\n        \n        // Crea wrapper\n        this.wrapper = document.createElement('div');\n        this.wrapper.className = 'elementor-scroller-wrapper';\n        this.wrapper.style.position = 'relative';\n        \n        // Inserisci wrapper\n        this.container.parentNode.insertBefore(this.wrapper, this.container);\n        this.wrapper.appendChild(this.container);\n    }\n    \n    // Setup pulsanti navigazione\n    setupNavButtons() {\n        // Crea pulsanti solo se non esistono\n        if (!this.wrapper.querySelector('.nav-button')) {\n            // Pulsante precedente\n            const prevButton = document.createElement('button');\n            prevButton.className = 'nav-button nav-prev';\n            prevButton.innerHTML = `\n                <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                    <path d=\"M15 18l-6-6 6-6\"/>\n                </svg>\n            `;\n            prevButton.setAttribute('aria-label', 'Scorri a sinistra');\n            prevButton.addEventListener('click', () => this.scrollPrev());\n            \n            // Pulsante successivo\n            const nextButton = document.createElement('button');\n            nextButton.className = 'nav-button nav-next';\n            nextButton.innerHTML = `\n                <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                    <path d=\"M9 18l6-6-6-6\"/>\n                </svg>\n            `;\n            nextButton.setAttribute('aria-label', 'Scorri a destra');\n            nextButton.addEventListener('click', () => this.scrollNext());\n            \n            // Aggiungi al wrapper\n            this.wrapper.appendChild(prevButton);\n            this.wrapper.appendChild(nextButton);\n            \n            // Store references\n            this.prevButton = prevButton;\n            this.nextButton = nextButton;\n        }\n    }\n    \n    // Setup tastiera migliorato\n    setupKeyboard() {\n        this.container.addEventListener('keydown', (e) => {\n            const scrollAmount = this.container.clientWidth * 0.8;\n            let handled = true;\n            \n            // Aggiungi classe per smooth scroll da tastiera\n            this.container.classList.add('keyboard-scrolling');\n            \n            switch(e.key) {\n                case 'ArrowLeft':\n                    this.smoothScroll(-scrollAmount);\n                    break;\n                case 'ArrowRight':\n                    this.smoothScroll(scrollAmount);\n                    break;\n                case 'Home':\n                    this.scrollToStart();\n                    break;\n                case 'End':\n                    this.scrollToEnd();\n                    break;\n                default:\n                    handled = false;\n            }\n            \n            if (handled) {\n                e.preventDefault();\n                // Rimuovi classe dopo animazione\n                setTimeout(() => {\n                    this.container.classList.remove('keyboard-scrolling');\n                }, 400);\n            } else {\n                this.container.classList.remove('keyboard-scrolling');\n            }\n        });\n    }\n    \n    // Setup mouse wheel - MIGLIORAMENTO CHIAVE\n    setupMouseWheel() {\n        let accumulatedDelta = 0;\n        let wheelTimeout;\n        \n        const wheelHandler = (e) => {\n            // Solo se container è in hover o focus\n            if (!this.container.matches(':hover, :focus-within')) return;\n            \n            e.preventDefault();\n            \n            // Accumula piccoli delta per scroll più fluido\n            accumulatedDelta += e.deltaY;\n            \n            clearTimeout(wheelTimeout);\n            wheelTimeout = setTimeout(() => {\n                if (Math.abs(accumulatedDelta) > 10) {\n                    // Normalizza e applica scroll\n                    const scrollAmount = Math.sign(accumulatedDelta) * Math.min(Math.abs(accumulatedDelta), 300);\n                    this.smoothScroll(scrollAmount);\n                }\n                accumulatedDelta = 0;\n            }, 50);\n        };\n        \n        // Aggiungi listener con passive false\n        this.container.addEventListener('wheel', wheelHandler, \n            this.supportsPassive ? { passive: false } : false\n        );\n    }\n    \n    // Setup touch con momentum migliorato\n    setupTouch() {\n        let startX = 0;\n        let scrollLeft = 0;\n        let isDragging = false;\n        let animationId = null;\n        let velocity = 0;\n        let lastX = 0;\n        let lastTime = 0;\n        \n        const startDragging = (pageX) => {\n            isDragging = true;\n            startX = pageX;\n            lastX = pageX;\n            scrollLeft = this.container.scrollLeft;\n            lastTime = Date.now();\n            velocity = 0;\n            \n            // Cancella animazioni\n            if (animationId) {\n                cancelAnimationFrame(animationId);\n            }\n            \n            // La classe 'active' è già nel CSS esistente per cursor grabbing\n            this.container.classList.add('active');\n        };\n        \n        const drag = (pageX) => {\n            if (!isDragging) return;\n            \n            const currentTime = Date.now();\n            const timeDelta = currentTime - lastTime;\n            const distance = pageX - lastX;\n            \n            // Calcola velocità\n            if (timeDelta > 0) {\n                velocity = distance / timeDelta * 16; // Normalizza a 60fps\n            }\n            \n            const walk = (pageX - startX) * 1.5;\n            this.container.scrollLeft = scrollLeft - walk;\n            \n            lastX = pageX;\n            lastTime = currentTime;\n        };\n        \n        const stopDragging = () => {\n            if (!isDragging) return;\n            \n            isDragging = false;\n            this.container.classList.remove('active');\n            \n            // Applica momentum se c'è velocità\n            if (Math.abs(velocity) > 2) {\n                const deceleration = 0.95;\n                \n                const animate = () => {\n                    if (Math.abs(velocity) > 0.5) {\n                        this.container.scrollLeft -= velocity;\n                        velocity *= deceleration;\n                        animationId = requestAnimationFrame(animate);\n                    } else {\n                        this.updateUI();\n                    }\n                };\n                \n                animate();\n            } else {\n                this.updateUI();\n            }\n        };\n        \n        // Mouse events\n        this.container.addEventListener('mousedown', (e) => {\n            startDragging(e.pageX);\n        });\n        \n        document.addEventListener('mousemove', (e) => {\n            drag(e.pageX);\n        });\n        \n        document.addEventListener('mouseup', stopDragging);\n        \n        // Touch events\n        this.container.addEventListener('touchstart', (e) => {\n            startDragging(e.touches[0].pageX);\n        }, this.supportsPassive ? { passive: true } : false);\n        \n        this.container.addEventListener('touchmove', (e) => {\n            drag(e.touches[0].pageX);\n        }, this.supportsPassive ? { passive: true } : false);\n        \n        this.container.addEventListener('touchend', stopDragging);\n        this.container.addEventListener('touchcancel', stopDragging);\n    }\n    \n    // Setup indicatore di scroll\n    setupScrollIndicator() {\n        // Crea progress bar solo se non nascosta da design\n        if (!this.wrapper.classList.contains('hide-progress')) {\n            const progressBar = document.createElement('div');\n            progressBar.className = 'scroll-progress';\n            progressBar.setAttribute('role', 'progressbar');\n            progressBar.setAttribute('aria-label', 'Progresso scroll');\n            progressBar.setAttribute('aria-valuemin', '0');\n            progressBar.setAttribute('aria-valuemax', '100');\n            \n            this.wrapper.appendChild(progressBar);\n            this.progressBar = progressBar;\n        }\n        \n        // Aggiorna su scroll\n        let ticking = false;\n        this.container.addEventListener('scroll', () => {\n            if (!ticking) {\n                requestAnimationFrame(() => {\n                    this.updateUI();\n                    ticking = false;\n                });\n                ticking = true;\n            }\n        }, this.supportsPassive ? { passive: true } : false);\n    }\n    \n    // Setup accessibilità\n    setupAccessibility() {\n        // ARIA labels\n        this.container.setAttribute('role', 'region');\n        this.container.setAttribute('aria-label', 'Contenuti scrollabili orizzontalmente');\n        \n        // Live region per annunci\n        const liveRegion = document.createElement('div');\n        liveRegion.className = 'sr-only';\n        liveRegion.setAttribute('role', 'status');\n        liveRegion.setAttribute('aria-live', 'polite');\n        liveRegion.setAttribute('aria-atomic', 'true');\n        liveRegion.style.cssText = `\n            position: absolute;\n            width: 1px;\n            height: 1px;\n            padding: 0;\n            margin: -1px;\n            overflow: hidden;\n            clip: rect(0,0,0,0);\n            white-space: nowrap;\n            border: 0;\n        `;\n        \n        this.wrapper.appendChild(liveRegion);\n        this.liveRegion = liveRegion;\n    }\n    \n    // Scroll fluido\n    smoothScroll(distance) {\n        if (this.supportsScrollBehavior) {\n            this.container.scrollBy({\n                left: distance,\n                behavior: 'smooth'\n            });\n        } else {\n            // Fallback animato\n            this.animateScroll(this.container.scrollLeft + distance);\n        }\n    }\n    \n    // Animazione scroll per fallback\n    animateScroll(target) {\n        const start = this.container.scrollLeft;\n        const distance = target - start;\n        const duration = 300;\n        let startTime = null;\n        \n        const animation = (currentTime) => {\n            if (!startTime) startTime = currentTime;\n            const elapsed = currentTime - startTime;\n            const progress = Math.min(elapsed / duration, 1);\n            \n            // Easing\n            const easeInOutQuad = progress < 0.5\n                ? 2 * progress * progress\n                : 1 - Math.pow(-2 * progress + 2, 2) / 2;\n            \n            this.container.scrollLeft = start + distance * easeInOutQuad;\n            \n            if (progress < 1) {\n                requestAnimationFrame(animation);\n            } else {\n                this.updateUI();\n            }\n        };\n        \n        requestAnimationFrame(animation);\n    }\n    \n    // Metodi di navigazione\n    scrollPrev() {\n        const scrollAmount = this.container.clientWidth * 0.8;\n        this.smoothScroll(-scrollAmount);\n        this.announce('Scorrimento a sinistra');\n    }\n    \n    scrollNext() {\n        const cards = Array.from(this.container.children);\n        const containerRect = this.container.getBoundingClientRect();\n        \n        // Trova la prima card non completamente visibile\n        let targetCard = cards.find(card => {\n            const cardRect = card.getBoundingClientRect();\n            return cardRect.left > containerRect.left && !this.isElementFullyVisible(card);\n        });\n        \n        if (targetCard) {\n            // Scrolla fino alla card target\n            const targetPosition = targetCard.offsetLeft - this.container.offsetLeft;\n            this.container.scrollTo({\n                left: targetPosition,\n                behavior: this.supportsScrollBehavior ? 'smooth' : 'auto'\n            });\n        } else {\n            // Scroll standard se non ci sono card parzialmente visibili\n            const scrollAmount = this.container.clientWidth * 0.8;\n            this.smoothScroll(scrollAmount);\n        }\n        \n        // Assicura che l'ultima card sia visibile dopo lo scroll\n        setTimeout(() => this.ensureLastCardVisible(), 350);\n        \n        this.announce('Scorrimento a destra');\n    }\n    \n    scrollToStart() {\n        this.container.scrollTo({\n            left: 0,\n            behavior: this.supportsScrollBehavior ? 'smooth' : 'auto'\n        });\n        this.announce('Inizio dei contenuti');\n    }\n    \n    scrollToEnd() {\n        const maxScroll = this.container.scrollWidth - this.container.clientWidth;\n        this.container.scrollTo({\n            left: maxScroll,\n            behavior: this.supportsScrollBehavior ? 'smooth' : 'auto'\n        });\n        this.announce('Fine dei contenuti');\n    }\n    \n    // Aggiorna UI\n    updateUI() {\n        const scrollLeft = this.container.scrollLeft;\n        \n        // Calcola il gap tra le card (se usi gap in CSS)\n        const computedStyle = window.getComputedStyle(this.container);\n        const gap = parseFloat(computedStyle.gap) || 0;\n        \n        // Trova l'ultima card\n        const lastChild = this.container.lastElementChild;\n        const lastChildWidth = lastChild ? lastChild.offsetWidth : 0;\n        \n        // Calcola il maxScroll considerando l'ultima card e il padding\n        const maxScroll = this.container.scrollWidth - this.container.clientWidth;\n        const adjustedMaxScroll = Math.max(0, maxScroll - gap);\n        \n        // Aggiorna pulsanti con tolleranza\n        if (this.prevButton && this.nextButton) {\n            const tolerance = 5;\n            this.prevButton.disabled = scrollLeft <= tolerance;\n            this.nextButton.disabled = scrollLeft >= adjustedMaxScroll - tolerance;\n            \n            // Aggiorna ARIA\n            this.prevButton.setAttribute('aria-disabled', scrollLeft <= tolerance);\n            this.nextButton.setAttribute('aria-disabled', scrollLeft >= adjustedMaxScroll - tolerance);\n        }\n        \n        // Aggiorna progress bar\n        if (this.progressBar && adjustedMaxScroll > 0) {\n            const progress = Math.min(100, (scrollLeft / adjustedMaxScroll) * 100);\n            this.progressBar.style.width = `${progress}%`;\n            this.progressBar.setAttribute('aria-valuenow', Math.round(progress));\n        }\n    }\n    \n    // Verifica se un elemento è completamente visibile\n    isElementFullyVisible(element) {\n        const containerRect = this.container.getBoundingClientRect();\n        const elementRect = element.getBoundingClientRect();\n        \n        return elementRect.left >= containerRect.left && \n               elementRect.right <= containerRect.right;\n    }\n    \n    // Assicura che l'ultima card sia visibile dopo lo scroll\n    ensureLastCardVisible() {\n        const lastCard = this.container.lastElementChild;\n        if (!lastCard) return;\n        \n        if (!this.isElementFullyVisible(lastCard)) {\n            const containerRect = this.container.getBoundingClientRect();\n            const lastCardRect = lastCard.getBoundingClientRect();\n            const scrollAdjustment = lastCardRect.right - containerRect.right + 20;\n            \n            if (scrollAdjustment > 0) {\n                this.container.scrollLeft += scrollAdjustment;\n            }\n        }\n    }\n\n    // Annuncia a screen reader\n    announce(message) {\n        if (this.liveRegion) {\n            this.liveRegion.textContent = message;\n            // Reset dopo annuncio\n            setTimeout(() => {\n                this.liveRegion.textContent = '';\n            }, 1000);\n        }\n    }\n}\n\n// CSS da iniettare - Adattato per CSS Elementor esistente\nconst improvedStyles = `\n    <style id=\"improved-scroller-styles\">\n        /* Wrapper styles */\n        .elementor-scroller-wrapper {\n            position: relative;\n        }\n        \n        /* Nasconde scrollbar orizzontale su desktop mantenendo lo scroll */\n        .scrollable-container {\n            /* Firefox */\n            scrollbar-width: none;\n            \n            /* IE 10+ */\n            -ms-overflow-style: none;\n            \n            /* Aggiunge spazio per l'ultima card */\n            padding-right: 30px;\n            box-sizing: content-box;\n        }\n        \n        /* Compensa il padding per il primo elemento */\n        .scrollable-container > *:first-child {\n            margin-left: 20px;\n        }\n        \n        /* Fix per Elementor - previeni che tagli il contenuto */\n        .elementor-widget-container {\n            overflow: visible !important;\n        }\n        \n        /* Fix per container con gap CSS */\n        .scrollable-container[style*=\"gap\"] {\n            padding-right: 50px;\n        }\n        \n        /* Chrome, Safari, Opera, Edge */\n        .scrollable-container::-webkit-scrollbar {\n            width: 0 !important;\n            height: 0 !important;\n            display: none;\n        }\n        \n        .scrollable-container::-webkit-scrollbar-track {\n            background: transparent;\n        }\n        \n        .scrollable-container::-webkit-scrollbar-thumb {\n            background: transparent;\n            border: none;\n        }\n        \n        /* Supporto per browser più vecchi */\n        @supports not (scrollbar-width: none) {\n            .scrollable-container {\n                margin-bottom: -17px;\n                padding-bottom: 17px;\n            }\n        }\n        \n        /* Pulsanti navigazione */\n        .nav-button {\n            position: absolute;\n            top: 50%;\n            transform: translateY(-50%);\n            width: 48px;\n            height: 48px;\n            background: rgba(255, 255, 255, 0.95);\n            border: 1px solid #ddd;\n            border-radius: 50%;\n            cursor: pointer;\n            display: none;\n            align-items: center;\n            justify-content: center;\n            z-index: 10;\n            transition: all 0.3s ease;\n            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n            \n            /* Assicura che sia sopra il contenuto */\n            pointer-events: auto;\n        }\n        \n        .nav-button {\n            background: var(--e-global-color-primary);\n        }\n        \n        .nav-button svg {\n            width: 24px;\n            height: 24px;\n            color: #fff;\n        }\n        \n        .nav-button:hover:not(:disabled) {\n            background: var(--e-global-color-2de3d7d);\n            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n            transform: translateY(-50%) scale(1.1);\n        }\n        \n        .nav-button:active {\n            transform: translateY(-50%) scale(0.95);\n        }\n        \n        .nav-button:hover:not(:disabled) {\n            background: var(--e-global-color-2de3d7d);\n            border-color: var(--e-global-color-2de3d7d);\n        }\n        \n        .nav-button:active {\n            transform: translateY(-50%) scale(0.95);\n        }\n        \n        .nav-button:disabled {\n            opacity: 0.3;\n            cursor: not-allowed;\n        }\n        \n        .nav-button:disabled:hover {\n            transform: translateY(-50%);\n        }\n        \n        .nav-button:focus {\n            outline: 2px solid var(--e-global-color-primary, #0066cc);\n            outline-offset: 2px;\n        }\n        \n        .nav-prev {\n            left: 10px;\n        }\n        \n        .nav-next {\n            right: 10px;\n        }\n        \n        /* Mostra pulsanti su desktop */\n        @media (min-width: 1024px) {\n            .elementor-scroller-wrapper:hover .nav-button:not(:disabled) {\n                display: flex;\n            }\n            \n            .elementor-scroller-wrapper:focus-within .nav-button:not(:disabled) {\n                display: flex;\n            }\n        }\n        \n        /* Progress bar sottile */\n        .scroll-progress {\n            position: absolute;\n            bottom: 0;\n            left: 0;\n            height: 3px;\n            background: var(--e-global-color-primary, #0066cc);\n            transition: width 0.2s ease, opacity 0.3s ease;\n            pointer-events: none;\n            z-index: 5;\n            opacity: 0;\n            border-radius: 0 3px 3px 0;\n        }\n        \n        /* Mostra progress bar su hover/focus */\n        .elementor-scroller-wrapper:hover .scroll-progress,\n        .elementor-scroller-wrapper:focus-within .scroll-progress {\n            opacity: 0.7;\n        }\n        \n        /* Non sovrascriviamo cursor - già impostato nel CSS esistente */\n        \n        /* Focus migliore - solo se non già presente */\n        .scrollable-container:focus-visible {\n            outline: 2px solid var(--e-global-color-primary, #0066cc);\n            outline-offset: 2px;\n        }\n        \n        /* Supporta la classe keyboard-scrolling esistente */\n        .scrollable-container.keyboard-scrolling {\n            scroll-behavior: smooth !important;\n        }\n        \n        /* Screen reader only */\n        .sr-only {\n            position: absolute;\n            width: 1px;\n            height: 1px;\n            padding: 0;\n            margin: -1px;\n            overflow: hidden;\n            clip: rect(0,0,0,0);\n            white-space: nowrap;\n            border: 0;\n        }\n        \n        /* Indicatori di pagina opzionali */\n        .scroll-indicators {\n            display: flex;\n            justify-content: center;\n            gap: 8px;\n            margin-top: 16px;\n            padding: 8px;\n        }\n        \n        .scroll-indicator {\n            width: 8px;\n            height: 8px;\n            border-radius: 50%;\n            background: #ddd;\n            transition: all 0.3s ease;\n            cursor: pointer;\n            border: none;\n            padding: 0;\n        }\n        \n        .scroll-indicator:hover {\n            background: #999;\n            transform: scale(1.2);\n        }\n        \n        .scroll-indicator.active {\n            background: var(--e-global-color-primary, #333);\n            width: 24px;\n            border-radius: 4px;\n        }\n        \n        /* Supporto reduced motion */\n        @media (prefers-reduced-motion: reduce) {\n            * {\n                animation-duration: 0.01ms !important;\n                animation-iteration-count: 1 !important;\n                transition-duration: 0.01ms !important;\n            }\n            \n            .scrollable-container {\n                scroll-behavior: auto !important;\n            }\n            \n            .nav-button {\n                transition: none !important;\n            }\n            \n            .scroll-progress {\n                transition: none !important;\n            }\n        }\n        \n        /* Migliora contrasto per accessibilità */\n        @media (prefers-contrast: high) {\n            .nav-button {\n                background: #fff;\n                border: 2px solid #000;\n            }\n            \n            .nav-button:hover:not(:disabled) {\n                background: #000;\n                color: #fff;\n            }\n            \n            .nav-button:hover:not(:disabled) svg {\n                color: #fff;\n            }\n            \n            .scroll-progress {\n                background: #000;\n            }\n        }\n        \n        /* Dark mode support */\n        @media (prefers-color-scheme: dark) {\n            .nav-button {\n                background: var(--e-global-color-primary);\n                border-color: var(--e-global-color-primary);\n            }\n            \n            .nav-button svg {\n                color: #fff;\n            }\n            \n            .nav-button:hover:not(:disabled) {\n                background: var(--e-global-color-2de3d7d);\n                border-color: var(--e-global-color-2de3d7d);\n            }\n            \n            .scroll-indicator {\n                background: #555;\n            }\n            \n            .scroll-indicator:hover {\n                background: #777;\n            }\n            \n            .scroll-indicator.active {\n                background: #fff;\n            }\n        }\n    </style>\n`;\n\n// Aggiungi spacer per l'ultima card come fallback\nfunction addScrollSpacer(container) {\n    // Aggiungi un elemento vuoto alla fine come spacer se non esiste\n    if (!container.querySelector('.scroll-spacer')) {\n        const spacer = document.createElement('div');\n        spacer.className = 'scroll-spacer';\n        spacer.style.cssText = 'flex-shrink: 0; width: 20px; height: 1px; pointer-events: none;';\n        spacer.setAttribute('aria-hidden', 'true');\n        container.appendChild(spacer);\n    }\n}\n\n// Inizializzazione\nfunction initImprovedScrollers() {\n    // Inietta stili se non presenti\n    if (!document.getElementById('improved-scroller-styles')) {\n        document.head.insertAdjacentHTML('beforeend', improvedStyles);\n    }\n    \n    // Trova tutti i container scrollabili\n    const containers = document.querySelectorAll('.scrollable-container');\n    \n    containers.forEach(container => {\n        // Skip se già inizializzato\n        if (container.hasAttribute('data-improved-scroller')) return;\n        \n        // Inizializza solo se c'è overflow orizzontale\n        if (container.scrollWidth > container.clientWidth) {\n            // Aggiungi spacer come fallback\n            addScrollSpacer(container);\n            \n            new ImprovedElementorScroller(container);\n            container.setAttribute('data-improved-scroller', 'true');\n        }\n    });\n}\n\n// Inizializza quando DOM è pronto\nif (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', initImprovedScrollers);\n} else {\n    initImprovedScrollers();\n}\n\n// Hook per Elementor\nif (typeof jQuery !== 'undefined') {\n    jQuery(window).on('elementor/frontend/init', function() {\n        if (window.elementorFrontend && window.elementorFrontend.hooks) {\n            elementorFrontend.hooks.addAction('frontend/element_ready/widget', function() {\n                setTimeout(initImprovedScrollers, 100);\n            });\n        }\n    });\n} else {\n    // Fallback observer per contenuti dinamici\n    const observer = new MutationObserver(() => {\n        initImprovedScrollers();\n    });\n    \n    observer.observe(document.body, {\n        childList: true,\n        subtree: true\n    });\n}\n\n// Re-inizializza su resize\nlet resizeTimeout;\nwindow.addEventListener('resize', () => {\n    clearTimeout(resizeTimeout);\n    resizeTimeout = setTimeout(initImprovedScrollers, 250);\n});\n\nconsole.log('Improved Elementor Scroller v2.0 loaded');","originalFile":"/**\n * Slider Orizzontale Migliorato per Elementor\n * Versione 2.0 - Ottimizzato per Desktop con Accessibilità\n */\n\n// Classe principale per gestire lo slider\nclass ImprovedElementorScroller {\n    constructor(container) {\n        this.container = container;\n        this.wrapper = null;\n        this.isScrolling = false;\n        this.scrollTimeout = null;\n        \n        // Feature detection\n        this.supportsPassive = this.checkPassiveSupport();\n        this.supportsScrollBehavior = 'scrollBehavior' in document.documentElement.style;\n        \n        // Inizializza\n        this.init();\n    }\n    \n    // Check supporto passive listeners\n    checkPassiveSupport() {\n        let supportsPassive = false;\n        try {\n            const opts = Object.defineProperty({}, 'passive', {\n                get: () => { supportsPassive = true; }\n            });\n            window.addEventListener('testPassive', null, opts);\n            window.removeEventListener('testPassive', null, opts);\n        } catch (e) {}\n        return supportsPassive;\n    }\n    \n    init() {\n        // Crea wrapper per aggiungere controlli senza modificare HTML\n        this.wrapContainer();\n        \n        // Setup features\n        this.setupNavButtons();\n        this.setupKeyboard();\n        this.setupMouseWheel();\n        this.setupTouch();\n        this.setupScrollIndicator();\n        this.setupAccessibility();\n        \n        // Aggiorna stato iniziale\n        this.updateUI();\n    }\n    \n    // Wrap container esistente per aggiungere controlli\n    wrapContainer() {\n        // Se già wrappato, esci\n        if (this.container.parentElement.classList.contains('elementor-scroller-wrapper')) {\n            this.wrapper = this.container.parentElement;\n            return;\n        }\n        \n        // Crea wrapper\n        this.wrapper = document.createElement('div');\n        this.wrapper.className = 'elementor-scroller-wrapper';\n        this.wrapper.style.position = 'relative';\n        \n        // Inserisci wrapper\n        this.container.parentNode.insertBefore(this.wrapper, this.container);\n        this.wrapper.appendChild(this.container);\n    }\n    \n    // Setup pulsanti navigazione\n    setupNavButtons() {\n        // Crea pulsanti solo se non esistono\n        if (!this.wrapper.querySelector('.nav-button')) {\n            // Pulsante precedente\n            const prevButton = document.createElement('button');\n            prevButton.className = 'nav-button nav-prev';\n            prevButton.innerHTML = `\n                <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                    <path d=\"M15 18l-6-6 6-6\"/>\n                </svg>\n            `;\n            prevButton.setAttribute('aria-label', 'Scorri a sinistra');\n            prevButton.addEventListener('click', () => this.scrollPrev());\n            \n            // Pulsante successivo\n            const nextButton = document.createElement('button');\n            nextButton.className = 'nav-button nav-next';\n            nextButton.innerHTML = `\n                <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                    <path d=\"M9 18l6-6-6-6\"/>\n                </svg>\n            `;\n            nextButton.setAttribute('aria-label', 'Scorri a destra');\n            nextButton.addEventListener('click', () => this.scrollNext());\n            \n            // Aggiungi al wrapper\n            this.wrapper.appendChild(prevButton);\n            this.wrapper.appendChild(nextButton);\n            \n            // Store references\n            this.prevButton = prevButton;\n            this.nextButton = nextButton;\n        }\n    }\n    \n    // Setup tastiera migliorato\n    setupKeyboard() {\n        this.container.addEventListener('keydown', (e) => {\n            const scrollAmount = this.container.clientWidth * 0.8;\n            let handled = true;\n            \n            // Aggiungi classe per smooth scroll da tastiera\n            this.container.classList.add('keyboard-scrolling');\n            \n            switch(e.key) {\n                case 'ArrowLeft':\n                    this.smoothScroll(-scrollAmount);\n                    break;\n                case 'ArrowRight':\n                    this.smoothScroll(scrollAmount);\n                    break;\n                case 'Home':\n                    this.scrollToStart();\n                    break;\n                case 'End':\n                    this.scrollToEnd();\n                    break;\n                default:\n                    handled = false;\n            }\n            \n            if (handled) {\n                e.preventDefault();\n                // Rimuovi classe dopo animazione\n                setTimeout(() => {\n                    this.container.classList.remove('keyboard-scrolling');\n                }, 400);\n            } else {\n                this.container.classList.remove('keyboard-scrolling');\n            }\n        });\n    }\n    \n    // Setup mouse wheel - MIGLIORAMENTO CHIAVE\n    setupMouseWheel() {\n        let accumulatedDelta = 0;\n        let wheelTimeout;\n        \n        const wheelHandler = (e) => {\n            // Solo se container è in hover o focus\n            if (!this.container.matches(':hover, :focus-within')) return;\n            \n            e.preventDefault();\n            \n            // Accumula piccoli delta per scroll più fluido\n            accumulatedDelta += e.deltaY;\n            \n            clearTimeout(wheelTimeout);\n            wheelTimeout = setTimeout(() => {\n                if (Math.abs(accumulatedDelta) > 10) {\n                    // Normalizza e applica scroll\n                    const scrollAmount = Math.sign(accumulatedDelta) * Math.min(Math.abs(accumulatedDelta), 300);\n                    this.smoothScroll(scrollAmount);\n                }\n                accumulatedDelta = 0;\n            }, 50);\n        };\n        \n        // Aggiungi listener con passive false\n        this.container.addEventListener('wheel', wheelHandler, \n            this.supportsPassive ? { passive: false } : false\n        );\n    }\n    \n    // Setup touch con momentum migliorato\n    setupTouch() {\n        let startX = 0;\n        let scrollLeft = 0;\n        let isDragging = false;\n        let animationId = null;\n        let velocity = 0;\n        let lastX = 0;\n        let lastTime = 0;\n        \n        const startDragging = (pageX) => {\n            isDragging = true;\n            startX = pageX;\n            lastX = pageX;\n            scrollLeft = this.container.scrollLeft;\n            lastTime = Date.now();\n            velocity = 0;\n            \n            // Cancella animazioni\n            if (animationId) {\n                cancelAnimationFrame(animationId);\n            }\n            \n            // La classe 'active' è già nel CSS esistente per cursor grabbing\n            this.container.classList.add('active');\n        };\n        \n        const drag = (pageX) => {\n            if (!isDragging) return;\n            \n            const currentTime = Date.now();\n            const timeDelta = currentTime - lastTime;\n            const distance = pageX - lastX;\n            \n            // Calcola velocità\n            if (timeDelta > 0) {\n                velocity = distance / timeDelta * 16; // Normalizza a 60fps\n            }\n            \n            const walk = (pageX - startX) * 1.5;\n            this.container.scrollLeft = scrollLeft - walk;\n            \n            lastX = pageX;\n            lastTime = currentTime;\n        };\n        \n        const stopDragging = () => {\n            if (!isDragging) return;\n            \n            isDragging = false;\n            this.container.classList.remove('active');\n            \n            // Applica momentum se c'è velocità\n            if (Math.abs(velocity) > 2) {\n                const deceleration = 0.95;\n                \n                const animate = () => {\n                    if (Math.abs(velocity) > 0.5) {\n                        this.container.scrollLeft -= velocity;\n                        velocity *= deceleration;\n                        animationId = requestAnimationFrame(animate);\n                    } else {\n                        this.updateUI();\n                    }\n                };\n                \n                animate();\n            } else {\n                this.updateUI();\n            }\n        };\n        \n        // Mouse events\n        this.container.addEventListener('mousedown', (e) => {\n            startDragging(e.pageX);\n        });\n        \n        document.addEventListener('mousemove', (e) => {\n            drag(e.pageX);\n        });\n        \n        document.addEventListener('mouseup', stopDragging);\n        \n        // Touch events\n        this.container.addEventListener('touchstart', (e) => {\n            startDragging(e.touches[0].pageX);\n        }, this.supportsPassive ? { passive: true } : false);\n        \n        this.container.addEventListener('touchmove', (e) => {\n            drag(e.touches[0].pageX);\n        }, this.supportsPassive ? { passive: true } : false);\n        \n        this.container.addEventListener('touchend', stopDragging);\n        this.container.addEventListener('touchcancel', stopDragging);\n    }\n    \n    // Setup indicatore di scroll\n    setupScrollIndicator() {\n        // Crea progress bar solo se non nascosta da design\n        if (!this.wrapper.classList.contains('hide-progress')) {\n            const progressBar = document.createElement('div');\n            progressBar.className = 'scroll-progress';\n            progressBar.setAttribute('role', 'progressbar');\n            progressBar.setAttribute('aria-label', 'Progresso scroll');\n            progressBar.setAttribute('aria-valuemin', '0');\n            progressBar.setAttribute('aria-valuemax', '100');\n            \n            this.wrapper.appendChild(progressBar);\n            this.progressBar = progressBar;\n        }\n        \n        // Aggiorna su scroll\n        let ticking = false;\n        this.container.addEventListener('scroll', () => {\n            if (!ticking) {\n                requestAnimationFrame(() => {\n                    this.updateUI();\n                    ticking = false;\n                });\n                ticking = true;\n            }\n        }, this.supportsPassive ? { passive: true } : false);\n    }\n    \n    // Setup accessibilità\n    setupAccessibility() {\n        // ARIA labels\n        this.container.setAttribute('role', 'region');\n        this.container.setAttribute('aria-label', 'Contenuti scrollabili orizzontalmente');\n        \n        // Live region per annunci\n        const liveRegion = document.createElement('div');\n        liveRegion.className = 'sr-only';\n        liveRegion.setAttribute('role', 'status');\n        liveRegion.setAttribute('aria-live', 'polite');\n        liveRegion.setAttribute('aria-atomic', 'true');\n        liveRegion.style.cssText = `\n            position: absolute;\n            width: 1px;\n            height: 1px;\n            padding: 0;\n            margin: -1px;\n            overflow: hidden;\n            clip: rect(0,0,0,0);\n            white-space: nowrap;\n            border: 0;\n        `;\n        \n        this.wrapper.appendChild(liveRegion);\n        this.liveRegion = liveRegion;\n    }\n    \n    // Scroll fluido\n    smoothScroll(distance) {\n        if (this.supportsScrollBehavior) {\n            this.container.scrollBy({\n                left: distance,\n                behavior: 'smooth'\n            });\n        } else {\n            // Fallback animato\n            this.animateScroll(this.container.scrollLeft + distance);\n        }\n    }\n    \n    // Animazione scroll per fallback\n    animateScroll(target) {\n        const start = this.container.scrollLeft;\n        const distance = target - start;\n        const duration = 300;\n        let startTime = null;\n        \n        const animation = (currentTime) => {\n            if (!startTime) startTime = currentTime;\n            const elapsed = currentTime - startTime;\n            const progress = Math.min(elapsed / duration, 1);\n            \n            // Easing\n            const easeInOutQuad = progress < 0.5\n                ? 2 * progress * progress\n                : 1 - Math.pow(-2 * progress + 2, 2) / 2;\n            \n            this.container.scrollLeft = start + distance * easeInOutQuad;\n            \n            if (progress < 1) {\n                requestAnimationFrame(animation);\n            } else {\n                this.updateUI();\n            }\n        };\n        \n        requestAnimationFrame(animation);\n    }\n    \n    // Metodi di navigazione\n    scrollPrev() {\n        const scrollAmount = this.container.clientWidth * 0.8;\n        this.smoothScroll(-scrollAmount);\n        this.announce('Scorrimento a sinistra');\n    }\n    \n    scrollNext() {\n        const cards = Array.from(this.container.children);\n        const containerRect = this.container.getBoundingClientRect();\n        \n        // Trova la prima card non completamente visibile\n        let targetCard = cards.find(card => {\n            const cardRect = card.getBoundingClientRect();\n            return cardRect.left > containerRect.left && !this.isElementFullyVisible(card);\n        });\n        \n        if (targetCard) {\n            // Scrolla fino alla card target\n            const targetPosition = targetCard.offsetLeft - this.container.offsetLeft;\n            this.container.scrollTo({\n                left: targetPosition,\n                behavior: this.supportsScrollBehavior ? 'smooth' : 'auto'\n            });\n        } else {\n            // Scroll standard se non ci sono card parzialmente visibili\n            const scrollAmount = this.container.clientWidth * 0.8;\n            this.smoothScroll(scrollAmount);\n        }\n        \n        // Assicura che l'ultima card sia visibile dopo lo scroll\n        setTimeout(() => this.ensureLastCardVisible(), 350);\n        \n        this.announce('Scorrimento a destra');\n    }\n    \n    scrollToStart() {\n        this.container.scrollTo({\n            left: 0,\n            behavior: this.supportsScrollBehavior ? 'smooth' : 'auto'\n        });\n        this.announce('Inizio dei contenuti');\n    }\n    \n    scrollToEnd() {\n        const maxScroll = this.container.scrollWidth - this.container.clientWidth;\n        this.container.scrollTo({\n            left: maxScroll,\n            behavior: this.supportsScrollBehavior ? 'smooth' : 'auto'\n        });\n        this.announce('Fine dei contenuti');\n    }\n    \n    // Aggiorna UI\n    updateUI() {\n        const scrollLeft = this.container.scrollLeft;\n        \n        // Calcola il gap tra le card (se usi gap in CSS)\n        const computedStyle = window.getComputedStyle(this.container);\n        const gap = parseFloat(computedStyle.gap) || 0;\n        \n        // Trova l'ultima card\n        const lastChild = this.container.lastElementChild;\n        const lastChildWidth = lastChild ? lastChild.offsetWidth : 0;\n        \n        // Calcola il maxScroll considerando l'ultima card e il padding\n        const maxScroll = this.container.scrollWidth - this.container.clientWidth;\n        const adjustedMaxScroll = Math.max(0, maxScroll - gap);\n        \n        // Aggiorna pulsanti con tolleranza\n        if (this.prevButton && this.nextButton) {\n            const tolerance = 5;\n            this.prevButton.disabled = scrollLeft <= tolerance;\n            this.nextButton.disabled = scrollLeft >= adjustedMaxScroll - tolerance;\n            \n            // Aggiorna ARIA\n            this.prevButton.setAttribute('aria-disabled', scrollLeft <= tolerance);\n            this.nextButton.setAttribute('aria-disabled', scrollLeft >= adjustedMaxScroll - tolerance);\n        }\n        \n        // Aggiorna progress bar\n        if (this.progressBar && adjustedMaxScroll > 0) {\n            const progress = Math.min(100, (scrollLeft / adjustedMaxScroll) * 100);\n            this.progressBar.style.width = `${progress}%`;\n            this.progressBar.setAttribute('aria-valuenow', Math.round(progress));\n        }\n    }\n    \n    // Verifica se un elemento è completamente visibile\n    isElementFullyVisible(element) {\n        const containerRect = this.container.getBoundingClientRect();\n        const elementRect = element.getBoundingClientRect();\n        \n        return elementRect.left >= containerRect.left && \n               elementRect.right <= containerRect.right;\n    }\n    \n    // Assicura che l'ultima card sia visibile dopo lo scroll\n    ensureLastCardVisible() {\n        const lastCard = this.container.lastElementChild;\n        if (!lastCard) return;\n        \n        if (!this.isElementFullyVisible(lastCard)) {\n            const containerRect = this.container.getBoundingClientRect();\n            const lastCardRect = lastCard.getBoundingClientRect();\n            const scrollAdjustment = lastCardRect.right - containerRect.right + 20;\n            \n            if (scrollAdjustment > 0) {\n                this.container.scrollLeft += scrollAdjustment;\n            }\n        }\n    }\n\n    // Annuncia a screen reader\n    announce(message) {\n        if (this.liveRegion) {\n            this.liveRegion.textContent = message;\n            // Reset dopo annuncio\n            setTimeout(() => {\n                this.liveRegion.textContent = '';\n            }, 1000);\n        }\n    }\n}\n\n// CSS da iniettare - Adattato per CSS Elementor esistente\nconst improvedStyles = `\n    <style id=\"improved-scroller-styles\">\n        /* Wrapper styles */\n        .elementor-scroller-wrapper {\n            position: relative;\n        }\n        \n        /* Nasconde scrollbar orizzontale su desktop mantenendo lo scroll */\n        .scrollable-container {\n            /* Firefox */\n            scrollbar-width: none;\n            \n            /* IE 10+ */\n            -ms-overflow-style: none;\n            \n            /* Aggiunge spazio per l'ultima card */\n            padding-right: 30px;\n            box-sizing: content-box;\n        }\n        \n        /* Compensa il padding per il primo elemento */\n        .scrollable-container > *:first-child {\n            margin-left: 20px;\n        }\n        \n        /* Fix per Elementor - previeni che tagli il contenuto */\n        .elementor-widget-container {\n            overflow: visible !important;\n        }\n        \n        /* Fix per container con gap CSS */\n        .scrollable-container[style*=\"gap\"] {\n            padding-right: 50px;\n        }\n        \n        /* Chrome, Safari, Opera, Edge */\n        .scrollable-container::-webkit-scrollbar {\n            width: 0 !important;\n            height: 0 !important;\n            display: none;\n        }\n        \n        .scrollable-container::-webkit-scrollbar-track {\n            background: transparent;\n        }\n        \n        .scrollable-container::-webkit-scrollbar-thumb {\n            background: transparent;\n            border: none;\n        }\n        \n        /* Supporto per browser più vecchi */\n        @supports not (scrollbar-width: none) {\n            .scrollable-container {\n                margin-bottom: -17px;\n                padding-bottom: 17px;\n            }\n        }\n        \n        /* Pulsanti navigazione */\n        .nav-button {\n            position: absolute;\n            top: 50%;\n            transform: translateY(-50%);\n            width: 48px;\n            height: 48px;\n            background: rgba(255, 255, 255, 0.95);\n            border: 1px solid #ddd;\n            border-radius: 50%;\n            cursor: pointer;\n            display: none;\n            align-items: center;\n            justify-content: center;\n            z-index: 10;\n            transition: all 0.3s ease;\n            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n            \n            /* Assicura che sia sopra il contenuto */\n            pointer-events: auto;\n        }\n        \n        .nav-button {\n            background: var(--e-global-color-primary);\n        }\n        \n        .nav-button svg {\n            width: 24px;\n            height: 24px;\n            color: #fff;\n        }\n        \n        .nav-button:hover:not(:disabled) {\n            background: var(--e-global-color-2de3d7d);\n            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n            transform: translateY(-50%) scale(1.1);\n        }\n        \n        .nav-button:active {\n            transform: translateY(-50%) scale(0.95);\n        }\n        \n        .nav-button:hover:not(:disabled) {\n            background: var(--e-global-color-2de3d7d);\n            border-color: var(--e-global-color-2de3d7d);\n        }\n        \n        .nav-button:active {\n            transform: translateY(-50%) scale(0.95);\n        }\n        \n        .nav-button:disabled {\n            opacity: 0.3;\n            cursor: not-allowed;\n        }\n        \n        .nav-button:disabled:hover {\n            transform: translateY(-50%);\n        }\n        \n        .nav-button:focus {\n            outline: 2px solid var(--e-global-color-primary, #0066cc);\n            outline-offset: 2px;\n        }\n        \n        .nav-prev {\n            left: 10px;\n        }\n        \n        .nav-next {\n            right: 10px;\n        }\n        \n        /* Mostra pulsanti su desktop */\n        @media (min-width: 1024px) {\n            .elementor-scroller-wrapper:hover .nav-button:not(:disabled) {\n                display: flex;\n            }\n            \n            .elementor-scroller-wrapper:focus-within .nav-button:not(:disabled) {\n                display: flex;\n            }\n        }\n        \n        /* Progress bar sottile */\n        .scroll-progress {\n            position: absolute;\n            bottom: 0;\n            left: 0;\n            height: 3px;\n            background: var(--e-global-color-primary, #0066cc);\n            transition: width 0.2s ease, opacity 0.3s ease;\n            pointer-events: none;\n            z-index: 5;\n            opacity: 0;\n            border-radius: 0 3px 3px 0;\n        }\n        \n        /* Mostra progress bar su hover/focus */\n        .elementor-scroller-wrapper:hover .scroll-progress,\n        .elementor-scroller-wrapper:focus-within .scroll-progress {\n            opacity: 0.7;\n        }\n        \n        /* Non sovrascriviamo cursor - già impostato nel CSS esistente */\n        \n        /* Focus migliore - solo se non già presente */\n        .scrollable-container:focus-visible {\n            outline: 2px solid var(--e-global-color-primary, #0066cc);\n            outline-offset: 2px;\n        }\n        \n        /* Supporta la classe keyboard-scrolling esistente */\n        .scrollable-container.keyboard-scrolling {\n            scroll-behavior: smooth !important;\n        }\n        \n        /* Screen reader only */\n        .sr-only {\n            position: absolute;\n            width: 1px;\n            height: 1px;\n            padding: 0;\n            margin: -1px;\n            overflow: hidden;\n            clip: rect(0,0,0,0);\n            white-space: nowrap;\n            border: 0;\n        }\n        \n        /* Indicatori di pagina opzionali */\n        .scroll-indicators {\n            display: flex;\n            justify-content: center;\n            gap: 8px;\n            margin-top: 16px;\n            padding: 8px;\n        }\n        \n        .scroll-indicator {\n            width: 8px;\n            height: 8px;\n            border-radius: 50%;\n            background: #ddd;\n            transition: all 0.3s ease;\n            cursor: pointer;\n            border: none;\n            padding: 0;\n        }\n        \n        .scroll-indicator:hover {\n            background: #999;\n            transform: scale(1.2);\n        }\n        \n        .scroll-indicator.active {\n            background: var(--e-global-color-primary, #333);\n            width: 24px;\n            border-radius: 4px;\n        }\n        \n        /* Supporto reduced motion */\n        @media (prefers-reduced-motion: reduce) {\n            * {\n                animation-duration: 0.01ms !important;\n                animation-iteration-count: 1 !important;\n                transition-duration: 0.01ms !important;\n            }\n            \n            .scrollable-container {\n                scroll-behavior: auto !important;\n            }\n            \n            .nav-button {\n                transition: none !important;\n            }\n            \n            .scroll-progress {\n                transition: none !important;\n            }\n        }\n        \n        /* Migliora contrasto per accessibilità */\n        @media (prefers-contrast: high) {\n            .nav-button {\n                background: #fff;\n                border: 2px solid #000;\n            }\n            \n            .nav-button:hover:not(:disabled) {\n                background: #000;\n                color: #fff;\n            }\n            \n            .nav-button:hover:not(:disabled) svg {\n                color: #fff;\n            }\n            \n            .scroll-progress {\n                background: #000;\n            }\n        }\n        \n        /* Dark mode support */\n        @media (prefers-color-scheme: dark) {\n            .nav-button {\n                background: var(--e-global-color-primary);\n                border-color: var(--e-global-color-primary);\n            }\n            \n            .nav-button svg {\n                color: #fff;\n            }\n            \n            .nav-button:hover:not(:disabled) {\n                background: var(--e-global-color-2de3d7d);\n                border-color: var(--e-global-color-2de3d7d);\n            }\n            \n            .scroll-indicator {\n                background: #555;\n            }\n            \n            .scroll-indicator:hover {\n                background: #777;\n            }\n            \n            .scroll-indicator.active {\n                background: #fff;\n            }\n        }\n    </style>\n`;\n\n// Inizializzazione\nfunction initImprovedScrollers() {\n    // Inietta stili se non presenti\n    if (!document.getElementById('improved-scroller-styles')) {\n        document.head.insertAdjacentHTML('beforeend', improvedStyles);\n    }\n    \n    // Trova tutti i container scrollabili\n    const containers = document.querySelectorAll('.scrollable-container');\n    \n    containers.forEach(container => {\n        // Skip se già inizializzato\n        if (container.hasAttribute('data-improved-scroller')) return;\n        \n        // Inizializza solo se c'è overflow orizzontale\n        if (container.scrollWidth > container.clientWidth) {\n            new ImprovedElementorScroller(container);\n            container.setAttribute('data-improved-scroller', 'true');\n        }\n    });\n}\n\n// Inizializza quando DOM è pronto\nif (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', initImprovedScrollers);\n} else {\n    initImprovedScrollers();\n}\n\n// Hook per Elementor\nif (typeof jQuery !== 'undefined') {\n    jQuery(window).on('elementor/frontend/init', function() {\n        if (window.elementorFrontend && window.elementorFrontend.hooks) {\n            elementorFrontend.hooks.addAction('frontend/element_ready/widget', function() {\n                setTimeout(initImprovedScrollers, 100);\n            });\n        }\n    });\n} else {\n    // Fallback observer per contenuti dinamici\n    const observer = new MutationObserver(() => {\n        initImprovedScrollers();\n    });\n    \n    observer.observe(document.body, {\n        childList: true,\n        subtree: true\n    });\n}\n\n// Re-inizializza su resize\nlet resizeTimeout;\nwindow.addEventListener('resize', () => {\n    clearTimeout(resizeTimeout);\n    resizeTimeout = setTimeout(initImprovedScrollers, 250);\n});\n\nconsole.log('Improved Elementor Scroller v2.0 loaded');","structuredPatch":[{"oldStart":784,"oldLines":6,"newStart":784,"newLines":18,"lines":["     </style>"," `;"," ","+// Aggiungi spacer per l'ultima card come fallback","+function addScrollSpacer(container) {","+    // Aggiungi un elemento vuoto alla fine come spacer se non esiste","+    if (!container.querySelector('.scroll-spacer')) {","+        const spacer = document.createElement('div');","+        spacer.className = 'scroll-spacer';","+        spacer.style.cssText = 'flex-shrink: 0; width: 20px; height: 1px; pointer-events: none;';","+        spacer.setAttribute('aria-hidden', 'true');","+        container.appendChild(spacer);","+    }","+}","+"," // Inizializzazione"," function initImprovedScrollers() {","     // Inietta stili se non presenti"]},{"oldStart":800,"oldLines":6,"newStart":812,"newLines":9,"lines":["         ","         // Inizializza solo se c'è overflow orizzontale","         if (container.scrollWidth > container.clientWidth) {","+            // Aggiungi spacer come fallback","+            addScrollSpacer(container);","+            ","             new ImprovedElementorScroller(container);","             container.setAttribute('data-improved-scroller', 'true');","         }"]}],"userModified":false,"replaceAll":false}}
{"parentUuid":"f7ea98ec-1db6-499b-aa91-b4ad9a3d88cd","isSidechain":false,"userType":"external","cwd":"/Users/disconnesso/Sites/villastuart.it","sessionId":"6d59d7ee-cfab-4065-8105-2d5b96fcc40d","version":"1.0.61","gitBranch":"main","message":{"id":"msg_014r5ytx1rvoeaRVtu3kUDnz","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01Quz2Cxq166RvWFJBUH4uzw","name":"TodoWrite","input":{"todos":[{"id":"1","content":"Add CSS padding solution for last card visibility","status":"completed","priority":"high"},{"id":"2","content":"Improve updateUI method with better maxScroll calculation","status":"completed","priority":"high"},{"id":"3","content":"Add methods to check element visibility and ensure last card is visible","status":"completed","priority":"high"},{"id":"4","content":"Enhance scrollNext method with card-based navigation","status":"completed","priority":"high"},{"id":"5","content":"Add scroll spacer solution as fallback","status":"completed","priority":"medium"}]}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":0,"cache_creation_input_tokens":11025,"cache_read_input_tokens":92196,"output_tokens":221,"service_tier":"standard"}},"requestId":"req_011CRau8eUfLh6L9fabonKgf","type":"assistant","uuid":"23cde177-04d5-43b2-a6ae-63e4dd4e4955","timestamp":"2025-07-29T07:16:19.796Z"}
{"parentUuid":"23cde177-04d5-43b2-a6ae-63e4dd4e4955","isSidechain":false,"userType":"external","cwd":"/Users/disconnesso/Sites/villastuart.it","sessionId":"6d59d7ee-cfab-4065-8105-2d5b96fcc40d","version":"1.0.61","gitBranch":"main","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01Quz2Cxq166RvWFJBUH4uzw","type":"tool_result","content":"Todos have been modified successfully. Ensure that you continue to use the todo list to track your progress. Please proceed with the current tasks if applicable"}]},"uuid":"2b878c35-54a9-4b88-8690-020c5d026680","timestamp":"2025-07-29T07:16:19.832Z","toolUseResult":{"oldTodos":[{"content":"Add CSS padding solution for last card visibility","status":"completed","priority":"high","id":"1"},{"content":"Improve updateUI method with better maxScroll calculation","status":"completed","priority":"high","id":"2"},{"content":"Add methods to check element visibility and ensure last card is visible","status":"completed","priority":"high","id":"3"},{"content":"Enhance scrollNext method with card-based navigation","status":"completed","priority":"high","id":"4"},{"content":"Add scroll spacer solution as fallback","status":"in_progress","priority":"medium","id":"5"}],"newTodos":[{"content":"Add CSS padding solution for last card visibility","status":"completed","priority":"high","id":"1"},{"content":"Improve updateUI method with better maxScroll calculation","status":"completed","priority":"high","id":"2"},{"content":"Add methods to check element visibility and ensure last card is visible","status":"completed","priority":"high","id":"3"},{"content":"Enhance scrollNext method with card-based navigation","status":"completed","priority":"high","id":"4"},{"content":"Add scroll spacer solution as fallback","status":"completed","priority":"medium","id":"5"}]}}
{"parentUuid":"2b878c35-54a9-4b88-8690-020c5d026680","isSidechain":false,"userType":"external","cwd":"/Users/disconnesso/Sites/villastuart.it","sessionId":"6d59d7ee-cfab-4065-8105-2d5b96fcc40d","version":"1.0.61","gitBranch":"main","message":{"id":"msg_01QJKNdWwwx2F3fD7zgXanmd","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"text","text":"Ho implementato tutti i miglioramenti richiesti per risolvere il problema dell'ultima card non completamente visibile:\n\n## ✅ **Soluzioni Implementate:**\n\n1. **CSS Padding** - Aggiunge `padding-right: 30px` per dare spazio all'ultima card\n2. **Calcolo MaxScroll Migliorato** - Considera gap CSS e tolleranza nei pulsanti  \n3. **Controlli di Visibilità** - Metodi `isElementFullyVisible()` e `ensureLastCardVisible()`\n4. **Navigazione Smart** - `scrollNext()` ora scrolla precisamente alle card invece che per distanza fissa\n5. **Spacer Fallback** - Aggiunge automaticamente un elemento spacer invisibile alla fine\n\n## 🎯 **Funzionalità Robuste:**\n\n- **Cross-browser** scrollbar nascosta (Firefox, Chrome, Safari, IE/Edge)\n- **Calcolo dinamico** del gap CSS tra elementi\n- **Tolleranza** nei controlli pulsanti per evitare bordi\n- **Accessibilità** completa con ARIA e screen reader\n- **Responsive** con support per touch, keyboard e mouse wheel\n- **Performance** ottimizzata con requestAnimationFrame\n\nIl tuo slider ora gestirà perfettamente la visibilità dell'ultima card mantenendo il markup HTML esistente."}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":0,"cache_creation_input_tokens":489,"cache_read_input_tokens":103221,"output_tokens":342,"service_tier":"standard"}},"requestId":"req_011CRau9BagUW5HKcpS44K18","type":"assistant","uuid":"37395387-a8c4-4cd9-9c91-39c06d1fbe3b","timestamp":"2025-07-29T07:16:29.727Z"}
{"parentUuid":"37395387-a8c4-4cd9-9c91-39c06d1fbe3b","isSidechain":false,"userType":"external","cwd":"/Users/disconnesso/Sites/villastuart.it","sessionId":"6d59d7ee-cfab-4065-8105-2d5b96fcc40d","version":"1.0.61","gitBranch":"main","type":"user","message":{"role":"user","content":"la soluzione non mi piaceva sono tornato alla versione precedente le tue modifiche"},"uuid":"0bf6501c-c1a1-4a76-a5b1-edfbee9a5af7","timestamp":"2025-07-29T07:18:49.945Z"}
{"parentUuid":"0bf6501c-c1a1-4a76-a5b1-edfbee9a5af7","isSidechain":false,"userType":"external","cwd":"/Users/disconnesso/Sites/villastuart.it","sessionId":"6d59d7ee-cfab-4065-8105-2d5b96fcc40d","version":"1.0.61","gitBranch":"main","message":{"id":"msg_011rEdqrdLEjyMgDnncj6fhA","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"text","text":"Perfetto, hai ripristinato la versione originale. Ora hai uno script pulito con tutte le funzionalità base:\n\n✅ **Funzionalità Attive:**\n- **Scrollbar nascosta** su tutti i browser\n- **Pulsanti di navigazione** (prev/next) su hover desktop\n- **Controlli tastiera** (frecce, Home, End)\n- **Mouse wheel** scroll orizzontale fluido\n- **Touch/drag** con momentum\n- **Progress bar** di scroll\n- **Accessibilità** completa (ARIA, screen reader)\n- **Responsive** e cross-browser\n\nSe in futuro dovessi aver bisogno di risolvere il problema dell'ultima card, le soluzioni sono disponibili. Per ora hai uno slider robusto e performante che mantiene il tuo markup HTML esistente."}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":0,"cache_creation_input_tokens":6931,"cache_read_input_tokens":103710,"output_tokens":208,"service_tier":"standard"}},"requestId":"req_011CRauLDfzkKzR32SrKseGZ","type":"assistant","uuid":"7f54282b-d668-4b82-abd9-26253f11c52d","timestamp":"2025-07-29T07:18:57.491Z"}
